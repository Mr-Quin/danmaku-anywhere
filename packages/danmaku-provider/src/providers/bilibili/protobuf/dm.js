/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
import * as $protobuf from "protobufjs/minimal";

// Common aliases
const $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
const $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

export const bilibili = $root.bilibili = (() => {

    /**
     * Namespace bilibili.
     * @exports bilibili
     * @namespace
     */
    const bilibili = {};

    bilibili.community = (function() {

        /**
         * Namespace community.
         * @memberof bilibili
         * @namespace
         */
        const community = {};

        community.service = (function() {

            /**
             * Namespace service.
             * @memberof bilibili.community
             * @namespace
             */
            const service = {};

            service.dm = (function() {

                /**
                 * Namespace dm.
                 * @memberof bilibili.community.service
                 * @namespace
                 */
                const dm = {};

                dm.v1 = (function() {

                    /**
                     * Namespace v1.
                     * @memberof bilibili.community.service.dm
                     * @namespace
                     */
                    const v1 = {};

                    v1.DM = (function() {

                        /**
                         * Constructs a new DM service.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a DM
                         * @extends $protobuf.rpc.Service
                         * @constructor
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         */
                        function DM(rpcImpl, requestDelimited, responseDelimited) {
                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                        }

                        (DM.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = DM;

                        /**
                         * Creates new DM service using the specified rpc implementation.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.DM
                         * @static
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         * @returns {DM} RPC service. Useful where requests and/or responses are streamed.
                         */
                        DM.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                            return new this(rpcImpl, requestDelimited, responseDelimited);
                        };

                        /**
                         * Callback as used by {@link bilibili.community.service.dm.v1.DM#dmSegMobile}.
                         * @memberof bilibili.community.service.dm.v1.DM
                         * @typedef DmSegMobileCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {bilibili.community.service.dm.v1.DmSegMobileReply} [response] DmSegMobileReply
                         */

                        /**
                         * Calls DmSegMobile.
                         * @function dmSegMobile
                         * @memberof bilibili.community.service.dm.v1.DM
                         * @instance
                         * @param {bilibili.community.service.dm.v1.IDmSegMobileReq} request DmSegMobileReq message or plain object
                         * @param {bilibili.community.service.dm.v1.DM.DmSegMobileCallback} callback Node-style callback called with the error, if any, and DmSegMobileReply
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DM.prototype.dmSegMobile = function dmSegMobile(request, callback) {
                            return this.rpcCall(dmSegMobile, $root.bilibili.community.service.dm.v1.DmSegMobileReq, $root.bilibili.community.service.dm.v1.DmSegMobileReply, request, callback);
                        }, "name", { value: "DmSegMobile" });

                        /**
                         * Calls DmSegMobile.
                         * @function dmSegMobile
                         * @memberof bilibili.community.service.dm.v1.DM
                         * @instance
                         * @param {bilibili.community.service.dm.v1.IDmSegMobileReq} request DmSegMobileReq message or plain object
                         * @returns {Promise<bilibili.community.service.dm.v1.DmSegMobileReply>} Promise
                         * @variation 2
                         */

                        /**
                         * Callback as used by {@link bilibili.community.service.dm.v1.DM#dmView}.
                         * @memberof bilibili.community.service.dm.v1.DM
                         * @typedef DmViewCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {bilibili.community.service.dm.v1.DmViewReply} [response] DmViewReply
                         */

                        /**
                         * Calls DmView.
                         * @function dmView
                         * @memberof bilibili.community.service.dm.v1.DM
                         * @instance
                         * @param {bilibili.community.service.dm.v1.IDmViewReq} request DmViewReq message or plain object
                         * @param {bilibili.community.service.dm.v1.DM.DmViewCallback} callback Node-style callback called with the error, if any, and DmViewReply
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DM.prototype.dmView = function dmView(request, callback) {
                            return this.rpcCall(dmView, $root.bilibili.community.service.dm.v1.DmViewReq, $root.bilibili.community.service.dm.v1.DmViewReply, request, callback);
                        }, "name", { value: "DmView" });

                        /**
                         * Calls DmView.
                         * @function dmView
                         * @memberof bilibili.community.service.dm.v1.DM
                         * @instance
                         * @param {bilibili.community.service.dm.v1.IDmViewReq} request DmViewReq message or plain object
                         * @returns {Promise<bilibili.community.service.dm.v1.DmViewReply>} Promise
                         * @variation 2
                         */

                        /**
                         * Callback as used by {@link bilibili.community.service.dm.v1.DM#dmPlayerConfig}.
                         * @memberof bilibili.community.service.dm.v1.DM
                         * @typedef DmPlayerConfigCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {bilibili.community.service.dm.v1.Response} [response] Response
                         */

                        /**
                         * Calls DmPlayerConfig.
                         * @function dmPlayerConfig
                         * @memberof bilibili.community.service.dm.v1.DM
                         * @instance
                         * @param {bilibili.community.service.dm.v1.IDmPlayerConfigReq} request DmPlayerConfigReq message or plain object
                         * @param {bilibili.community.service.dm.v1.DM.DmPlayerConfigCallback} callback Node-style callback called with the error, if any, and Response
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DM.prototype.dmPlayerConfig = function dmPlayerConfig(request, callback) {
                            return this.rpcCall(dmPlayerConfig, $root.bilibili.community.service.dm.v1.DmPlayerConfigReq, $root.bilibili.community.service.dm.v1.Response, request, callback);
                        }, "name", { value: "DmPlayerConfig" });

                        /**
                         * Calls DmPlayerConfig.
                         * @function dmPlayerConfig
                         * @memberof bilibili.community.service.dm.v1.DM
                         * @instance
                         * @param {bilibili.community.service.dm.v1.IDmPlayerConfigReq} request DmPlayerConfigReq message or plain object
                         * @returns {Promise<bilibili.community.service.dm.v1.Response>} Promise
                         * @variation 2
                         */

                        /**
                         * Callback as used by {@link bilibili.community.service.dm.v1.DM#dmSegOtt}.
                         * @memberof bilibili.community.service.dm.v1.DM
                         * @typedef DmSegOttCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {bilibili.community.service.dm.v1.DmSegOttReply} [response] DmSegOttReply
                         */

                        /**
                         * Calls DmSegOtt.
                         * @function dmSegOtt
                         * @memberof bilibili.community.service.dm.v1.DM
                         * @instance
                         * @param {bilibili.community.service.dm.v1.IDmSegOttReq} request DmSegOttReq message or plain object
                         * @param {bilibili.community.service.dm.v1.DM.DmSegOttCallback} callback Node-style callback called with the error, if any, and DmSegOttReply
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DM.prototype.dmSegOtt = function dmSegOtt(request, callback) {
                            return this.rpcCall(dmSegOtt, $root.bilibili.community.service.dm.v1.DmSegOttReq, $root.bilibili.community.service.dm.v1.DmSegOttReply, request, callback);
                        }, "name", { value: "DmSegOtt" });

                        /**
                         * Calls DmSegOtt.
                         * @function dmSegOtt
                         * @memberof bilibili.community.service.dm.v1.DM
                         * @instance
                         * @param {bilibili.community.service.dm.v1.IDmSegOttReq} request DmSegOttReq message or plain object
                         * @returns {Promise<bilibili.community.service.dm.v1.DmSegOttReply>} Promise
                         * @variation 2
                         */

                        /**
                         * Callback as used by {@link bilibili.community.service.dm.v1.DM#dmSegSDK}.
                         * @memberof bilibili.community.service.dm.v1.DM
                         * @typedef DmSegSDKCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {bilibili.community.service.dm.v1.DmSegSDKReply} [response] DmSegSDKReply
                         */

                        /**
                         * Calls DmSegSDK.
                         * @function dmSegSDK
                         * @memberof bilibili.community.service.dm.v1.DM
                         * @instance
                         * @param {bilibili.community.service.dm.v1.IDmSegSDKReq} request DmSegSDKReq message or plain object
                         * @param {bilibili.community.service.dm.v1.DM.DmSegSDKCallback} callback Node-style callback called with the error, if any, and DmSegSDKReply
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DM.prototype.dmSegSDK = function dmSegSDK(request, callback) {
                            return this.rpcCall(dmSegSDK, $root.bilibili.community.service.dm.v1.DmSegSDKReq, $root.bilibili.community.service.dm.v1.DmSegSDKReply, request, callback);
                        }, "name", { value: "DmSegSDK" });

                        /**
                         * Calls DmSegSDK.
                         * @function dmSegSDK
                         * @memberof bilibili.community.service.dm.v1.DM
                         * @instance
                         * @param {bilibili.community.service.dm.v1.IDmSegSDKReq} request DmSegSDKReq message or plain object
                         * @returns {Promise<bilibili.community.service.dm.v1.DmSegSDKReply>} Promise
                         * @variation 2
                         */

                        /**
                         * Callback as used by {@link bilibili.community.service.dm.v1.DM#dmExpoReport}.
                         * @memberof bilibili.community.service.dm.v1.DM
                         * @typedef DmExpoReportCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {bilibili.community.service.dm.v1.DmExpoReportRes} [response] DmExpoReportRes
                         */

                        /**
                         * Calls DmExpoReport.
                         * @function dmExpoReport
                         * @memberof bilibili.community.service.dm.v1.DM
                         * @instance
                         * @param {bilibili.community.service.dm.v1.IDmExpoReportReq} request DmExpoReportReq message or plain object
                         * @param {bilibili.community.service.dm.v1.DM.DmExpoReportCallback} callback Node-style callback called with the error, if any, and DmExpoReportRes
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(DM.prototype.dmExpoReport = function dmExpoReport(request, callback) {
                            return this.rpcCall(dmExpoReport, $root.bilibili.community.service.dm.v1.DmExpoReportReq, $root.bilibili.community.service.dm.v1.DmExpoReportRes, request, callback);
                        }, "name", { value: "DmExpoReport" });

                        /**
                         * Calls DmExpoReport.
                         * @function dmExpoReport
                         * @memberof bilibili.community.service.dm.v1.DM
                         * @instance
                         * @param {bilibili.community.service.dm.v1.IDmExpoReportReq} request DmExpoReportReq message or plain object
                         * @returns {Promise<bilibili.community.service.dm.v1.DmExpoReportRes>} Promise
                         * @variation 2
                         */

                        return DM;
                    })();

                    v1.Avatar = (function() {

                        /**
                         * Properties of an Avatar.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IAvatar
                         * @property {string|null} [id] Avatar id
                         * @property {string|null} [url] Avatar url
                         * @property {bilibili.community.service.dm.v1.AvatarType|null} [avatarType] Avatar avatarType
                         */

                        /**
                         * Constructs a new Avatar.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents an Avatar.
                         * @implements IAvatar
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IAvatar=} [properties] Properties to set
                         */
                        function Avatar(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Avatar id.
                         * @member {string} id
                         * @memberof bilibili.community.service.dm.v1.Avatar
                         * @instance
                         */
                        Avatar.prototype.id = "";

                        /**
                         * Avatar url.
                         * @member {string} url
                         * @memberof bilibili.community.service.dm.v1.Avatar
                         * @instance
                         */
                        Avatar.prototype.url = "";

                        /**
                         * Avatar avatarType.
                         * @member {bilibili.community.service.dm.v1.AvatarType} avatarType
                         * @memberof bilibili.community.service.dm.v1.Avatar
                         * @instance
                         */
                        Avatar.prototype.avatarType = 0;

                        /**
                         * Creates a new Avatar instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.Avatar
                         * @static
                         * @param {bilibili.community.service.dm.v1.IAvatar=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.Avatar} Avatar instance
                         */
                        Avatar.create = function create(properties) {
                            return new Avatar(properties);
                        };

                        /**
                         * Encodes the specified Avatar message. Does not implicitly {@link bilibili.community.service.dm.v1.Avatar.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.Avatar
                         * @static
                         * @param {bilibili.community.service.dm.v1.IAvatar} message Avatar message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Avatar.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                            if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);
                            if (message.avatarType != null && Object.hasOwnProperty.call(message, "avatarType"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.avatarType);
                            return writer;
                        };

                        /**
                         * Encodes the specified Avatar message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.Avatar.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.Avatar
                         * @static
                         * @param {bilibili.community.service.dm.v1.IAvatar} message Avatar message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Avatar.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an Avatar message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.Avatar
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.Avatar} Avatar
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Avatar.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.Avatar();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.id = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.url = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.avatarType = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an Avatar message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.Avatar
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.Avatar} Avatar
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Avatar.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an Avatar message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.Avatar
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Avatar.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isString(message.id))
                                    return "id: string expected";
                            if (message.url != null && message.hasOwnProperty("url"))
                                if (!$util.isString(message.url))
                                    return "url: string expected";
                            if (message.avatarType != null && message.hasOwnProperty("avatarType"))
                                switch (message.avatarType) {
                                default:
                                    return "avatarType: enum value expected";
                                case 0:
                                case 1:
                                    break;
                                }
                            return null;
                        };

                        /**
                         * Creates an Avatar message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.Avatar
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.Avatar} Avatar
                         */
                        Avatar.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.Avatar)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.Avatar();
                            if (object.id != null)
                                message.id = String(object.id);
                            if (object.url != null)
                                message.url = String(object.url);
                            switch (object.avatarType) {
                            default:
                                if (typeof object.avatarType === "number") {
                                    message.avatarType = object.avatarType;
                                    break;
                                }
                                break;
                            case "AvatarTypeNone":
                            case 0:
                                message.avatarType = 0;
                                break;
                            case "AvatarTypeNFT":
                            case 1:
                                message.avatarType = 1;
                                break;
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from an Avatar message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.Avatar
                         * @static
                         * @param {bilibili.community.service.dm.v1.Avatar} message Avatar
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Avatar.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.id = "";
                                object.url = "";
                                object.avatarType = options.enums === String ? "AvatarTypeNone" : 0;
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                object.id = message.id;
                            if (message.url != null && message.hasOwnProperty("url"))
                                object.url = message.url;
                            if (message.avatarType != null && message.hasOwnProperty("avatarType"))
                                object.avatarType = options.enums === String ? $root.bilibili.community.service.dm.v1.AvatarType[message.avatarType] === undefined ? message.avatarType : $root.bilibili.community.service.dm.v1.AvatarType[message.avatarType] : message.avatarType;
                            return object;
                        };

                        /**
                         * Converts this Avatar to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.Avatar
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Avatar.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for Avatar
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.Avatar
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Avatar.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.Avatar";
                        };

                        return Avatar;
                    })();

                    /**
                     * AvatarType enum.
                     * @name bilibili.community.service.dm.v1.AvatarType
                     * @enum {number}
                     * @property {number} AvatarTypeNone=0 AvatarTypeNone value
                     * @property {number} AvatarTypeNFT=1 AvatarTypeNFT value
                     */
                    v1.AvatarType = (function() {
                        const valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "AvatarTypeNone"] = 0;
                        values[valuesById[1] = "AvatarTypeNFT"] = 1;
                        return values;
                    })();

                    v1.Bubble = (function() {

                        /**
                         * Properties of a Bubble.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IBubble
                         * @property {string|null} [text] Bubble text
                         * @property {string|null} [url] Bubble url
                         */

                        /**
                         * Constructs a new Bubble.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a Bubble.
                         * @implements IBubble
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IBubble=} [properties] Properties to set
                         */
                        function Bubble(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Bubble text.
                         * @member {string} text
                         * @memberof bilibili.community.service.dm.v1.Bubble
                         * @instance
                         */
                        Bubble.prototype.text = "";

                        /**
                         * Bubble url.
                         * @member {string} url
                         * @memberof bilibili.community.service.dm.v1.Bubble
                         * @instance
                         */
                        Bubble.prototype.url = "";

                        /**
                         * Creates a new Bubble instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.Bubble
                         * @static
                         * @param {bilibili.community.service.dm.v1.IBubble=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.Bubble} Bubble instance
                         */
                        Bubble.create = function create(properties) {
                            return new Bubble(properties);
                        };

                        /**
                         * Encodes the specified Bubble message. Does not implicitly {@link bilibili.community.service.dm.v1.Bubble.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.Bubble
                         * @static
                         * @param {bilibili.community.service.dm.v1.IBubble} message Bubble message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Bubble.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);
                            if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);
                            return writer;
                        };

                        /**
                         * Encodes the specified Bubble message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.Bubble.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.Bubble
                         * @static
                         * @param {bilibili.community.service.dm.v1.IBubble} message Bubble message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Bubble.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Bubble message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.Bubble
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.Bubble} Bubble
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Bubble.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.Bubble();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.text = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.url = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Bubble message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.Bubble
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.Bubble} Bubble
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Bubble.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Bubble message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.Bubble
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Bubble.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.text != null && message.hasOwnProperty("text"))
                                if (!$util.isString(message.text))
                                    return "text: string expected";
                            if (message.url != null && message.hasOwnProperty("url"))
                                if (!$util.isString(message.url))
                                    return "url: string expected";
                            return null;
                        };

                        /**
                         * Creates a Bubble message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.Bubble
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.Bubble} Bubble
                         */
                        Bubble.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.Bubble)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.Bubble();
                            if (object.text != null)
                                message.text = String(object.text);
                            if (object.url != null)
                                message.url = String(object.url);
                            return message;
                        };

                        /**
                         * Creates a plain object from a Bubble message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.Bubble
                         * @static
                         * @param {bilibili.community.service.dm.v1.Bubble} message Bubble
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Bubble.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.text = "";
                                object.url = "";
                            }
                            if (message.text != null && message.hasOwnProperty("text"))
                                object.text = message.text;
                            if (message.url != null && message.hasOwnProperty("url"))
                                object.url = message.url;
                            return object;
                        };

                        /**
                         * Converts this Bubble to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.Bubble
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Bubble.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for Bubble
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.Bubble
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Bubble.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.Bubble";
                        };

                        return Bubble;
                    })();

                    /**
                     * BubbleType enum.
                     * @name bilibili.community.service.dm.v1.BubbleType
                     * @enum {number}
                     * @property {number} BubbleTypeNone=0 BubbleTypeNone value
                     * @property {number} BubbleTypeClickButton=1 BubbleTypeClickButton value
                     * @property {number} BubbleTypeDmSettingPanel=2 BubbleTypeDmSettingPanel value
                     */
                    v1.BubbleType = (function() {
                        const valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "BubbleTypeNone"] = 0;
                        values[valuesById[1] = "BubbleTypeClickButton"] = 1;
                        values[valuesById[2] = "BubbleTypeDmSettingPanel"] = 2;
                        return values;
                    })();

                    v1.BubbleV2 = (function() {

                        /**
                         * Properties of a BubbleV2.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IBubbleV2
                         * @property {string|null} [text] BubbleV2 text
                         * @property {string|null} [url] BubbleV2 url
                         * @property {bilibili.community.service.dm.v1.BubbleType|null} [bubbleType] BubbleV2 bubbleType
                         * @property {boolean|null} [exposureOnce] BubbleV2 exposureOnce
                         * @property {bilibili.community.service.dm.v1.ExposureType|null} [exposureType] BubbleV2 exposureType
                         */

                        /**
                         * Constructs a new BubbleV2.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a BubbleV2.
                         * @implements IBubbleV2
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IBubbleV2=} [properties] Properties to set
                         */
                        function BubbleV2(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * BubbleV2 text.
                         * @member {string} text
                         * @memberof bilibili.community.service.dm.v1.BubbleV2
                         * @instance
                         */
                        BubbleV2.prototype.text = "";

                        /**
                         * BubbleV2 url.
                         * @member {string} url
                         * @memberof bilibili.community.service.dm.v1.BubbleV2
                         * @instance
                         */
                        BubbleV2.prototype.url = "";

                        /**
                         * BubbleV2 bubbleType.
                         * @member {bilibili.community.service.dm.v1.BubbleType} bubbleType
                         * @memberof bilibili.community.service.dm.v1.BubbleV2
                         * @instance
                         */
                        BubbleV2.prototype.bubbleType = 0;

                        /**
                         * BubbleV2 exposureOnce.
                         * @member {boolean} exposureOnce
                         * @memberof bilibili.community.service.dm.v1.BubbleV2
                         * @instance
                         */
                        BubbleV2.prototype.exposureOnce = false;

                        /**
                         * BubbleV2 exposureType.
                         * @member {bilibili.community.service.dm.v1.ExposureType} exposureType
                         * @memberof bilibili.community.service.dm.v1.BubbleV2
                         * @instance
                         */
                        BubbleV2.prototype.exposureType = 0;

                        /**
                         * Creates a new BubbleV2 instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.BubbleV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.IBubbleV2=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.BubbleV2} BubbleV2 instance
                         */
                        BubbleV2.create = function create(properties) {
                            return new BubbleV2(properties);
                        };

                        /**
                         * Encodes the specified BubbleV2 message. Does not implicitly {@link bilibili.community.service.dm.v1.BubbleV2.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.BubbleV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.IBubbleV2} message BubbleV2 message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        BubbleV2.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);
                            if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);
                            if (message.bubbleType != null && Object.hasOwnProperty.call(message, "bubbleType"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.bubbleType);
                            if (message.exposureOnce != null && Object.hasOwnProperty.call(message, "exposureOnce"))
                                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.exposureOnce);
                            if (message.exposureType != null && Object.hasOwnProperty.call(message, "exposureType"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.exposureType);
                            return writer;
                        };

                        /**
                         * Encodes the specified BubbleV2 message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.BubbleV2.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.BubbleV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.IBubbleV2} message BubbleV2 message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        BubbleV2.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a BubbleV2 message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.BubbleV2
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.BubbleV2} BubbleV2
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        BubbleV2.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.BubbleV2();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.text = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.url = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.bubbleType = reader.int32();
                                        break;
                                    }
                                case 4: {
                                        message.exposureOnce = reader.bool();
                                        break;
                                    }
                                case 5: {
                                        message.exposureType = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a BubbleV2 message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.BubbleV2
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.BubbleV2} BubbleV2
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        BubbleV2.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a BubbleV2 message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.BubbleV2
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        BubbleV2.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.text != null && message.hasOwnProperty("text"))
                                if (!$util.isString(message.text))
                                    return "text: string expected";
                            if (message.url != null && message.hasOwnProperty("url"))
                                if (!$util.isString(message.url))
                                    return "url: string expected";
                            if (message.bubbleType != null && message.hasOwnProperty("bubbleType"))
                                switch (message.bubbleType) {
                                default:
                                    return "bubbleType: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.exposureOnce != null && message.hasOwnProperty("exposureOnce"))
                                if (typeof message.exposureOnce !== "boolean")
                                    return "exposureOnce: boolean expected";
                            if (message.exposureType != null && message.hasOwnProperty("exposureType"))
                                switch (message.exposureType) {
                                default:
                                    return "exposureType: enum value expected";
                                case 0:
                                case 1:
                                    break;
                                }
                            return null;
                        };

                        /**
                         * Creates a BubbleV2 message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.BubbleV2
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.BubbleV2} BubbleV2
                         */
                        BubbleV2.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.BubbleV2)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.BubbleV2();
                            if (object.text != null)
                                message.text = String(object.text);
                            if (object.url != null)
                                message.url = String(object.url);
                            switch (object.bubbleType) {
                            default:
                                if (typeof object.bubbleType === "number") {
                                    message.bubbleType = object.bubbleType;
                                    break;
                                }
                                break;
                            case "BubbleTypeNone":
                            case 0:
                                message.bubbleType = 0;
                                break;
                            case "BubbleTypeClickButton":
                            case 1:
                                message.bubbleType = 1;
                                break;
                            case "BubbleTypeDmSettingPanel":
                            case 2:
                                message.bubbleType = 2;
                                break;
                            }
                            if (object.exposureOnce != null)
                                message.exposureOnce = Boolean(object.exposureOnce);
                            switch (object.exposureType) {
                            default:
                                if (typeof object.exposureType === "number") {
                                    message.exposureType = object.exposureType;
                                    break;
                                }
                                break;
                            case "ExposureTypeNone":
                            case 0:
                                message.exposureType = 0;
                                break;
                            case "ExposureTypeDMSend":
                            case 1:
                                message.exposureType = 1;
                                break;
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a BubbleV2 message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.BubbleV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.BubbleV2} message BubbleV2
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        BubbleV2.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.text = "";
                                object.url = "";
                                object.bubbleType = options.enums === String ? "BubbleTypeNone" : 0;
                                object.exposureOnce = false;
                                object.exposureType = options.enums === String ? "ExposureTypeNone" : 0;
                            }
                            if (message.text != null && message.hasOwnProperty("text"))
                                object.text = message.text;
                            if (message.url != null && message.hasOwnProperty("url"))
                                object.url = message.url;
                            if (message.bubbleType != null && message.hasOwnProperty("bubbleType"))
                                object.bubbleType = options.enums === String ? $root.bilibili.community.service.dm.v1.BubbleType[message.bubbleType] === undefined ? message.bubbleType : $root.bilibili.community.service.dm.v1.BubbleType[message.bubbleType] : message.bubbleType;
                            if (message.exposureOnce != null && message.hasOwnProperty("exposureOnce"))
                                object.exposureOnce = message.exposureOnce;
                            if (message.exposureType != null && message.hasOwnProperty("exposureType"))
                                object.exposureType = options.enums === String ? $root.bilibili.community.service.dm.v1.ExposureType[message.exposureType] === undefined ? message.exposureType : $root.bilibili.community.service.dm.v1.ExposureType[message.exposureType] : message.exposureType;
                            return object;
                        };

                        /**
                         * Converts this BubbleV2 to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.BubbleV2
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        BubbleV2.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for BubbleV2
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.BubbleV2
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        BubbleV2.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.BubbleV2";
                        };

                        return BubbleV2;
                    })();

                    v1.Button = (function() {

                        /**
                         * Properties of a Button.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IButton
                         * @property {string|null} [text] Button text
                         * @property {number|null} [action] Button action
                         */

                        /**
                         * Constructs a new Button.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a Button.
                         * @implements IButton
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IButton=} [properties] Properties to set
                         */
                        function Button(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Button text.
                         * @member {string} text
                         * @memberof bilibili.community.service.dm.v1.Button
                         * @instance
                         */
                        Button.prototype.text = "";

                        /**
                         * Button action.
                         * @member {number} action
                         * @memberof bilibili.community.service.dm.v1.Button
                         * @instance
                         */
                        Button.prototype.action = 0;

                        /**
                         * Creates a new Button instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.Button
                         * @static
                         * @param {bilibili.community.service.dm.v1.IButton=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.Button} Button instance
                         */
                        Button.create = function create(properties) {
                            return new Button(properties);
                        };

                        /**
                         * Encodes the specified Button message. Does not implicitly {@link bilibili.community.service.dm.v1.Button.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.Button
                         * @static
                         * @param {bilibili.community.service.dm.v1.IButton} message Button message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Button.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);
                            if (message.action != null && Object.hasOwnProperty.call(message, "action"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.action);
                            return writer;
                        };

                        /**
                         * Encodes the specified Button message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.Button.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.Button
                         * @static
                         * @param {bilibili.community.service.dm.v1.IButton} message Button message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Button.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Button message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.Button
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.Button} Button
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Button.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.Button();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.text = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.action = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Button message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.Button
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.Button} Button
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Button.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Button message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.Button
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Button.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.text != null && message.hasOwnProperty("text"))
                                if (!$util.isString(message.text))
                                    return "text: string expected";
                            if (message.action != null && message.hasOwnProperty("action"))
                                if (!$util.isInteger(message.action))
                                    return "action: integer expected";
                            return null;
                        };

                        /**
                         * Creates a Button message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.Button
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.Button} Button
                         */
                        Button.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.Button)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.Button();
                            if (object.text != null)
                                message.text = String(object.text);
                            if (object.action != null)
                                message.action = object.action | 0;
                            return message;
                        };

                        /**
                         * Creates a plain object from a Button message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.Button
                         * @static
                         * @param {bilibili.community.service.dm.v1.Button} message Button
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Button.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.text = "";
                                object.action = 0;
                            }
                            if (message.text != null && message.hasOwnProperty("text"))
                                object.text = message.text;
                            if (message.action != null && message.hasOwnProperty("action"))
                                object.action = message.action;
                            return object;
                        };

                        /**
                         * Converts this Button to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.Button
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Button.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for Button
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.Button
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Button.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.Button";
                        };

                        return Button;
                    })();

                    v1.BuzzwordConfig = (function() {

                        /**
                         * Properties of a BuzzwordConfig.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IBuzzwordConfig
                         * @property {Array.<bilibili.community.service.dm.v1.IBuzzwordShowConfig>|null} [keywords] BuzzwordConfig keywords
                         */

                        /**
                         * Constructs a new BuzzwordConfig.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a BuzzwordConfig.
                         * @implements IBuzzwordConfig
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IBuzzwordConfig=} [properties] Properties to set
                         */
                        function BuzzwordConfig(properties) {
                            this.keywords = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * BuzzwordConfig keywords.
                         * @member {Array.<bilibili.community.service.dm.v1.IBuzzwordShowConfig>} keywords
                         * @memberof bilibili.community.service.dm.v1.BuzzwordConfig
                         * @instance
                         */
                        BuzzwordConfig.prototype.keywords = $util.emptyArray;

                        /**
                         * Creates a new BuzzwordConfig instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.BuzzwordConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.IBuzzwordConfig=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.BuzzwordConfig} BuzzwordConfig instance
                         */
                        BuzzwordConfig.create = function create(properties) {
                            return new BuzzwordConfig(properties);
                        };

                        /**
                         * Encodes the specified BuzzwordConfig message. Does not implicitly {@link bilibili.community.service.dm.v1.BuzzwordConfig.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.BuzzwordConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.IBuzzwordConfig} message BuzzwordConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        BuzzwordConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.keywords != null && message.keywords.length)
                                for (let i = 0; i < message.keywords.length; ++i)
                                    $root.bilibili.community.service.dm.v1.BuzzwordShowConfig.encode(message.keywords[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified BuzzwordConfig message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.BuzzwordConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.BuzzwordConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.IBuzzwordConfig} message BuzzwordConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        BuzzwordConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a BuzzwordConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.BuzzwordConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.BuzzwordConfig} BuzzwordConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        BuzzwordConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.BuzzwordConfig();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.keywords && message.keywords.length))
                                            message.keywords = [];
                                        message.keywords.push($root.bilibili.community.service.dm.v1.BuzzwordShowConfig.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a BuzzwordConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.BuzzwordConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.BuzzwordConfig} BuzzwordConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        BuzzwordConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a BuzzwordConfig message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.BuzzwordConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        BuzzwordConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.keywords != null && message.hasOwnProperty("keywords")) {
                                if (!Array.isArray(message.keywords))
                                    return "keywords: array expected";
                                for (let i = 0; i < message.keywords.length; ++i) {
                                    let error = $root.bilibili.community.service.dm.v1.BuzzwordShowConfig.verify(message.keywords[i]);
                                    if (error)
                                        return "keywords." + error;
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates a BuzzwordConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.BuzzwordConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.BuzzwordConfig} BuzzwordConfig
                         */
                        BuzzwordConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.BuzzwordConfig)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.BuzzwordConfig();
                            if (object.keywords) {
                                if (!Array.isArray(object.keywords))
                                    throw TypeError(".bilibili.community.service.dm.v1.BuzzwordConfig.keywords: array expected");
                                message.keywords = [];
                                for (let i = 0; i < object.keywords.length; ++i) {
                                    if (typeof object.keywords[i] !== "object")
                                        throw TypeError(".bilibili.community.service.dm.v1.BuzzwordConfig.keywords: object expected");
                                    message.keywords[i] = $root.bilibili.community.service.dm.v1.BuzzwordShowConfig.fromObject(object.keywords[i]);
                                }
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a BuzzwordConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.BuzzwordConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.BuzzwordConfig} message BuzzwordConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        BuzzwordConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults)
                                object.keywords = [];
                            if (message.keywords && message.keywords.length) {
                                object.keywords = [];
                                for (let j = 0; j < message.keywords.length; ++j)
                                    object.keywords[j] = $root.bilibili.community.service.dm.v1.BuzzwordShowConfig.toObject(message.keywords[j], options);
                            }
                            return object;
                        };

                        /**
                         * Converts this BuzzwordConfig to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.BuzzwordConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        BuzzwordConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for BuzzwordConfig
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.BuzzwordConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        BuzzwordConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.BuzzwordConfig";
                        };

                        return BuzzwordConfig;
                    })();

                    v1.BuzzwordShowConfig = (function() {

                        /**
                         * Properties of a BuzzwordShowConfig.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IBuzzwordShowConfig
                         * @property {string|null} [name] BuzzwordShowConfig name
                         * @property {string|null} [schema] BuzzwordShowConfig schema
                         * @property {number|null} [source] BuzzwordShowConfig source
                         * @property {number|Long|null} [id] BuzzwordShowConfig id
                         * @property {number|Long|null} [buzzwordId] BuzzwordShowConfig buzzwordId
                         * @property {number|null} [schemaType] BuzzwordShowConfig schemaType
                         */

                        /**
                         * Constructs a new BuzzwordShowConfig.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a BuzzwordShowConfig.
                         * @implements IBuzzwordShowConfig
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IBuzzwordShowConfig=} [properties] Properties to set
                         */
                        function BuzzwordShowConfig(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * BuzzwordShowConfig name.
                         * @member {string} name
                         * @memberof bilibili.community.service.dm.v1.BuzzwordShowConfig
                         * @instance
                         */
                        BuzzwordShowConfig.prototype.name = "";

                        /**
                         * BuzzwordShowConfig schema.
                         * @member {string} schema
                         * @memberof bilibili.community.service.dm.v1.BuzzwordShowConfig
                         * @instance
                         */
                        BuzzwordShowConfig.prototype.schema = "";

                        /**
                         * BuzzwordShowConfig source.
                         * @member {number} source
                         * @memberof bilibili.community.service.dm.v1.BuzzwordShowConfig
                         * @instance
                         */
                        BuzzwordShowConfig.prototype.source = 0;

                        /**
                         * BuzzwordShowConfig id.
                         * @member {number|Long} id
                         * @memberof bilibili.community.service.dm.v1.BuzzwordShowConfig
                         * @instance
                         */
                        BuzzwordShowConfig.prototype.id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * BuzzwordShowConfig buzzwordId.
                         * @member {number|Long} buzzwordId
                         * @memberof bilibili.community.service.dm.v1.BuzzwordShowConfig
                         * @instance
                         */
                        BuzzwordShowConfig.prototype.buzzwordId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * BuzzwordShowConfig schemaType.
                         * @member {number} schemaType
                         * @memberof bilibili.community.service.dm.v1.BuzzwordShowConfig
                         * @instance
                         */
                        BuzzwordShowConfig.prototype.schemaType = 0;

                        /**
                         * Creates a new BuzzwordShowConfig instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.BuzzwordShowConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.IBuzzwordShowConfig=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.BuzzwordShowConfig} BuzzwordShowConfig instance
                         */
                        BuzzwordShowConfig.create = function create(properties) {
                            return new BuzzwordShowConfig(properties);
                        };

                        /**
                         * Encodes the specified BuzzwordShowConfig message. Does not implicitly {@link bilibili.community.service.dm.v1.BuzzwordShowConfig.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.BuzzwordShowConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.IBuzzwordShowConfig} message BuzzwordShowConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        BuzzwordShowConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                            if (message.schema != null && Object.hasOwnProperty.call(message, "schema"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.schema);
                            if (message.source != null && Object.hasOwnProperty.call(message, "source"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.source);
                            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.id);
                            if (message.buzzwordId != null && Object.hasOwnProperty.call(message, "buzzwordId"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.buzzwordId);
                            if (message.schemaType != null && Object.hasOwnProperty.call(message, "schemaType"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.schemaType);
                            return writer;
                        };

                        /**
                         * Encodes the specified BuzzwordShowConfig message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.BuzzwordShowConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.BuzzwordShowConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.IBuzzwordShowConfig} message BuzzwordShowConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        BuzzwordShowConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a BuzzwordShowConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.BuzzwordShowConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.BuzzwordShowConfig} BuzzwordShowConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        BuzzwordShowConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.BuzzwordShowConfig();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.schema = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.source = reader.int32();
                                        break;
                                    }
                                case 4: {
                                        message.id = reader.int64();
                                        break;
                                    }
                                case 5: {
                                        message.buzzwordId = reader.int64();
                                        break;
                                    }
                                case 6: {
                                        message.schemaType = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a BuzzwordShowConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.BuzzwordShowConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.BuzzwordShowConfig} BuzzwordShowConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        BuzzwordShowConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a BuzzwordShowConfig message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.BuzzwordShowConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        BuzzwordShowConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.schema != null && message.hasOwnProperty("schema"))
                                if (!$util.isString(message.schema))
                                    return "schema: string expected";
                            if (message.source != null && message.hasOwnProperty("source"))
                                if (!$util.isInteger(message.source))
                                    return "source: integer expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                                    return "id: integer|Long expected";
                            if (message.buzzwordId != null && message.hasOwnProperty("buzzwordId"))
                                if (!$util.isInteger(message.buzzwordId) && !(message.buzzwordId && $util.isInteger(message.buzzwordId.low) && $util.isInteger(message.buzzwordId.high)))
                                    return "buzzwordId: integer|Long expected";
                            if (message.schemaType != null && message.hasOwnProperty("schemaType"))
                                if (!$util.isInteger(message.schemaType))
                                    return "schemaType: integer expected";
                            return null;
                        };

                        /**
                         * Creates a BuzzwordShowConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.BuzzwordShowConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.BuzzwordShowConfig} BuzzwordShowConfig
                         */
                        BuzzwordShowConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.BuzzwordShowConfig)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.BuzzwordShowConfig();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.schema != null)
                                message.schema = String(object.schema);
                            if (object.source != null)
                                message.source = object.source | 0;
                            if (object.id != null)
                                if ($util.Long)
                                    (message.id = $util.Long.fromValue(object.id)).unsigned = false;
                                else if (typeof object.id === "string")
                                    message.id = parseInt(object.id, 10);
                                else if (typeof object.id === "number")
                                    message.id = object.id;
                                else if (typeof object.id === "object")
                                    message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber();
                            if (object.buzzwordId != null)
                                if ($util.Long)
                                    (message.buzzwordId = $util.Long.fromValue(object.buzzwordId)).unsigned = false;
                                else if (typeof object.buzzwordId === "string")
                                    message.buzzwordId = parseInt(object.buzzwordId, 10);
                                else if (typeof object.buzzwordId === "number")
                                    message.buzzwordId = object.buzzwordId;
                                else if (typeof object.buzzwordId === "object")
                                    message.buzzwordId = new $util.LongBits(object.buzzwordId.low >>> 0, object.buzzwordId.high >>> 0).toNumber();
                            if (object.schemaType != null)
                                message.schemaType = object.schemaType | 0;
                            return message;
                        };

                        /**
                         * Creates a plain object from a BuzzwordShowConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.BuzzwordShowConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.BuzzwordShowConfig} message BuzzwordShowConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        BuzzwordShowConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.name = "";
                                object.schema = "";
                                object.source = 0;
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.id = options.longs === String ? "0" : 0;
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.buzzwordId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.buzzwordId = options.longs === String ? "0" : 0;
                                object.schemaType = 0;
                            }
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.schema != null && message.hasOwnProperty("schema"))
                                object.schema = message.schema;
                            if (message.source != null && message.hasOwnProperty("source"))
                                object.source = message.source;
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (typeof message.id === "number")
                                    object.id = options.longs === String ? String(message.id) : message.id;
                                else
                                    object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id;
                            if (message.buzzwordId != null && message.hasOwnProperty("buzzwordId"))
                                if (typeof message.buzzwordId === "number")
                                    object.buzzwordId = options.longs === String ? String(message.buzzwordId) : message.buzzwordId;
                                else
                                    object.buzzwordId = options.longs === String ? $util.Long.prototype.toString.call(message.buzzwordId) : options.longs === Number ? new $util.LongBits(message.buzzwordId.low >>> 0, message.buzzwordId.high >>> 0).toNumber() : message.buzzwordId;
                            if (message.schemaType != null && message.hasOwnProperty("schemaType"))
                                object.schemaType = message.schemaType;
                            return object;
                        };

                        /**
                         * Converts this BuzzwordShowConfig to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.BuzzwordShowConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        BuzzwordShowConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for BuzzwordShowConfig
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.BuzzwordShowConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        BuzzwordShowConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.BuzzwordShowConfig";
                        };

                        return BuzzwordShowConfig;
                    })();

                    v1.CheckBox = (function() {

                        /**
                         * Properties of a CheckBox.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface ICheckBox
                         * @property {string|null} [text] CheckBox text
                         * @property {bilibili.community.service.dm.v1.CheckboxType|null} [type] CheckBox type
                         * @property {boolean|null} [defaultValue] CheckBox defaultValue
                         * @property {boolean|null} [show] CheckBox show
                         */

                        /**
                         * Constructs a new CheckBox.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a CheckBox.
                         * @implements ICheckBox
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.ICheckBox=} [properties] Properties to set
                         */
                        function CheckBox(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * CheckBox text.
                         * @member {string} text
                         * @memberof bilibili.community.service.dm.v1.CheckBox
                         * @instance
                         */
                        CheckBox.prototype.text = "";

                        /**
                         * CheckBox type.
                         * @member {bilibili.community.service.dm.v1.CheckboxType} type
                         * @memberof bilibili.community.service.dm.v1.CheckBox
                         * @instance
                         */
                        CheckBox.prototype.type = 0;

                        /**
                         * CheckBox defaultValue.
                         * @member {boolean} defaultValue
                         * @memberof bilibili.community.service.dm.v1.CheckBox
                         * @instance
                         */
                        CheckBox.prototype.defaultValue = false;

                        /**
                         * CheckBox show.
                         * @member {boolean} show
                         * @memberof bilibili.community.service.dm.v1.CheckBox
                         * @instance
                         */
                        CheckBox.prototype.show = false;

                        /**
                         * Creates a new CheckBox instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.CheckBox
                         * @static
                         * @param {bilibili.community.service.dm.v1.ICheckBox=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.CheckBox} CheckBox instance
                         */
                        CheckBox.create = function create(properties) {
                            return new CheckBox(properties);
                        };

                        /**
                         * Encodes the specified CheckBox message. Does not implicitly {@link bilibili.community.service.dm.v1.CheckBox.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.CheckBox
                         * @static
                         * @param {bilibili.community.service.dm.v1.ICheckBox} message CheckBox message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CheckBox.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);
                            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
                            if (message.defaultValue != null && Object.hasOwnProperty.call(message, "defaultValue"))
                                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.defaultValue);
                            if (message.show != null && Object.hasOwnProperty.call(message, "show"))
                                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.show);
                            return writer;
                        };

                        /**
                         * Encodes the specified CheckBox message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.CheckBox.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.CheckBox
                         * @static
                         * @param {bilibili.community.service.dm.v1.ICheckBox} message CheckBox message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CheckBox.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a CheckBox message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.CheckBox
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.CheckBox} CheckBox
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CheckBox.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.CheckBox();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.text = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.type = reader.int32();
                                        break;
                                    }
                                case 3: {
                                        message.defaultValue = reader.bool();
                                        break;
                                    }
                                case 4: {
                                        message.show = reader.bool();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a CheckBox message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.CheckBox
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.CheckBox} CheckBox
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CheckBox.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a CheckBox message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.CheckBox
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CheckBox.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.text != null && message.hasOwnProperty("text"))
                                if (!$util.isString(message.text))
                                    return "text: string expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                switch (message.type) {
                                default:
                                    return "type: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                                if (typeof message.defaultValue !== "boolean")
                                    return "defaultValue: boolean expected";
                            if (message.show != null && message.hasOwnProperty("show"))
                                if (typeof message.show !== "boolean")
                                    return "show: boolean expected";
                            return null;
                        };

                        /**
                         * Creates a CheckBox message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.CheckBox
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.CheckBox} CheckBox
                         */
                        CheckBox.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.CheckBox)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.CheckBox();
                            if (object.text != null)
                                message.text = String(object.text);
                            switch (object.type) {
                            default:
                                if (typeof object.type === "number") {
                                    message.type = object.type;
                                    break;
                                }
                                break;
                            case "CheckboxTypeNone":
                            case 0:
                                message.type = 0;
                                break;
                            case "CheckboxTypeEncourage":
                            case 1:
                                message.type = 1;
                                break;
                            case "CheckboxTypeColorDM":
                            case 2:
                                message.type = 2;
                                break;
                            }
                            if (object.defaultValue != null)
                                message.defaultValue = Boolean(object.defaultValue);
                            if (object.show != null)
                                message.show = Boolean(object.show);
                            return message;
                        };

                        /**
                         * Creates a plain object from a CheckBox message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.CheckBox
                         * @static
                         * @param {bilibili.community.service.dm.v1.CheckBox} message CheckBox
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CheckBox.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.text = "";
                                object.type = options.enums === String ? "CheckboxTypeNone" : 0;
                                object.defaultValue = false;
                                object.show = false;
                            }
                            if (message.text != null && message.hasOwnProperty("text"))
                                object.text = message.text;
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = options.enums === String ? $root.bilibili.community.service.dm.v1.CheckboxType[message.type] === undefined ? message.type : $root.bilibili.community.service.dm.v1.CheckboxType[message.type] : message.type;
                            if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                                object.defaultValue = message.defaultValue;
                            if (message.show != null && message.hasOwnProperty("show"))
                                object.show = message.show;
                            return object;
                        };

                        /**
                         * Converts this CheckBox to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.CheckBox
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CheckBox.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for CheckBox
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.CheckBox
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        CheckBox.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.CheckBox";
                        };

                        return CheckBox;
                    })();

                    /**
                     * CheckboxType enum.
                     * @name bilibili.community.service.dm.v1.CheckboxType
                     * @enum {number}
                     * @property {number} CheckboxTypeNone=0 CheckboxTypeNone value
                     * @property {number} CheckboxTypeEncourage=1 CheckboxTypeEncourage value
                     * @property {number} CheckboxTypeColorDM=2 CheckboxTypeColorDM value
                     */
                    v1.CheckboxType = (function() {
                        const valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "CheckboxTypeNone"] = 0;
                        values[valuesById[1] = "CheckboxTypeEncourage"] = 1;
                        values[valuesById[2] = "CheckboxTypeColorDM"] = 2;
                        return values;
                    })();

                    v1.CheckBoxV2 = (function() {

                        /**
                         * Properties of a CheckBoxV2.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface ICheckBoxV2
                         * @property {string|null} [text] CheckBoxV2 text
                         * @property {number|null} [type] CheckBoxV2 type
                         * @property {boolean|null} [defaultValue] CheckBoxV2 defaultValue
                         */

                        /**
                         * Constructs a new CheckBoxV2.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a CheckBoxV2.
                         * @implements ICheckBoxV2
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.ICheckBoxV2=} [properties] Properties to set
                         */
                        function CheckBoxV2(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * CheckBoxV2 text.
                         * @member {string} text
                         * @memberof bilibili.community.service.dm.v1.CheckBoxV2
                         * @instance
                         */
                        CheckBoxV2.prototype.text = "";

                        /**
                         * CheckBoxV2 type.
                         * @member {number} type
                         * @memberof bilibili.community.service.dm.v1.CheckBoxV2
                         * @instance
                         */
                        CheckBoxV2.prototype.type = 0;

                        /**
                         * CheckBoxV2 defaultValue.
                         * @member {boolean} defaultValue
                         * @memberof bilibili.community.service.dm.v1.CheckBoxV2
                         * @instance
                         */
                        CheckBoxV2.prototype.defaultValue = false;

                        /**
                         * Creates a new CheckBoxV2 instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.CheckBoxV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.ICheckBoxV2=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.CheckBoxV2} CheckBoxV2 instance
                         */
                        CheckBoxV2.create = function create(properties) {
                            return new CheckBoxV2(properties);
                        };

                        /**
                         * Encodes the specified CheckBoxV2 message. Does not implicitly {@link bilibili.community.service.dm.v1.CheckBoxV2.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.CheckBoxV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.ICheckBoxV2} message CheckBoxV2 message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CheckBoxV2.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);
                            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
                            if (message.defaultValue != null && Object.hasOwnProperty.call(message, "defaultValue"))
                                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.defaultValue);
                            return writer;
                        };

                        /**
                         * Encodes the specified CheckBoxV2 message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.CheckBoxV2.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.CheckBoxV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.ICheckBoxV2} message CheckBoxV2 message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CheckBoxV2.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a CheckBoxV2 message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.CheckBoxV2
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.CheckBoxV2} CheckBoxV2
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CheckBoxV2.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.CheckBoxV2();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.text = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.type = reader.int32();
                                        break;
                                    }
                                case 3: {
                                        message.defaultValue = reader.bool();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a CheckBoxV2 message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.CheckBoxV2
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.CheckBoxV2} CheckBoxV2
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CheckBoxV2.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a CheckBoxV2 message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.CheckBoxV2
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CheckBoxV2.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.text != null && message.hasOwnProperty("text"))
                                if (!$util.isString(message.text))
                                    return "text: string expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                if (!$util.isInteger(message.type))
                                    return "type: integer expected";
                            if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                                if (typeof message.defaultValue !== "boolean")
                                    return "defaultValue: boolean expected";
                            return null;
                        };

                        /**
                         * Creates a CheckBoxV2 message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.CheckBoxV2
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.CheckBoxV2} CheckBoxV2
                         */
                        CheckBoxV2.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.CheckBoxV2)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.CheckBoxV2();
                            if (object.text != null)
                                message.text = String(object.text);
                            if (object.type != null)
                                message.type = object.type | 0;
                            if (object.defaultValue != null)
                                message.defaultValue = Boolean(object.defaultValue);
                            return message;
                        };

                        /**
                         * Creates a plain object from a CheckBoxV2 message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.CheckBoxV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.CheckBoxV2} message CheckBoxV2
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CheckBoxV2.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.text = "";
                                object.type = 0;
                                object.defaultValue = false;
                            }
                            if (message.text != null && message.hasOwnProperty("text"))
                                object.text = message.text;
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = message.type;
                            if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                                object.defaultValue = message.defaultValue;
                            return object;
                        };

                        /**
                         * Converts this CheckBoxV2 to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.CheckBoxV2
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CheckBoxV2.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for CheckBoxV2
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.CheckBoxV2
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        CheckBoxV2.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.CheckBoxV2";
                        };

                        return CheckBoxV2;
                    })();

                    v1.ClickButton = (function() {

                        /**
                         * Properties of a ClickButton.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IClickButton
                         * @property {Array.<string>|null} [portraitText] ClickButton portraitText
                         * @property {Array.<string>|null} [landscapeText] ClickButton landscapeText
                         * @property {Array.<string>|null} [portraitTextFocus] ClickButton portraitTextFocus
                         * @property {Array.<string>|null} [landscapeTextFocus] ClickButton landscapeTextFocus
                         * @property {bilibili.community.service.dm.v1.RenderType|null} [renderType] ClickButton renderType
                         * @property {boolean|null} [show] ClickButton show
                         * @property {bilibili.community.service.dm.v1.IBubble|null} [bubble] ClickButton bubble
                         */

                        /**
                         * Constructs a new ClickButton.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a ClickButton.
                         * @implements IClickButton
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IClickButton=} [properties] Properties to set
                         */
                        function ClickButton(properties) {
                            this.portraitText = [];
                            this.landscapeText = [];
                            this.portraitTextFocus = [];
                            this.landscapeTextFocus = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * ClickButton portraitText.
                         * @member {Array.<string>} portraitText
                         * @memberof bilibili.community.service.dm.v1.ClickButton
                         * @instance
                         */
                        ClickButton.prototype.portraitText = $util.emptyArray;

                        /**
                         * ClickButton landscapeText.
                         * @member {Array.<string>} landscapeText
                         * @memberof bilibili.community.service.dm.v1.ClickButton
                         * @instance
                         */
                        ClickButton.prototype.landscapeText = $util.emptyArray;

                        /**
                         * ClickButton portraitTextFocus.
                         * @member {Array.<string>} portraitTextFocus
                         * @memberof bilibili.community.service.dm.v1.ClickButton
                         * @instance
                         */
                        ClickButton.prototype.portraitTextFocus = $util.emptyArray;

                        /**
                         * ClickButton landscapeTextFocus.
                         * @member {Array.<string>} landscapeTextFocus
                         * @memberof bilibili.community.service.dm.v1.ClickButton
                         * @instance
                         */
                        ClickButton.prototype.landscapeTextFocus = $util.emptyArray;

                        /**
                         * ClickButton renderType.
                         * @member {bilibili.community.service.dm.v1.RenderType} renderType
                         * @memberof bilibili.community.service.dm.v1.ClickButton
                         * @instance
                         */
                        ClickButton.prototype.renderType = 0;

                        /**
                         * ClickButton show.
                         * @member {boolean} show
                         * @memberof bilibili.community.service.dm.v1.ClickButton
                         * @instance
                         */
                        ClickButton.prototype.show = false;

                        /**
                         * ClickButton bubble.
                         * @member {bilibili.community.service.dm.v1.IBubble|null|undefined} bubble
                         * @memberof bilibili.community.service.dm.v1.ClickButton
                         * @instance
                         */
                        ClickButton.prototype.bubble = null;

                        /**
                         * Creates a new ClickButton instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.ClickButton
                         * @static
                         * @param {bilibili.community.service.dm.v1.IClickButton=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.ClickButton} ClickButton instance
                         */
                        ClickButton.create = function create(properties) {
                            return new ClickButton(properties);
                        };

                        /**
                         * Encodes the specified ClickButton message. Does not implicitly {@link bilibili.community.service.dm.v1.ClickButton.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.ClickButton
                         * @static
                         * @param {bilibili.community.service.dm.v1.IClickButton} message ClickButton message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ClickButton.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.portraitText != null && message.portraitText.length)
                                for (let i = 0; i < message.portraitText.length; ++i)
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.portraitText[i]);
                            if (message.landscapeText != null && message.landscapeText.length)
                                for (let i = 0; i < message.landscapeText.length; ++i)
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.landscapeText[i]);
                            if (message.portraitTextFocus != null && message.portraitTextFocus.length)
                                for (let i = 0; i < message.portraitTextFocus.length; ++i)
                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.portraitTextFocus[i]);
                            if (message.landscapeTextFocus != null && message.landscapeTextFocus.length)
                                for (let i = 0; i < message.landscapeTextFocus.length; ++i)
                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.landscapeTextFocus[i]);
                            if (message.renderType != null && Object.hasOwnProperty.call(message, "renderType"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.renderType);
                            if (message.show != null && Object.hasOwnProperty.call(message, "show"))
                                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.show);
                            if (message.bubble != null && Object.hasOwnProperty.call(message, "bubble"))
                                $root.bilibili.community.service.dm.v1.Bubble.encode(message.bubble, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified ClickButton message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.ClickButton.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.ClickButton
                         * @static
                         * @param {bilibili.community.service.dm.v1.IClickButton} message ClickButton message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ClickButton.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a ClickButton message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.ClickButton
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.ClickButton} ClickButton
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ClickButton.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.ClickButton();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.portraitText && message.portraitText.length))
                                            message.portraitText = [];
                                        message.portraitText.push(reader.string());
                                        break;
                                    }
                                case 2: {
                                        if (!(message.landscapeText && message.landscapeText.length))
                                            message.landscapeText = [];
                                        message.landscapeText.push(reader.string());
                                        break;
                                    }
                                case 3: {
                                        if (!(message.portraitTextFocus && message.portraitTextFocus.length))
                                            message.portraitTextFocus = [];
                                        message.portraitTextFocus.push(reader.string());
                                        break;
                                    }
                                case 4: {
                                        if (!(message.landscapeTextFocus && message.landscapeTextFocus.length))
                                            message.landscapeTextFocus = [];
                                        message.landscapeTextFocus.push(reader.string());
                                        break;
                                    }
                                case 5: {
                                        message.renderType = reader.int32();
                                        break;
                                    }
                                case 6: {
                                        message.show = reader.bool();
                                        break;
                                    }
                                case 7: {
                                        message.bubble = $root.bilibili.community.service.dm.v1.Bubble.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a ClickButton message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.ClickButton
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.ClickButton} ClickButton
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ClickButton.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a ClickButton message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.ClickButton
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ClickButton.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.portraitText != null && message.hasOwnProperty("portraitText")) {
                                if (!Array.isArray(message.portraitText))
                                    return "portraitText: array expected";
                                for (let i = 0; i < message.portraitText.length; ++i)
                                    if (!$util.isString(message.portraitText[i]))
                                        return "portraitText: string[] expected";
                            }
                            if (message.landscapeText != null && message.hasOwnProperty("landscapeText")) {
                                if (!Array.isArray(message.landscapeText))
                                    return "landscapeText: array expected";
                                for (let i = 0; i < message.landscapeText.length; ++i)
                                    if (!$util.isString(message.landscapeText[i]))
                                        return "landscapeText: string[] expected";
                            }
                            if (message.portraitTextFocus != null && message.hasOwnProperty("portraitTextFocus")) {
                                if (!Array.isArray(message.portraitTextFocus))
                                    return "portraitTextFocus: array expected";
                                for (let i = 0; i < message.portraitTextFocus.length; ++i)
                                    if (!$util.isString(message.portraitTextFocus[i]))
                                        return "portraitTextFocus: string[] expected";
                            }
                            if (message.landscapeTextFocus != null && message.hasOwnProperty("landscapeTextFocus")) {
                                if (!Array.isArray(message.landscapeTextFocus))
                                    return "landscapeTextFocus: array expected";
                                for (let i = 0; i < message.landscapeTextFocus.length; ++i)
                                    if (!$util.isString(message.landscapeTextFocus[i]))
                                        return "landscapeTextFocus: string[] expected";
                            }
                            if (message.renderType != null && message.hasOwnProperty("renderType"))
                                switch (message.renderType) {
                                default:
                                    return "renderType: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.show != null && message.hasOwnProperty("show"))
                                if (typeof message.show !== "boolean")
                                    return "show: boolean expected";
                            if (message.bubble != null && message.hasOwnProperty("bubble")) {
                                let error = $root.bilibili.community.service.dm.v1.Bubble.verify(message.bubble);
                                if (error)
                                    return "bubble." + error;
                            }
                            return null;
                        };

                        /**
                         * Creates a ClickButton message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.ClickButton
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.ClickButton} ClickButton
                         */
                        ClickButton.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.ClickButton)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.ClickButton();
                            if (object.portraitText) {
                                if (!Array.isArray(object.portraitText))
                                    throw TypeError(".bilibili.community.service.dm.v1.ClickButton.portraitText: array expected");
                                message.portraitText = [];
                                for (let i = 0; i < object.portraitText.length; ++i)
                                    message.portraitText[i] = String(object.portraitText[i]);
                            }
                            if (object.landscapeText) {
                                if (!Array.isArray(object.landscapeText))
                                    throw TypeError(".bilibili.community.service.dm.v1.ClickButton.landscapeText: array expected");
                                message.landscapeText = [];
                                for (let i = 0; i < object.landscapeText.length; ++i)
                                    message.landscapeText[i] = String(object.landscapeText[i]);
                            }
                            if (object.portraitTextFocus) {
                                if (!Array.isArray(object.portraitTextFocus))
                                    throw TypeError(".bilibili.community.service.dm.v1.ClickButton.portraitTextFocus: array expected");
                                message.portraitTextFocus = [];
                                for (let i = 0; i < object.portraitTextFocus.length; ++i)
                                    message.portraitTextFocus[i] = String(object.portraitTextFocus[i]);
                            }
                            if (object.landscapeTextFocus) {
                                if (!Array.isArray(object.landscapeTextFocus))
                                    throw TypeError(".bilibili.community.service.dm.v1.ClickButton.landscapeTextFocus: array expected");
                                message.landscapeTextFocus = [];
                                for (let i = 0; i < object.landscapeTextFocus.length; ++i)
                                    message.landscapeTextFocus[i] = String(object.landscapeTextFocus[i]);
                            }
                            switch (object.renderType) {
                            default:
                                if (typeof object.renderType === "number") {
                                    message.renderType = object.renderType;
                                    break;
                                }
                                break;
                            case "RenderTypeNone":
                            case 0:
                                message.renderType = 0;
                                break;
                            case "RenderTypeSingle":
                            case 1:
                                message.renderType = 1;
                                break;
                            case "RenderTypeRotation":
                            case 2:
                                message.renderType = 2;
                                break;
                            }
                            if (object.show != null)
                                message.show = Boolean(object.show);
                            if (object.bubble != null) {
                                if (typeof object.bubble !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.ClickButton.bubble: object expected");
                                message.bubble = $root.bilibili.community.service.dm.v1.Bubble.fromObject(object.bubble);
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a ClickButton message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.ClickButton
                         * @static
                         * @param {bilibili.community.service.dm.v1.ClickButton} message ClickButton
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ClickButton.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults) {
                                object.portraitText = [];
                                object.landscapeText = [];
                                object.portraitTextFocus = [];
                                object.landscapeTextFocus = [];
                            }
                            if (options.defaults) {
                                object.renderType = options.enums === String ? "RenderTypeNone" : 0;
                                object.show = false;
                                object.bubble = null;
                            }
                            if (message.portraitText && message.portraitText.length) {
                                object.portraitText = [];
                                for (let j = 0; j < message.portraitText.length; ++j)
                                    object.portraitText[j] = message.portraitText[j];
                            }
                            if (message.landscapeText && message.landscapeText.length) {
                                object.landscapeText = [];
                                for (let j = 0; j < message.landscapeText.length; ++j)
                                    object.landscapeText[j] = message.landscapeText[j];
                            }
                            if (message.portraitTextFocus && message.portraitTextFocus.length) {
                                object.portraitTextFocus = [];
                                for (let j = 0; j < message.portraitTextFocus.length; ++j)
                                    object.portraitTextFocus[j] = message.portraitTextFocus[j];
                            }
                            if (message.landscapeTextFocus && message.landscapeTextFocus.length) {
                                object.landscapeTextFocus = [];
                                for (let j = 0; j < message.landscapeTextFocus.length; ++j)
                                    object.landscapeTextFocus[j] = message.landscapeTextFocus[j];
                            }
                            if (message.renderType != null && message.hasOwnProperty("renderType"))
                                object.renderType = options.enums === String ? $root.bilibili.community.service.dm.v1.RenderType[message.renderType] === undefined ? message.renderType : $root.bilibili.community.service.dm.v1.RenderType[message.renderType] : message.renderType;
                            if (message.show != null && message.hasOwnProperty("show"))
                                object.show = message.show;
                            if (message.bubble != null && message.hasOwnProperty("bubble"))
                                object.bubble = $root.bilibili.community.service.dm.v1.Bubble.toObject(message.bubble, options);
                            return object;
                        };

                        /**
                         * Converts this ClickButton to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.ClickButton
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ClickButton.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for ClickButton
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.ClickButton
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ClickButton.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.ClickButton";
                        };

                        return ClickButton;
                    })();

                    v1.ClickButtonV2 = (function() {

                        /**
                         * Properties of a ClickButtonV2.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IClickButtonV2
                         * @property {Array.<string>|null} [portraitText] ClickButtonV2 portraitText
                         * @property {Array.<string>|null} [landscapeText] ClickButtonV2 landscapeText
                         * @property {Array.<string>|null} [portraitTextFocus] ClickButtonV2 portraitTextFocus
                         * @property {Array.<string>|null} [landscapeTextFocus] ClickButtonV2 landscapeTextFocus
                         * @property {number|null} [renderType] ClickButtonV2 renderType
                         * @property {boolean|null} [textInputPost] ClickButtonV2 textInputPost
                         * @property {boolean|null} [exposureOnce] ClickButtonV2 exposureOnce
                         * @property {number|null} [exposureType] ClickButtonV2 exposureType
                         */

                        /**
                         * Constructs a new ClickButtonV2.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a ClickButtonV2.
                         * @implements IClickButtonV2
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IClickButtonV2=} [properties] Properties to set
                         */
                        function ClickButtonV2(properties) {
                            this.portraitText = [];
                            this.landscapeText = [];
                            this.portraitTextFocus = [];
                            this.landscapeTextFocus = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * ClickButtonV2 portraitText.
                         * @member {Array.<string>} portraitText
                         * @memberof bilibili.community.service.dm.v1.ClickButtonV2
                         * @instance
                         */
                        ClickButtonV2.prototype.portraitText = $util.emptyArray;

                        /**
                         * ClickButtonV2 landscapeText.
                         * @member {Array.<string>} landscapeText
                         * @memberof bilibili.community.service.dm.v1.ClickButtonV2
                         * @instance
                         */
                        ClickButtonV2.prototype.landscapeText = $util.emptyArray;

                        /**
                         * ClickButtonV2 portraitTextFocus.
                         * @member {Array.<string>} portraitTextFocus
                         * @memberof bilibili.community.service.dm.v1.ClickButtonV2
                         * @instance
                         */
                        ClickButtonV2.prototype.portraitTextFocus = $util.emptyArray;

                        /**
                         * ClickButtonV2 landscapeTextFocus.
                         * @member {Array.<string>} landscapeTextFocus
                         * @memberof bilibili.community.service.dm.v1.ClickButtonV2
                         * @instance
                         */
                        ClickButtonV2.prototype.landscapeTextFocus = $util.emptyArray;

                        /**
                         * ClickButtonV2 renderType.
                         * @member {number} renderType
                         * @memberof bilibili.community.service.dm.v1.ClickButtonV2
                         * @instance
                         */
                        ClickButtonV2.prototype.renderType = 0;

                        /**
                         * ClickButtonV2 textInputPost.
                         * @member {boolean} textInputPost
                         * @memberof bilibili.community.service.dm.v1.ClickButtonV2
                         * @instance
                         */
                        ClickButtonV2.prototype.textInputPost = false;

                        /**
                         * ClickButtonV2 exposureOnce.
                         * @member {boolean} exposureOnce
                         * @memberof bilibili.community.service.dm.v1.ClickButtonV2
                         * @instance
                         */
                        ClickButtonV2.prototype.exposureOnce = false;

                        /**
                         * ClickButtonV2 exposureType.
                         * @member {number} exposureType
                         * @memberof bilibili.community.service.dm.v1.ClickButtonV2
                         * @instance
                         */
                        ClickButtonV2.prototype.exposureType = 0;

                        /**
                         * Creates a new ClickButtonV2 instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.ClickButtonV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.IClickButtonV2=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.ClickButtonV2} ClickButtonV2 instance
                         */
                        ClickButtonV2.create = function create(properties) {
                            return new ClickButtonV2(properties);
                        };

                        /**
                         * Encodes the specified ClickButtonV2 message. Does not implicitly {@link bilibili.community.service.dm.v1.ClickButtonV2.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.ClickButtonV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.IClickButtonV2} message ClickButtonV2 message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ClickButtonV2.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.portraitText != null && message.portraitText.length)
                                for (let i = 0; i < message.portraitText.length; ++i)
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.portraitText[i]);
                            if (message.landscapeText != null && message.landscapeText.length)
                                for (let i = 0; i < message.landscapeText.length; ++i)
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.landscapeText[i]);
                            if (message.portraitTextFocus != null && message.portraitTextFocus.length)
                                for (let i = 0; i < message.portraitTextFocus.length; ++i)
                                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.portraitTextFocus[i]);
                            if (message.landscapeTextFocus != null && message.landscapeTextFocus.length)
                                for (let i = 0; i < message.landscapeTextFocus.length; ++i)
                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.landscapeTextFocus[i]);
                            if (message.renderType != null && Object.hasOwnProperty.call(message, "renderType"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.renderType);
                            if (message.textInputPost != null && Object.hasOwnProperty.call(message, "textInputPost"))
                                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.textInputPost);
                            if (message.exposureOnce != null && Object.hasOwnProperty.call(message, "exposureOnce"))
                                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.exposureOnce);
                            if (message.exposureType != null && Object.hasOwnProperty.call(message, "exposureType"))
                                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.exposureType);
                            return writer;
                        };

                        /**
                         * Encodes the specified ClickButtonV2 message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.ClickButtonV2.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.ClickButtonV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.IClickButtonV2} message ClickButtonV2 message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ClickButtonV2.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a ClickButtonV2 message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.ClickButtonV2
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.ClickButtonV2} ClickButtonV2
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ClickButtonV2.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.ClickButtonV2();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.portraitText && message.portraitText.length))
                                            message.portraitText = [];
                                        message.portraitText.push(reader.string());
                                        break;
                                    }
                                case 2: {
                                        if (!(message.landscapeText && message.landscapeText.length))
                                            message.landscapeText = [];
                                        message.landscapeText.push(reader.string());
                                        break;
                                    }
                                case 3: {
                                        if (!(message.portraitTextFocus && message.portraitTextFocus.length))
                                            message.portraitTextFocus = [];
                                        message.portraitTextFocus.push(reader.string());
                                        break;
                                    }
                                case 4: {
                                        if (!(message.landscapeTextFocus && message.landscapeTextFocus.length))
                                            message.landscapeTextFocus = [];
                                        message.landscapeTextFocus.push(reader.string());
                                        break;
                                    }
                                case 5: {
                                        message.renderType = reader.int32();
                                        break;
                                    }
                                case 6: {
                                        message.textInputPost = reader.bool();
                                        break;
                                    }
                                case 7: {
                                        message.exposureOnce = reader.bool();
                                        break;
                                    }
                                case 8: {
                                        message.exposureType = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a ClickButtonV2 message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.ClickButtonV2
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.ClickButtonV2} ClickButtonV2
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ClickButtonV2.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a ClickButtonV2 message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.ClickButtonV2
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ClickButtonV2.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.portraitText != null && message.hasOwnProperty("portraitText")) {
                                if (!Array.isArray(message.portraitText))
                                    return "portraitText: array expected";
                                for (let i = 0; i < message.portraitText.length; ++i)
                                    if (!$util.isString(message.portraitText[i]))
                                        return "portraitText: string[] expected";
                            }
                            if (message.landscapeText != null && message.hasOwnProperty("landscapeText")) {
                                if (!Array.isArray(message.landscapeText))
                                    return "landscapeText: array expected";
                                for (let i = 0; i < message.landscapeText.length; ++i)
                                    if (!$util.isString(message.landscapeText[i]))
                                        return "landscapeText: string[] expected";
                            }
                            if (message.portraitTextFocus != null && message.hasOwnProperty("portraitTextFocus")) {
                                if (!Array.isArray(message.portraitTextFocus))
                                    return "portraitTextFocus: array expected";
                                for (let i = 0; i < message.portraitTextFocus.length; ++i)
                                    if (!$util.isString(message.portraitTextFocus[i]))
                                        return "portraitTextFocus: string[] expected";
                            }
                            if (message.landscapeTextFocus != null && message.hasOwnProperty("landscapeTextFocus")) {
                                if (!Array.isArray(message.landscapeTextFocus))
                                    return "landscapeTextFocus: array expected";
                                for (let i = 0; i < message.landscapeTextFocus.length; ++i)
                                    if (!$util.isString(message.landscapeTextFocus[i]))
                                        return "landscapeTextFocus: string[] expected";
                            }
                            if (message.renderType != null && message.hasOwnProperty("renderType"))
                                if (!$util.isInteger(message.renderType))
                                    return "renderType: integer expected";
                            if (message.textInputPost != null && message.hasOwnProperty("textInputPost"))
                                if (typeof message.textInputPost !== "boolean")
                                    return "textInputPost: boolean expected";
                            if (message.exposureOnce != null && message.hasOwnProperty("exposureOnce"))
                                if (typeof message.exposureOnce !== "boolean")
                                    return "exposureOnce: boolean expected";
                            if (message.exposureType != null && message.hasOwnProperty("exposureType"))
                                if (!$util.isInteger(message.exposureType))
                                    return "exposureType: integer expected";
                            return null;
                        };

                        /**
                         * Creates a ClickButtonV2 message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.ClickButtonV2
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.ClickButtonV2} ClickButtonV2
                         */
                        ClickButtonV2.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.ClickButtonV2)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.ClickButtonV2();
                            if (object.portraitText) {
                                if (!Array.isArray(object.portraitText))
                                    throw TypeError(".bilibili.community.service.dm.v1.ClickButtonV2.portraitText: array expected");
                                message.portraitText = [];
                                for (let i = 0; i < object.portraitText.length; ++i)
                                    message.portraitText[i] = String(object.portraitText[i]);
                            }
                            if (object.landscapeText) {
                                if (!Array.isArray(object.landscapeText))
                                    throw TypeError(".bilibili.community.service.dm.v1.ClickButtonV2.landscapeText: array expected");
                                message.landscapeText = [];
                                for (let i = 0; i < object.landscapeText.length; ++i)
                                    message.landscapeText[i] = String(object.landscapeText[i]);
                            }
                            if (object.portraitTextFocus) {
                                if (!Array.isArray(object.portraitTextFocus))
                                    throw TypeError(".bilibili.community.service.dm.v1.ClickButtonV2.portraitTextFocus: array expected");
                                message.portraitTextFocus = [];
                                for (let i = 0; i < object.portraitTextFocus.length; ++i)
                                    message.portraitTextFocus[i] = String(object.portraitTextFocus[i]);
                            }
                            if (object.landscapeTextFocus) {
                                if (!Array.isArray(object.landscapeTextFocus))
                                    throw TypeError(".bilibili.community.service.dm.v1.ClickButtonV2.landscapeTextFocus: array expected");
                                message.landscapeTextFocus = [];
                                for (let i = 0; i < object.landscapeTextFocus.length; ++i)
                                    message.landscapeTextFocus[i] = String(object.landscapeTextFocus[i]);
                            }
                            if (object.renderType != null)
                                message.renderType = object.renderType | 0;
                            if (object.textInputPost != null)
                                message.textInputPost = Boolean(object.textInputPost);
                            if (object.exposureOnce != null)
                                message.exposureOnce = Boolean(object.exposureOnce);
                            if (object.exposureType != null)
                                message.exposureType = object.exposureType | 0;
                            return message;
                        };

                        /**
                         * Creates a plain object from a ClickButtonV2 message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.ClickButtonV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.ClickButtonV2} message ClickButtonV2
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ClickButtonV2.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults) {
                                object.portraitText = [];
                                object.landscapeText = [];
                                object.portraitTextFocus = [];
                                object.landscapeTextFocus = [];
                            }
                            if (options.defaults) {
                                object.renderType = 0;
                                object.textInputPost = false;
                                object.exposureOnce = false;
                                object.exposureType = 0;
                            }
                            if (message.portraitText && message.portraitText.length) {
                                object.portraitText = [];
                                for (let j = 0; j < message.portraitText.length; ++j)
                                    object.portraitText[j] = message.portraitText[j];
                            }
                            if (message.landscapeText && message.landscapeText.length) {
                                object.landscapeText = [];
                                for (let j = 0; j < message.landscapeText.length; ++j)
                                    object.landscapeText[j] = message.landscapeText[j];
                            }
                            if (message.portraitTextFocus && message.portraitTextFocus.length) {
                                object.portraitTextFocus = [];
                                for (let j = 0; j < message.portraitTextFocus.length; ++j)
                                    object.portraitTextFocus[j] = message.portraitTextFocus[j];
                            }
                            if (message.landscapeTextFocus && message.landscapeTextFocus.length) {
                                object.landscapeTextFocus = [];
                                for (let j = 0; j < message.landscapeTextFocus.length; ++j)
                                    object.landscapeTextFocus[j] = message.landscapeTextFocus[j];
                            }
                            if (message.renderType != null && message.hasOwnProperty("renderType"))
                                object.renderType = message.renderType;
                            if (message.textInputPost != null && message.hasOwnProperty("textInputPost"))
                                object.textInputPost = message.textInputPost;
                            if (message.exposureOnce != null && message.hasOwnProperty("exposureOnce"))
                                object.exposureOnce = message.exposureOnce;
                            if (message.exposureType != null && message.hasOwnProperty("exposureType"))
                                object.exposureType = message.exposureType;
                            return object;
                        };

                        /**
                         * Converts this ClickButtonV2 to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.ClickButtonV2
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ClickButtonV2.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for ClickButtonV2
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.ClickButtonV2
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ClickButtonV2.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.ClickButtonV2";
                        };

                        return ClickButtonV2;
                    })();

                    v1.CommandDm = (function() {

                        /**
                         * Properties of a CommandDm.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface ICommandDm
                         * @property {number|Long|null} [id] CommandDm id
                         * @property {number|Long|null} [oid] CommandDm oid
                         * @property {string|null} [mid] CommandDm mid
                         * @property {string|null} [command] CommandDm command
                         * @property {string|null} [content] CommandDm content
                         * @property {number|null} [progress] CommandDm progress
                         * @property {string|null} [ctime] CommandDm ctime
                         * @property {string|null} [mtime] CommandDm mtime
                         * @property {string|null} [extra] CommandDm extra
                         * @property {string|null} [idStr] CommandDm idStr
                         */

                        /**
                         * Constructs a new CommandDm.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a CommandDm.
                         * @implements ICommandDm
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.ICommandDm=} [properties] Properties to set
                         */
                        function CommandDm(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * CommandDm id.
                         * @member {number|Long} id
                         * @memberof bilibili.community.service.dm.v1.CommandDm
                         * @instance
                         */
                        CommandDm.prototype.id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * CommandDm oid.
                         * @member {number|Long} oid
                         * @memberof bilibili.community.service.dm.v1.CommandDm
                         * @instance
                         */
                        CommandDm.prototype.oid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * CommandDm mid.
                         * @member {string} mid
                         * @memberof bilibili.community.service.dm.v1.CommandDm
                         * @instance
                         */
                        CommandDm.prototype.mid = "";

                        /**
                         * CommandDm command.
                         * @member {string} command
                         * @memberof bilibili.community.service.dm.v1.CommandDm
                         * @instance
                         */
                        CommandDm.prototype.command = "";

                        /**
                         * CommandDm content.
                         * @member {string} content
                         * @memberof bilibili.community.service.dm.v1.CommandDm
                         * @instance
                         */
                        CommandDm.prototype.content = "";

                        /**
                         * CommandDm progress.
                         * @member {number} progress
                         * @memberof bilibili.community.service.dm.v1.CommandDm
                         * @instance
                         */
                        CommandDm.prototype.progress = 0;

                        /**
                         * CommandDm ctime.
                         * @member {string} ctime
                         * @memberof bilibili.community.service.dm.v1.CommandDm
                         * @instance
                         */
                        CommandDm.prototype.ctime = "";

                        /**
                         * CommandDm mtime.
                         * @member {string} mtime
                         * @memberof bilibili.community.service.dm.v1.CommandDm
                         * @instance
                         */
                        CommandDm.prototype.mtime = "";

                        /**
                         * CommandDm extra.
                         * @member {string} extra
                         * @memberof bilibili.community.service.dm.v1.CommandDm
                         * @instance
                         */
                        CommandDm.prototype.extra = "";

                        /**
                         * CommandDm idStr.
                         * @member {string} idStr
                         * @memberof bilibili.community.service.dm.v1.CommandDm
                         * @instance
                         */
                        CommandDm.prototype.idStr = "";

                        /**
                         * Creates a new CommandDm instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.CommandDm
                         * @static
                         * @param {bilibili.community.service.dm.v1.ICommandDm=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.CommandDm} CommandDm instance
                         */
                        CommandDm.create = function create(properties) {
                            return new CommandDm(properties);
                        };

                        /**
                         * Encodes the specified CommandDm message. Does not implicitly {@link bilibili.community.service.dm.v1.CommandDm.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.CommandDm
                         * @static
                         * @param {bilibili.community.service.dm.v1.ICommandDm} message CommandDm message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CommandDm.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.id);
                            if (message.oid != null && Object.hasOwnProperty.call(message, "oid"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.oid);
                            if (message.mid != null && Object.hasOwnProperty.call(message, "mid"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.mid);
                            if (message.command != null && Object.hasOwnProperty.call(message, "command"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.command);
                            if (message.content != null && Object.hasOwnProperty.call(message, "content"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.content);
                            if (message.progress != null && Object.hasOwnProperty.call(message, "progress"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.progress);
                            if (message.ctime != null && Object.hasOwnProperty.call(message, "ctime"))
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.ctime);
                            if (message.mtime != null && Object.hasOwnProperty.call(message, "mtime"))
                                writer.uint32(/* id 8, wireType 2 =*/66).string(message.mtime);
                            if (message.extra != null && Object.hasOwnProperty.call(message, "extra"))
                                writer.uint32(/* id 9, wireType 2 =*/74).string(message.extra);
                            if (message.idStr != null && Object.hasOwnProperty.call(message, "idStr"))
                                writer.uint32(/* id 10, wireType 2 =*/82).string(message.idStr);
                            return writer;
                        };

                        /**
                         * Encodes the specified CommandDm message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.CommandDm.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.CommandDm
                         * @static
                         * @param {bilibili.community.service.dm.v1.ICommandDm} message CommandDm message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        CommandDm.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a CommandDm message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.CommandDm
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.CommandDm} CommandDm
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CommandDm.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.CommandDm();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.id = reader.int64();
                                        break;
                                    }
                                case 2: {
                                        message.oid = reader.int64();
                                        break;
                                    }
                                case 3: {
                                        message.mid = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.command = reader.string();
                                        break;
                                    }
                                case 5: {
                                        message.content = reader.string();
                                        break;
                                    }
                                case 6: {
                                        message.progress = reader.int32();
                                        break;
                                    }
                                case 7: {
                                        message.ctime = reader.string();
                                        break;
                                    }
                                case 8: {
                                        message.mtime = reader.string();
                                        break;
                                    }
                                case 9: {
                                        message.extra = reader.string();
                                        break;
                                    }
                                case 10: {
                                        message.idStr = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a CommandDm message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.CommandDm
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.CommandDm} CommandDm
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        CommandDm.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a CommandDm message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.CommandDm
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        CommandDm.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                                    return "id: integer|Long expected";
                            if (message.oid != null && message.hasOwnProperty("oid"))
                                if (!$util.isInteger(message.oid) && !(message.oid && $util.isInteger(message.oid.low) && $util.isInteger(message.oid.high)))
                                    return "oid: integer|Long expected";
                            if (message.mid != null && message.hasOwnProperty("mid"))
                                if (!$util.isString(message.mid))
                                    return "mid: string expected";
                            if (message.command != null && message.hasOwnProperty("command"))
                                if (!$util.isString(message.command))
                                    return "command: string expected";
                            if (message.content != null && message.hasOwnProperty("content"))
                                if (!$util.isString(message.content))
                                    return "content: string expected";
                            if (message.progress != null && message.hasOwnProperty("progress"))
                                if (!$util.isInteger(message.progress))
                                    return "progress: integer expected";
                            if (message.ctime != null && message.hasOwnProperty("ctime"))
                                if (!$util.isString(message.ctime))
                                    return "ctime: string expected";
                            if (message.mtime != null && message.hasOwnProperty("mtime"))
                                if (!$util.isString(message.mtime))
                                    return "mtime: string expected";
                            if (message.extra != null && message.hasOwnProperty("extra"))
                                if (!$util.isString(message.extra))
                                    return "extra: string expected";
                            if (message.idStr != null && message.hasOwnProperty("idStr"))
                                if (!$util.isString(message.idStr))
                                    return "idStr: string expected";
                            return null;
                        };

                        /**
                         * Creates a CommandDm message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.CommandDm
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.CommandDm} CommandDm
                         */
                        CommandDm.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.CommandDm)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.CommandDm();
                            if (object.id != null)
                                if ($util.Long)
                                    (message.id = $util.Long.fromValue(object.id)).unsigned = false;
                                else if (typeof object.id === "string")
                                    message.id = parseInt(object.id, 10);
                                else if (typeof object.id === "number")
                                    message.id = object.id;
                                else if (typeof object.id === "object")
                                    message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber();
                            if (object.oid != null)
                                if ($util.Long)
                                    (message.oid = $util.Long.fromValue(object.oid)).unsigned = false;
                                else if (typeof object.oid === "string")
                                    message.oid = parseInt(object.oid, 10);
                                else if (typeof object.oid === "number")
                                    message.oid = object.oid;
                                else if (typeof object.oid === "object")
                                    message.oid = new $util.LongBits(object.oid.low >>> 0, object.oid.high >>> 0).toNumber();
                            if (object.mid != null)
                                message.mid = String(object.mid);
                            if (object.command != null)
                                message.command = String(object.command);
                            if (object.content != null)
                                message.content = String(object.content);
                            if (object.progress != null)
                                message.progress = object.progress | 0;
                            if (object.ctime != null)
                                message.ctime = String(object.ctime);
                            if (object.mtime != null)
                                message.mtime = String(object.mtime);
                            if (object.extra != null)
                                message.extra = String(object.extra);
                            if (object.idStr != null)
                                message.idStr = String(object.idStr);
                            return message;
                        };

                        /**
                         * Creates a plain object from a CommandDm message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.CommandDm
                         * @static
                         * @param {bilibili.community.service.dm.v1.CommandDm} message CommandDm
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        CommandDm.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.id = options.longs === String ? "0" : 0;
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.oid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.oid = options.longs === String ? "0" : 0;
                                object.mid = "";
                                object.command = "";
                                object.content = "";
                                object.progress = 0;
                                object.ctime = "";
                                object.mtime = "";
                                object.extra = "";
                                object.idStr = "";
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (typeof message.id === "number")
                                    object.id = options.longs === String ? String(message.id) : message.id;
                                else
                                    object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id;
                            if (message.oid != null && message.hasOwnProperty("oid"))
                                if (typeof message.oid === "number")
                                    object.oid = options.longs === String ? String(message.oid) : message.oid;
                                else
                                    object.oid = options.longs === String ? $util.Long.prototype.toString.call(message.oid) : options.longs === Number ? new $util.LongBits(message.oid.low >>> 0, message.oid.high >>> 0).toNumber() : message.oid;
                            if (message.mid != null && message.hasOwnProperty("mid"))
                                object.mid = message.mid;
                            if (message.command != null && message.hasOwnProperty("command"))
                                object.command = message.command;
                            if (message.content != null && message.hasOwnProperty("content"))
                                object.content = message.content;
                            if (message.progress != null && message.hasOwnProperty("progress"))
                                object.progress = message.progress;
                            if (message.ctime != null && message.hasOwnProperty("ctime"))
                                object.ctime = message.ctime;
                            if (message.mtime != null && message.hasOwnProperty("mtime"))
                                object.mtime = message.mtime;
                            if (message.extra != null && message.hasOwnProperty("extra"))
                                object.extra = message.extra;
                            if (message.idStr != null && message.hasOwnProperty("idStr"))
                                object.idStr = message.idStr;
                            return object;
                        };

                        /**
                         * Converts this CommandDm to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.CommandDm
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        CommandDm.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for CommandDm
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.CommandDm
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        CommandDm.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.CommandDm";
                        };

                        return CommandDm;
                    })();

                    v1.DanmakuAIFlag = (function() {

                        /**
                         * Properties of a DanmakuAIFlag.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IDanmakuAIFlag
                         * @property {Array.<bilibili.community.service.dm.v1.IDanmakuFlag>|null} [dmFlags] DanmakuAIFlag dmFlags
                         */

                        /**
                         * Constructs a new DanmakuAIFlag.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a DanmakuAIFlag.
                         * @implements IDanmakuAIFlag
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IDanmakuAIFlag=} [properties] Properties to set
                         */
                        function DanmakuAIFlag(properties) {
                            this.dmFlags = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * DanmakuAIFlag dmFlags.
                         * @member {Array.<bilibili.community.service.dm.v1.IDanmakuFlag>} dmFlags
                         * @memberof bilibili.community.service.dm.v1.DanmakuAIFlag
                         * @instance
                         */
                        DanmakuAIFlag.prototype.dmFlags = $util.emptyArray;

                        /**
                         * Creates a new DanmakuAIFlag instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.DanmakuAIFlag
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDanmakuAIFlag=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.DanmakuAIFlag} DanmakuAIFlag instance
                         */
                        DanmakuAIFlag.create = function create(properties) {
                            return new DanmakuAIFlag(properties);
                        };

                        /**
                         * Encodes the specified DanmakuAIFlag message. Does not implicitly {@link bilibili.community.service.dm.v1.DanmakuAIFlag.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.DanmakuAIFlag
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDanmakuAIFlag} message DanmakuAIFlag message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DanmakuAIFlag.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.dmFlags != null && message.dmFlags.length)
                                for (let i = 0; i < message.dmFlags.length; ++i)
                                    $root.bilibili.community.service.dm.v1.DanmakuFlag.encode(message.dmFlags[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified DanmakuAIFlag message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.DanmakuAIFlag.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DanmakuAIFlag
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDanmakuAIFlag} message DanmakuAIFlag message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DanmakuAIFlag.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a DanmakuAIFlag message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.DanmakuAIFlag
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.DanmakuAIFlag} DanmakuAIFlag
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DanmakuAIFlag.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.DanmakuAIFlag();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.dmFlags && message.dmFlags.length))
                                            message.dmFlags = [];
                                        message.dmFlags.push($root.bilibili.community.service.dm.v1.DanmakuFlag.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a DanmakuAIFlag message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DanmakuAIFlag
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.DanmakuAIFlag} DanmakuAIFlag
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DanmakuAIFlag.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a DanmakuAIFlag message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.DanmakuAIFlag
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DanmakuAIFlag.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.dmFlags != null && message.hasOwnProperty("dmFlags")) {
                                if (!Array.isArray(message.dmFlags))
                                    return "dmFlags: array expected";
                                for (let i = 0; i < message.dmFlags.length; ++i) {
                                    let error = $root.bilibili.community.service.dm.v1.DanmakuFlag.verify(message.dmFlags[i]);
                                    if (error)
                                        return "dmFlags." + error;
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates a DanmakuAIFlag message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.DanmakuAIFlag
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.DanmakuAIFlag} DanmakuAIFlag
                         */
                        DanmakuAIFlag.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.DanmakuAIFlag)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.DanmakuAIFlag();
                            if (object.dmFlags) {
                                if (!Array.isArray(object.dmFlags))
                                    throw TypeError(".bilibili.community.service.dm.v1.DanmakuAIFlag.dmFlags: array expected");
                                message.dmFlags = [];
                                for (let i = 0; i < object.dmFlags.length; ++i) {
                                    if (typeof object.dmFlags[i] !== "object")
                                        throw TypeError(".bilibili.community.service.dm.v1.DanmakuAIFlag.dmFlags: object expected");
                                    message.dmFlags[i] = $root.bilibili.community.service.dm.v1.DanmakuFlag.fromObject(object.dmFlags[i]);
                                }
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a DanmakuAIFlag message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.DanmakuAIFlag
                         * @static
                         * @param {bilibili.community.service.dm.v1.DanmakuAIFlag} message DanmakuAIFlag
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DanmakuAIFlag.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults)
                                object.dmFlags = [];
                            if (message.dmFlags && message.dmFlags.length) {
                                object.dmFlags = [];
                                for (let j = 0; j < message.dmFlags.length; ++j)
                                    object.dmFlags[j] = $root.bilibili.community.service.dm.v1.DanmakuFlag.toObject(message.dmFlags[j], options);
                            }
                            return object;
                        };

                        /**
                         * Converts this DanmakuAIFlag to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.DanmakuAIFlag
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DanmakuAIFlag.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for DanmakuAIFlag
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.DanmakuAIFlag
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DanmakuAIFlag.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.DanmakuAIFlag";
                        };

                        return DanmakuAIFlag;
                    })();

                    v1.DanmakuElem = (function() {

                        /**
                         * Properties of a DanmakuElem.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IDanmakuElem
                         * @property {number|Long|null} [id] DanmakuElem id
                         * @property {number|null} [progress] DanmakuElem progress
                         * @property {number|null} [mode] DanmakuElem mode
                         * @property {number|null} [fontsize] DanmakuElem fontsize
                         * @property {number|null} [color] DanmakuElem color
                         * @property {string|null} [midHash] DanmakuElem midHash
                         * @property {string|null} [content] DanmakuElem content
                         * @property {number|Long|null} [ctime] DanmakuElem ctime
                         * @property {number|null} [weight] DanmakuElem weight
                         * @property {string|null} [action] DanmakuElem action
                         * @property {number|null} [pool] DanmakuElem pool
                         * @property {string|null} [idStr] DanmakuElem idStr
                         * @property {number|null} [attr] DanmakuElem attr
                         * @property {string|null} [animation] DanmakuElem animation
                         * @property {bilibili.community.service.dm.v1.DmColorfulType|null} [colorful] DanmakuElem colorful
                         */

                        /**
                         * Constructs a new DanmakuElem.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a DanmakuElem.
                         * @implements IDanmakuElem
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IDanmakuElem=} [properties] Properties to set
                         */
                        function DanmakuElem(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * DanmakuElem id.
                         * @member {number|Long} id
                         * @memberof bilibili.community.service.dm.v1.DanmakuElem
                         * @instance
                         */
                        DanmakuElem.prototype.id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * DanmakuElem progress.
                         * @member {number} progress
                         * @memberof bilibili.community.service.dm.v1.DanmakuElem
                         * @instance
                         */
                        DanmakuElem.prototype.progress = 0;

                        /**
                         * DanmakuElem mode.
                         * @member {number} mode
                         * @memberof bilibili.community.service.dm.v1.DanmakuElem
                         * @instance
                         */
                        DanmakuElem.prototype.mode = 0;

                        /**
                         * DanmakuElem fontsize.
                         * @member {number} fontsize
                         * @memberof bilibili.community.service.dm.v1.DanmakuElem
                         * @instance
                         */
                        DanmakuElem.prototype.fontsize = 0;

                        /**
                         * DanmakuElem color.
                         * @member {number} color
                         * @memberof bilibili.community.service.dm.v1.DanmakuElem
                         * @instance
                         */
                        DanmakuElem.prototype.color = 0;

                        /**
                         * DanmakuElem midHash.
                         * @member {string} midHash
                         * @memberof bilibili.community.service.dm.v1.DanmakuElem
                         * @instance
                         */
                        DanmakuElem.prototype.midHash = "";

                        /**
                         * DanmakuElem content.
                         * @member {string} content
                         * @memberof bilibili.community.service.dm.v1.DanmakuElem
                         * @instance
                         */
                        DanmakuElem.prototype.content = "";

                        /**
                         * DanmakuElem ctime.
                         * @member {number|Long} ctime
                         * @memberof bilibili.community.service.dm.v1.DanmakuElem
                         * @instance
                         */
                        DanmakuElem.prototype.ctime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * DanmakuElem weight.
                         * @member {number} weight
                         * @memberof bilibili.community.service.dm.v1.DanmakuElem
                         * @instance
                         */
                        DanmakuElem.prototype.weight = 0;

                        /**
                         * DanmakuElem action.
                         * @member {string} action
                         * @memberof bilibili.community.service.dm.v1.DanmakuElem
                         * @instance
                         */
                        DanmakuElem.prototype.action = "";

                        /**
                         * DanmakuElem pool.
                         * @member {number} pool
                         * @memberof bilibili.community.service.dm.v1.DanmakuElem
                         * @instance
                         */
                        DanmakuElem.prototype.pool = 0;

                        /**
                         * DanmakuElem idStr.
                         * @member {string} idStr
                         * @memberof bilibili.community.service.dm.v1.DanmakuElem
                         * @instance
                         */
                        DanmakuElem.prototype.idStr = "";

                        /**
                         * DanmakuElem attr.
                         * @member {number} attr
                         * @memberof bilibili.community.service.dm.v1.DanmakuElem
                         * @instance
                         */
                        DanmakuElem.prototype.attr = 0;

                        /**
                         * DanmakuElem animation.
                         * @member {string} animation
                         * @memberof bilibili.community.service.dm.v1.DanmakuElem
                         * @instance
                         */
                        DanmakuElem.prototype.animation = "";

                        /**
                         * DanmakuElem colorful.
                         * @member {bilibili.community.service.dm.v1.DmColorfulType} colorful
                         * @memberof bilibili.community.service.dm.v1.DanmakuElem
                         * @instance
                         */
                        DanmakuElem.prototype.colorful = 0;

                        /**
                         * Creates a new DanmakuElem instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.DanmakuElem
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDanmakuElem=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.DanmakuElem} DanmakuElem instance
                         */
                        DanmakuElem.create = function create(properties) {
                            return new DanmakuElem(properties);
                        };

                        /**
                         * Encodes the specified DanmakuElem message. Does not implicitly {@link bilibili.community.service.dm.v1.DanmakuElem.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.DanmakuElem
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDanmakuElem} message DanmakuElem message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DanmakuElem.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.id);
                            if (message.progress != null && Object.hasOwnProperty.call(message, "progress"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.progress);
                            if (message.mode != null && Object.hasOwnProperty.call(message, "mode"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.mode);
                            if (message.fontsize != null && Object.hasOwnProperty.call(message, "fontsize"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.fontsize);
                            if (message.color != null && Object.hasOwnProperty.call(message, "color"))
                                writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.color);
                            if (message.midHash != null && Object.hasOwnProperty.call(message, "midHash"))
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.midHash);
                            if (message.content != null && Object.hasOwnProperty.call(message, "content"))
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.content);
                            if (message.ctime != null && Object.hasOwnProperty.call(message, "ctime"))
                                writer.uint32(/* id 8, wireType 0 =*/64).int64(message.ctime);
                            if (message.weight != null && Object.hasOwnProperty.call(message, "weight"))
                                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.weight);
                            if (message.action != null && Object.hasOwnProperty.call(message, "action"))
                                writer.uint32(/* id 10, wireType 2 =*/82).string(message.action);
                            if (message.pool != null && Object.hasOwnProperty.call(message, "pool"))
                                writer.uint32(/* id 11, wireType 0 =*/88).int32(message.pool);
                            if (message.idStr != null && Object.hasOwnProperty.call(message, "idStr"))
                                writer.uint32(/* id 12, wireType 2 =*/98).string(message.idStr);
                            if (message.attr != null && Object.hasOwnProperty.call(message, "attr"))
                                writer.uint32(/* id 13, wireType 0 =*/104).int32(message.attr);
                            if (message.animation != null && Object.hasOwnProperty.call(message, "animation"))
                                writer.uint32(/* id 22, wireType 2 =*/178).string(message.animation);
                            if (message.colorful != null && Object.hasOwnProperty.call(message, "colorful"))
                                writer.uint32(/* id 24, wireType 0 =*/192).int32(message.colorful);
                            return writer;
                        };

                        /**
                         * Encodes the specified DanmakuElem message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.DanmakuElem.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DanmakuElem
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDanmakuElem} message DanmakuElem message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DanmakuElem.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a DanmakuElem message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.DanmakuElem
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.DanmakuElem} DanmakuElem
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DanmakuElem.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.DanmakuElem();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.id = reader.int64();
                                        break;
                                    }
                                case 2: {
                                        message.progress = reader.int32();
                                        break;
                                    }
                                case 3: {
                                        message.mode = reader.int32();
                                        break;
                                    }
                                case 4: {
                                        message.fontsize = reader.int32();
                                        break;
                                    }
                                case 5: {
                                        message.color = reader.uint32();
                                        break;
                                    }
                                case 6: {
                                        message.midHash = reader.string();
                                        break;
                                    }
                                case 7: {
                                        message.content = reader.string();
                                        break;
                                    }
                                case 8: {
                                        message.ctime = reader.int64();
                                        break;
                                    }
                                case 9: {
                                        message.weight = reader.int32();
                                        break;
                                    }
                                case 10: {
                                        message.action = reader.string();
                                        break;
                                    }
                                case 11: {
                                        message.pool = reader.int32();
                                        break;
                                    }
                                case 12: {
                                        message.idStr = reader.string();
                                        break;
                                    }
                                case 13: {
                                        message.attr = reader.int32();
                                        break;
                                    }
                                case 22: {
                                        message.animation = reader.string();
                                        break;
                                    }
                                case 24: {
                                        message.colorful = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a DanmakuElem message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DanmakuElem
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.DanmakuElem} DanmakuElem
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DanmakuElem.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a DanmakuElem message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.DanmakuElem
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DanmakuElem.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                                    return "id: integer|Long expected";
                            if (message.progress != null && message.hasOwnProperty("progress"))
                                if (!$util.isInteger(message.progress))
                                    return "progress: integer expected";
                            if (message.mode != null && message.hasOwnProperty("mode"))
                                if (!$util.isInteger(message.mode))
                                    return "mode: integer expected";
                            if (message.fontsize != null && message.hasOwnProperty("fontsize"))
                                if (!$util.isInteger(message.fontsize))
                                    return "fontsize: integer expected";
                            if (message.color != null && message.hasOwnProperty("color"))
                                if (!$util.isInteger(message.color))
                                    return "color: integer expected";
                            if (message.midHash != null && message.hasOwnProperty("midHash"))
                                if (!$util.isString(message.midHash))
                                    return "midHash: string expected";
                            if (message.content != null && message.hasOwnProperty("content"))
                                if (!$util.isString(message.content))
                                    return "content: string expected";
                            if (message.ctime != null && message.hasOwnProperty("ctime"))
                                if (!$util.isInteger(message.ctime) && !(message.ctime && $util.isInteger(message.ctime.low) && $util.isInteger(message.ctime.high)))
                                    return "ctime: integer|Long expected";
                            if (message.weight != null && message.hasOwnProperty("weight"))
                                if (!$util.isInteger(message.weight))
                                    return "weight: integer expected";
                            if (message.action != null && message.hasOwnProperty("action"))
                                if (!$util.isString(message.action))
                                    return "action: string expected";
                            if (message.pool != null && message.hasOwnProperty("pool"))
                                if (!$util.isInteger(message.pool))
                                    return "pool: integer expected";
                            if (message.idStr != null && message.hasOwnProperty("idStr"))
                                if (!$util.isString(message.idStr))
                                    return "idStr: string expected";
                            if (message.attr != null && message.hasOwnProperty("attr"))
                                if (!$util.isInteger(message.attr))
                                    return "attr: integer expected";
                            if (message.animation != null && message.hasOwnProperty("animation"))
                                if (!$util.isString(message.animation))
                                    return "animation: string expected";
                            if (message.colorful != null && message.hasOwnProperty("colorful"))
                                switch (message.colorful) {
                                default:
                                    return "colorful: enum value expected";
                                case 0:
                                case 60001:
                                    break;
                                }
                            return null;
                        };

                        /**
                         * Creates a DanmakuElem message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.DanmakuElem
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.DanmakuElem} DanmakuElem
                         */
                        DanmakuElem.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.DanmakuElem)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.DanmakuElem();
                            if (object.id != null)
                                if ($util.Long)
                                    (message.id = $util.Long.fromValue(object.id)).unsigned = false;
                                else if (typeof object.id === "string")
                                    message.id = parseInt(object.id, 10);
                                else if (typeof object.id === "number")
                                    message.id = object.id;
                                else if (typeof object.id === "object")
                                    message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber();
                            if (object.progress != null)
                                message.progress = object.progress | 0;
                            if (object.mode != null)
                                message.mode = object.mode | 0;
                            if (object.fontsize != null)
                                message.fontsize = object.fontsize | 0;
                            if (object.color != null)
                                message.color = object.color >>> 0;
                            if (object.midHash != null)
                                message.midHash = String(object.midHash);
                            if (object.content != null)
                                message.content = String(object.content);
                            if (object.ctime != null)
                                if ($util.Long)
                                    (message.ctime = $util.Long.fromValue(object.ctime)).unsigned = false;
                                else if (typeof object.ctime === "string")
                                    message.ctime = parseInt(object.ctime, 10);
                                else if (typeof object.ctime === "number")
                                    message.ctime = object.ctime;
                                else if (typeof object.ctime === "object")
                                    message.ctime = new $util.LongBits(object.ctime.low >>> 0, object.ctime.high >>> 0).toNumber();
                            if (object.weight != null)
                                message.weight = object.weight | 0;
                            if (object.action != null)
                                message.action = String(object.action);
                            if (object.pool != null)
                                message.pool = object.pool | 0;
                            if (object.idStr != null)
                                message.idStr = String(object.idStr);
                            if (object.attr != null)
                                message.attr = object.attr | 0;
                            if (object.animation != null)
                                message.animation = String(object.animation);
                            switch (object.colorful) {
                            default:
                                if (typeof object.colorful === "number") {
                                    message.colorful = object.colorful;
                                    break;
                                }
                                break;
                            case "NoneType":
                            case 0:
                                message.colorful = 0;
                                break;
                            case "VipGradualColor":
                            case 60001:
                                message.colorful = 60001;
                                break;
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a DanmakuElem message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.DanmakuElem
                         * @static
                         * @param {bilibili.community.service.dm.v1.DanmakuElem} message DanmakuElem
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DanmakuElem.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.id = options.longs === String ? "0" : 0;
                                object.progress = 0;
                                object.mode = 0;
                                object.fontsize = 0;
                                object.color = 0;
                                object.midHash = "";
                                object.content = "";
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.ctime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.ctime = options.longs === String ? "0" : 0;
                                object.weight = 0;
                                object.action = "";
                                object.pool = 0;
                                object.idStr = "";
                                object.attr = 0;
                                object.animation = "";
                                object.colorful = options.enums === String ? "NoneType" : 0;
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (typeof message.id === "number")
                                    object.id = options.longs === String ? String(message.id) : message.id;
                                else
                                    object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id;
                            if (message.progress != null && message.hasOwnProperty("progress"))
                                object.progress = message.progress;
                            if (message.mode != null && message.hasOwnProperty("mode"))
                                object.mode = message.mode;
                            if (message.fontsize != null && message.hasOwnProperty("fontsize"))
                                object.fontsize = message.fontsize;
                            if (message.color != null && message.hasOwnProperty("color"))
                                object.color = message.color;
                            if (message.midHash != null && message.hasOwnProperty("midHash"))
                                object.midHash = message.midHash;
                            if (message.content != null && message.hasOwnProperty("content"))
                                object.content = message.content;
                            if (message.ctime != null && message.hasOwnProperty("ctime"))
                                if (typeof message.ctime === "number")
                                    object.ctime = options.longs === String ? String(message.ctime) : message.ctime;
                                else
                                    object.ctime = options.longs === String ? $util.Long.prototype.toString.call(message.ctime) : options.longs === Number ? new $util.LongBits(message.ctime.low >>> 0, message.ctime.high >>> 0).toNumber() : message.ctime;
                            if (message.weight != null && message.hasOwnProperty("weight"))
                                object.weight = message.weight;
                            if (message.action != null && message.hasOwnProperty("action"))
                                object.action = message.action;
                            if (message.pool != null && message.hasOwnProperty("pool"))
                                object.pool = message.pool;
                            if (message.idStr != null && message.hasOwnProperty("idStr"))
                                object.idStr = message.idStr;
                            if (message.attr != null && message.hasOwnProperty("attr"))
                                object.attr = message.attr;
                            if (message.animation != null && message.hasOwnProperty("animation"))
                                object.animation = message.animation;
                            if (message.colorful != null && message.hasOwnProperty("colorful"))
                                object.colorful = options.enums === String ? $root.bilibili.community.service.dm.v1.DmColorfulType[message.colorful] === undefined ? message.colorful : $root.bilibili.community.service.dm.v1.DmColorfulType[message.colorful] : message.colorful;
                            return object;
                        };

                        /**
                         * Converts this DanmakuElem to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.DanmakuElem
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DanmakuElem.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for DanmakuElem
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.DanmakuElem
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DanmakuElem.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.DanmakuElem";
                        };

                        return DanmakuElem;
                    })();

                    v1.DanmakuFlag = (function() {

                        /**
                         * Properties of a DanmakuFlag.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IDanmakuFlag
                         * @property {number|Long|null} [dmid] DanmakuFlag dmid
                         * @property {number|null} [flag] DanmakuFlag flag
                         */

                        /**
                         * Constructs a new DanmakuFlag.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a DanmakuFlag.
                         * @implements IDanmakuFlag
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IDanmakuFlag=} [properties] Properties to set
                         */
                        function DanmakuFlag(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * DanmakuFlag dmid.
                         * @member {number|Long} dmid
                         * @memberof bilibili.community.service.dm.v1.DanmakuFlag
                         * @instance
                         */
                        DanmakuFlag.prototype.dmid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * DanmakuFlag flag.
                         * @member {number} flag
                         * @memberof bilibili.community.service.dm.v1.DanmakuFlag
                         * @instance
                         */
                        DanmakuFlag.prototype.flag = 0;

                        /**
                         * Creates a new DanmakuFlag instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.DanmakuFlag
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDanmakuFlag=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.DanmakuFlag} DanmakuFlag instance
                         */
                        DanmakuFlag.create = function create(properties) {
                            return new DanmakuFlag(properties);
                        };

                        /**
                         * Encodes the specified DanmakuFlag message. Does not implicitly {@link bilibili.community.service.dm.v1.DanmakuFlag.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.DanmakuFlag
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDanmakuFlag} message DanmakuFlag message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DanmakuFlag.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.dmid != null && Object.hasOwnProperty.call(message, "dmid"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dmid);
                            if (message.flag != null && Object.hasOwnProperty.call(message, "flag"))
                                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.flag);
                            return writer;
                        };

                        /**
                         * Encodes the specified DanmakuFlag message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.DanmakuFlag.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DanmakuFlag
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDanmakuFlag} message DanmakuFlag message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DanmakuFlag.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a DanmakuFlag message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.DanmakuFlag
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.DanmakuFlag} DanmakuFlag
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DanmakuFlag.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.DanmakuFlag();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.dmid = reader.int64();
                                        break;
                                    }
                                case 2: {
                                        message.flag = reader.uint32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a DanmakuFlag message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DanmakuFlag
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.DanmakuFlag} DanmakuFlag
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DanmakuFlag.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a DanmakuFlag message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.DanmakuFlag
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DanmakuFlag.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.dmid != null && message.hasOwnProperty("dmid"))
                                if (!$util.isInteger(message.dmid) && !(message.dmid && $util.isInteger(message.dmid.low) && $util.isInteger(message.dmid.high)))
                                    return "dmid: integer|Long expected";
                            if (message.flag != null && message.hasOwnProperty("flag"))
                                if (!$util.isInteger(message.flag))
                                    return "flag: integer expected";
                            return null;
                        };

                        /**
                         * Creates a DanmakuFlag message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.DanmakuFlag
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.DanmakuFlag} DanmakuFlag
                         */
                        DanmakuFlag.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.DanmakuFlag)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.DanmakuFlag();
                            if (object.dmid != null)
                                if ($util.Long)
                                    (message.dmid = $util.Long.fromValue(object.dmid)).unsigned = false;
                                else if (typeof object.dmid === "string")
                                    message.dmid = parseInt(object.dmid, 10);
                                else if (typeof object.dmid === "number")
                                    message.dmid = object.dmid;
                                else if (typeof object.dmid === "object")
                                    message.dmid = new $util.LongBits(object.dmid.low >>> 0, object.dmid.high >>> 0).toNumber();
                            if (object.flag != null)
                                message.flag = object.flag >>> 0;
                            return message;
                        };

                        /**
                         * Creates a plain object from a DanmakuFlag message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.DanmakuFlag
                         * @static
                         * @param {bilibili.community.service.dm.v1.DanmakuFlag} message DanmakuFlag
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DanmakuFlag.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.dmid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.dmid = options.longs === String ? "0" : 0;
                                object.flag = 0;
                            }
                            if (message.dmid != null && message.hasOwnProperty("dmid"))
                                if (typeof message.dmid === "number")
                                    object.dmid = options.longs === String ? String(message.dmid) : message.dmid;
                                else
                                    object.dmid = options.longs === String ? $util.Long.prototype.toString.call(message.dmid) : options.longs === Number ? new $util.LongBits(message.dmid.low >>> 0, message.dmid.high >>> 0).toNumber() : message.dmid;
                            if (message.flag != null && message.hasOwnProperty("flag"))
                                object.flag = message.flag;
                            return object;
                        };

                        /**
                         * Converts this DanmakuFlag to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.DanmakuFlag
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DanmakuFlag.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for DanmakuFlag
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.DanmakuFlag
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DanmakuFlag.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.DanmakuFlag";
                        };

                        return DanmakuFlag;
                    })();

                    v1.DanmakuFlagConfig = (function() {

                        /**
                         * Properties of a DanmakuFlagConfig.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IDanmakuFlagConfig
                         * @property {number|null} [recFlag] DanmakuFlagConfig recFlag
                         * @property {string|null} [recText] DanmakuFlagConfig recText
                         * @property {number|null} [recSwitch] DanmakuFlagConfig recSwitch
                         */

                        /**
                         * Constructs a new DanmakuFlagConfig.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a DanmakuFlagConfig.
                         * @implements IDanmakuFlagConfig
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IDanmakuFlagConfig=} [properties] Properties to set
                         */
                        function DanmakuFlagConfig(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * DanmakuFlagConfig recFlag.
                         * @member {number} recFlag
                         * @memberof bilibili.community.service.dm.v1.DanmakuFlagConfig
                         * @instance
                         */
                        DanmakuFlagConfig.prototype.recFlag = 0;

                        /**
                         * DanmakuFlagConfig recText.
                         * @member {string} recText
                         * @memberof bilibili.community.service.dm.v1.DanmakuFlagConfig
                         * @instance
                         */
                        DanmakuFlagConfig.prototype.recText = "";

                        /**
                         * DanmakuFlagConfig recSwitch.
                         * @member {number} recSwitch
                         * @memberof bilibili.community.service.dm.v1.DanmakuFlagConfig
                         * @instance
                         */
                        DanmakuFlagConfig.prototype.recSwitch = 0;

                        /**
                         * Creates a new DanmakuFlagConfig instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.DanmakuFlagConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDanmakuFlagConfig=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.DanmakuFlagConfig} DanmakuFlagConfig instance
                         */
                        DanmakuFlagConfig.create = function create(properties) {
                            return new DanmakuFlagConfig(properties);
                        };

                        /**
                         * Encodes the specified DanmakuFlagConfig message. Does not implicitly {@link bilibili.community.service.dm.v1.DanmakuFlagConfig.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.DanmakuFlagConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDanmakuFlagConfig} message DanmakuFlagConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DanmakuFlagConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.recFlag != null && Object.hasOwnProperty.call(message, "recFlag"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.recFlag);
                            if (message.recText != null && Object.hasOwnProperty.call(message, "recText"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.recText);
                            if (message.recSwitch != null && Object.hasOwnProperty.call(message, "recSwitch"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.recSwitch);
                            return writer;
                        };

                        /**
                         * Encodes the specified DanmakuFlagConfig message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.DanmakuFlagConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DanmakuFlagConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDanmakuFlagConfig} message DanmakuFlagConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DanmakuFlagConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a DanmakuFlagConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.DanmakuFlagConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.DanmakuFlagConfig} DanmakuFlagConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DanmakuFlagConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.DanmakuFlagConfig();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.recFlag = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.recText = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.recSwitch = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a DanmakuFlagConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DanmakuFlagConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.DanmakuFlagConfig} DanmakuFlagConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DanmakuFlagConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a DanmakuFlagConfig message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.DanmakuFlagConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DanmakuFlagConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.recFlag != null && message.hasOwnProperty("recFlag"))
                                if (!$util.isInteger(message.recFlag))
                                    return "recFlag: integer expected";
                            if (message.recText != null && message.hasOwnProperty("recText"))
                                if (!$util.isString(message.recText))
                                    return "recText: string expected";
                            if (message.recSwitch != null && message.hasOwnProperty("recSwitch"))
                                if (!$util.isInteger(message.recSwitch))
                                    return "recSwitch: integer expected";
                            return null;
                        };

                        /**
                         * Creates a DanmakuFlagConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.DanmakuFlagConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.DanmakuFlagConfig} DanmakuFlagConfig
                         */
                        DanmakuFlagConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.DanmakuFlagConfig)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.DanmakuFlagConfig();
                            if (object.recFlag != null)
                                message.recFlag = object.recFlag | 0;
                            if (object.recText != null)
                                message.recText = String(object.recText);
                            if (object.recSwitch != null)
                                message.recSwitch = object.recSwitch | 0;
                            return message;
                        };

                        /**
                         * Creates a plain object from a DanmakuFlagConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.DanmakuFlagConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.DanmakuFlagConfig} message DanmakuFlagConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DanmakuFlagConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.recFlag = 0;
                                object.recText = "";
                                object.recSwitch = 0;
                            }
                            if (message.recFlag != null && message.hasOwnProperty("recFlag"))
                                object.recFlag = message.recFlag;
                            if (message.recText != null && message.hasOwnProperty("recText"))
                                object.recText = message.recText;
                            if (message.recSwitch != null && message.hasOwnProperty("recSwitch"))
                                object.recSwitch = message.recSwitch;
                            return object;
                        };

                        /**
                         * Converts this DanmakuFlagConfig to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.DanmakuFlagConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DanmakuFlagConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for DanmakuFlagConfig
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.DanmakuFlagConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DanmakuFlagConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.DanmakuFlagConfig";
                        };

                        return DanmakuFlagConfig;
                    })();

                    v1.DanmuDefaultPlayerConfig = (function() {

                        /**
                         * Properties of a DanmuDefaultPlayerConfig.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IDanmuDefaultPlayerConfig
                         * @property {boolean|null} [playerDanmakuUseDefaultConfig] DanmuDefaultPlayerConfig playerDanmakuUseDefaultConfig
                         * @property {boolean|null} [playerDanmakuAiRecommendedSwitch] DanmuDefaultPlayerConfig playerDanmakuAiRecommendedSwitch
                         * @property {number|null} [playerDanmakuAiRecommendedLevel] DanmuDefaultPlayerConfig playerDanmakuAiRecommendedLevel
                         * @property {boolean|null} [playerDanmakuBlocktop] DanmuDefaultPlayerConfig playerDanmakuBlocktop
                         * @property {boolean|null} [playerDanmakuBlockscroll] DanmuDefaultPlayerConfig playerDanmakuBlockscroll
                         * @property {boolean|null} [playerDanmakuBlockbottom] DanmuDefaultPlayerConfig playerDanmakuBlockbottom
                         * @property {boolean|null} [playerDanmakuBlockcolorful] DanmuDefaultPlayerConfig playerDanmakuBlockcolorful
                         * @property {boolean|null} [playerDanmakuBlockrepeat] DanmuDefaultPlayerConfig playerDanmakuBlockrepeat
                         * @property {boolean|null} [playerDanmakuBlockspecial] DanmuDefaultPlayerConfig playerDanmakuBlockspecial
                         * @property {number|null} [playerDanmakuOpacity] DanmuDefaultPlayerConfig playerDanmakuOpacity
                         * @property {number|null} [playerDanmakuScalingfactor] DanmuDefaultPlayerConfig playerDanmakuScalingfactor
                         * @property {number|null} [playerDanmakuDomain] DanmuDefaultPlayerConfig playerDanmakuDomain
                         * @property {number|null} [playerDanmakuSpeed] DanmuDefaultPlayerConfig playerDanmakuSpeed
                         * @property {boolean|null} [inlinePlayerDanmakuSwitch] DanmuDefaultPlayerConfig inlinePlayerDanmakuSwitch
                         * @property {number|null} [playerDanmakuSeniorModeSwitch] DanmuDefaultPlayerConfig playerDanmakuSeniorModeSwitch
                         * @property {number|null} [playerDanmakuAiRecommendedLevelV2] DanmuDefaultPlayerConfig playerDanmakuAiRecommendedLevelV2
                         * @property {Object.<string,number>|null} [playerDanmakuAiRecommendedLevelV2Map] DanmuDefaultPlayerConfig playerDanmakuAiRecommendedLevelV2Map
                         */

                        /**
                         * Constructs a new DanmuDefaultPlayerConfig.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a DanmuDefaultPlayerConfig.
                         * @implements IDanmuDefaultPlayerConfig
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IDanmuDefaultPlayerConfig=} [properties] Properties to set
                         */
                        function DanmuDefaultPlayerConfig(properties) {
                            this.playerDanmakuAiRecommendedLevelV2Map = {};
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * DanmuDefaultPlayerConfig playerDanmakuUseDefaultConfig.
                         * @member {boolean} playerDanmakuUseDefaultConfig
                         * @memberof bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig
                         * @instance
                         */
                        DanmuDefaultPlayerConfig.prototype.playerDanmakuUseDefaultConfig = false;

                        /**
                         * DanmuDefaultPlayerConfig playerDanmakuAiRecommendedSwitch.
                         * @member {boolean} playerDanmakuAiRecommendedSwitch
                         * @memberof bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig
                         * @instance
                         */
                        DanmuDefaultPlayerConfig.prototype.playerDanmakuAiRecommendedSwitch = false;

                        /**
                         * DanmuDefaultPlayerConfig playerDanmakuAiRecommendedLevel.
                         * @member {number} playerDanmakuAiRecommendedLevel
                         * @memberof bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig
                         * @instance
                         */
                        DanmuDefaultPlayerConfig.prototype.playerDanmakuAiRecommendedLevel = 0;

                        /**
                         * DanmuDefaultPlayerConfig playerDanmakuBlocktop.
                         * @member {boolean} playerDanmakuBlocktop
                         * @memberof bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig
                         * @instance
                         */
                        DanmuDefaultPlayerConfig.prototype.playerDanmakuBlocktop = false;

                        /**
                         * DanmuDefaultPlayerConfig playerDanmakuBlockscroll.
                         * @member {boolean} playerDanmakuBlockscroll
                         * @memberof bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig
                         * @instance
                         */
                        DanmuDefaultPlayerConfig.prototype.playerDanmakuBlockscroll = false;

                        /**
                         * DanmuDefaultPlayerConfig playerDanmakuBlockbottom.
                         * @member {boolean} playerDanmakuBlockbottom
                         * @memberof bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig
                         * @instance
                         */
                        DanmuDefaultPlayerConfig.prototype.playerDanmakuBlockbottom = false;

                        /**
                         * DanmuDefaultPlayerConfig playerDanmakuBlockcolorful.
                         * @member {boolean} playerDanmakuBlockcolorful
                         * @memberof bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig
                         * @instance
                         */
                        DanmuDefaultPlayerConfig.prototype.playerDanmakuBlockcolorful = false;

                        /**
                         * DanmuDefaultPlayerConfig playerDanmakuBlockrepeat.
                         * @member {boolean} playerDanmakuBlockrepeat
                         * @memberof bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig
                         * @instance
                         */
                        DanmuDefaultPlayerConfig.prototype.playerDanmakuBlockrepeat = false;

                        /**
                         * DanmuDefaultPlayerConfig playerDanmakuBlockspecial.
                         * @member {boolean} playerDanmakuBlockspecial
                         * @memberof bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig
                         * @instance
                         */
                        DanmuDefaultPlayerConfig.prototype.playerDanmakuBlockspecial = false;

                        /**
                         * DanmuDefaultPlayerConfig playerDanmakuOpacity.
                         * @member {number} playerDanmakuOpacity
                         * @memberof bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig
                         * @instance
                         */
                        DanmuDefaultPlayerConfig.prototype.playerDanmakuOpacity = 0;

                        /**
                         * DanmuDefaultPlayerConfig playerDanmakuScalingfactor.
                         * @member {number} playerDanmakuScalingfactor
                         * @memberof bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig
                         * @instance
                         */
                        DanmuDefaultPlayerConfig.prototype.playerDanmakuScalingfactor = 0;

                        /**
                         * DanmuDefaultPlayerConfig playerDanmakuDomain.
                         * @member {number} playerDanmakuDomain
                         * @memberof bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig
                         * @instance
                         */
                        DanmuDefaultPlayerConfig.prototype.playerDanmakuDomain = 0;

                        /**
                         * DanmuDefaultPlayerConfig playerDanmakuSpeed.
                         * @member {number} playerDanmakuSpeed
                         * @memberof bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig
                         * @instance
                         */
                        DanmuDefaultPlayerConfig.prototype.playerDanmakuSpeed = 0;

                        /**
                         * DanmuDefaultPlayerConfig inlinePlayerDanmakuSwitch.
                         * @member {boolean} inlinePlayerDanmakuSwitch
                         * @memberof bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig
                         * @instance
                         */
                        DanmuDefaultPlayerConfig.prototype.inlinePlayerDanmakuSwitch = false;

                        /**
                         * DanmuDefaultPlayerConfig playerDanmakuSeniorModeSwitch.
                         * @member {number} playerDanmakuSeniorModeSwitch
                         * @memberof bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig
                         * @instance
                         */
                        DanmuDefaultPlayerConfig.prototype.playerDanmakuSeniorModeSwitch = 0;

                        /**
                         * DanmuDefaultPlayerConfig playerDanmakuAiRecommendedLevelV2.
                         * @member {number} playerDanmakuAiRecommendedLevelV2
                         * @memberof bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig
                         * @instance
                         */
                        DanmuDefaultPlayerConfig.prototype.playerDanmakuAiRecommendedLevelV2 = 0;

                        /**
                         * DanmuDefaultPlayerConfig playerDanmakuAiRecommendedLevelV2Map.
                         * @member {Object.<string,number>} playerDanmakuAiRecommendedLevelV2Map
                         * @memberof bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig
                         * @instance
                         */
                        DanmuDefaultPlayerConfig.prototype.playerDanmakuAiRecommendedLevelV2Map = $util.emptyObject;

                        /**
                         * Creates a new DanmuDefaultPlayerConfig instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDanmuDefaultPlayerConfig=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig} DanmuDefaultPlayerConfig instance
                         */
                        DanmuDefaultPlayerConfig.create = function create(properties) {
                            return new DanmuDefaultPlayerConfig(properties);
                        };

                        /**
                         * Encodes the specified DanmuDefaultPlayerConfig message. Does not implicitly {@link bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDanmuDefaultPlayerConfig} message DanmuDefaultPlayerConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DanmuDefaultPlayerConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.playerDanmakuUseDefaultConfig != null && Object.hasOwnProperty.call(message, "playerDanmakuUseDefaultConfig"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.playerDanmakuUseDefaultConfig);
                            if (message.playerDanmakuAiRecommendedSwitch != null && Object.hasOwnProperty.call(message, "playerDanmakuAiRecommendedSwitch"))
                                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.playerDanmakuAiRecommendedSwitch);
                            if (message.playerDanmakuAiRecommendedLevel != null && Object.hasOwnProperty.call(message, "playerDanmakuAiRecommendedLevel"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.playerDanmakuAiRecommendedLevel);
                            if (message.playerDanmakuBlocktop != null && Object.hasOwnProperty.call(message, "playerDanmakuBlocktop"))
                                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.playerDanmakuBlocktop);
                            if (message.playerDanmakuBlockscroll != null && Object.hasOwnProperty.call(message, "playerDanmakuBlockscroll"))
                                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.playerDanmakuBlockscroll);
                            if (message.playerDanmakuBlockbottom != null && Object.hasOwnProperty.call(message, "playerDanmakuBlockbottom"))
                                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.playerDanmakuBlockbottom);
                            if (message.playerDanmakuBlockcolorful != null && Object.hasOwnProperty.call(message, "playerDanmakuBlockcolorful"))
                                writer.uint32(/* id 9, wireType 0 =*/72).bool(message.playerDanmakuBlockcolorful);
                            if (message.playerDanmakuBlockrepeat != null && Object.hasOwnProperty.call(message, "playerDanmakuBlockrepeat"))
                                writer.uint32(/* id 10, wireType 0 =*/80).bool(message.playerDanmakuBlockrepeat);
                            if (message.playerDanmakuBlockspecial != null && Object.hasOwnProperty.call(message, "playerDanmakuBlockspecial"))
                                writer.uint32(/* id 11, wireType 0 =*/88).bool(message.playerDanmakuBlockspecial);
                            if (message.playerDanmakuOpacity != null && Object.hasOwnProperty.call(message, "playerDanmakuOpacity"))
                                writer.uint32(/* id 12, wireType 5 =*/101).float(message.playerDanmakuOpacity);
                            if (message.playerDanmakuScalingfactor != null && Object.hasOwnProperty.call(message, "playerDanmakuScalingfactor"))
                                writer.uint32(/* id 13, wireType 5 =*/109).float(message.playerDanmakuScalingfactor);
                            if (message.playerDanmakuDomain != null && Object.hasOwnProperty.call(message, "playerDanmakuDomain"))
                                writer.uint32(/* id 14, wireType 5 =*/117).float(message.playerDanmakuDomain);
                            if (message.playerDanmakuSpeed != null && Object.hasOwnProperty.call(message, "playerDanmakuSpeed"))
                                writer.uint32(/* id 15, wireType 0 =*/120).int32(message.playerDanmakuSpeed);
                            if (message.inlinePlayerDanmakuSwitch != null && Object.hasOwnProperty.call(message, "inlinePlayerDanmakuSwitch"))
                                writer.uint32(/* id 16, wireType 0 =*/128).bool(message.inlinePlayerDanmakuSwitch);
                            if (message.playerDanmakuSeniorModeSwitch != null && Object.hasOwnProperty.call(message, "playerDanmakuSeniorModeSwitch"))
                                writer.uint32(/* id 17, wireType 0 =*/136).int32(message.playerDanmakuSeniorModeSwitch);
                            if (message.playerDanmakuAiRecommendedLevelV2 != null && Object.hasOwnProperty.call(message, "playerDanmakuAiRecommendedLevelV2"))
                                writer.uint32(/* id 18, wireType 0 =*/144).int32(message.playerDanmakuAiRecommendedLevelV2);
                            if (message.playerDanmakuAiRecommendedLevelV2Map != null && Object.hasOwnProperty.call(message, "playerDanmakuAiRecommendedLevelV2Map"))
                                for (let keys = Object.keys(message.playerDanmakuAiRecommendedLevelV2Map), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 19, wireType 2 =*/154).fork().uint32(/* id 1, wireType 0 =*/8).int32(keys[i]).uint32(/* id 2, wireType 0 =*/16).int32(message.playerDanmakuAiRecommendedLevelV2Map[keys[i]]).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified DanmuDefaultPlayerConfig message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDanmuDefaultPlayerConfig} message DanmuDefaultPlayerConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DanmuDefaultPlayerConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a DanmuDefaultPlayerConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig} DanmuDefaultPlayerConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DanmuDefaultPlayerConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig(), key, value;
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.playerDanmakuUseDefaultConfig = reader.bool();
                                        break;
                                    }
                                case 4: {
                                        message.playerDanmakuAiRecommendedSwitch = reader.bool();
                                        break;
                                    }
                                case 5: {
                                        message.playerDanmakuAiRecommendedLevel = reader.int32();
                                        break;
                                    }
                                case 6: {
                                        message.playerDanmakuBlocktop = reader.bool();
                                        break;
                                    }
                                case 7: {
                                        message.playerDanmakuBlockscroll = reader.bool();
                                        break;
                                    }
                                case 8: {
                                        message.playerDanmakuBlockbottom = reader.bool();
                                        break;
                                    }
                                case 9: {
                                        message.playerDanmakuBlockcolorful = reader.bool();
                                        break;
                                    }
                                case 10: {
                                        message.playerDanmakuBlockrepeat = reader.bool();
                                        break;
                                    }
                                case 11: {
                                        message.playerDanmakuBlockspecial = reader.bool();
                                        break;
                                    }
                                case 12: {
                                        message.playerDanmakuOpacity = reader.float();
                                        break;
                                    }
                                case 13: {
                                        message.playerDanmakuScalingfactor = reader.float();
                                        break;
                                    }
                                case 14: {
                                        message.playerDanmakuDomain = reader.float();
                                        break;
                                    }
                                case 15: {
                                        message.playerDanmakuSpeed = reader.int32();
                                        break;
                                    }
                                case 16: {
                                        message.inlinePlayerDanmakuSwitch = reader.bool();
                                        break;
                                    }
                                case 17: {
                                        message.playerDanmakuSeniorModeSwitch = reader.int32();
                                        break;
                                    }
                                case 18: {
                                        message.playerDanmakuAiRecommendedLevelV2 = reader.int32();
                                        break;
                                    }
                                case 19: {
                                        if (message.playerDanmakuAiRecommendedLevelV2Map === $util.emptyObject)
                                            message.playerDanmakuAiRecommendedLevelV2Map = {};
                                        let end2 = reader.uint32() + reader.pos;
                                        key = 0;
                                        value = 0;
                                        while (reader.pos < end2) {
                                            let tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.int32();
                                                break;
                                            case 2:
                                                value = reader.int32();
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.playerDanmakuAiRecommendedLevelV2Map[key] = value;
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a DanmuDefaultPlayerConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig} DanmuDefaultPlayerConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DanmuDefaultPlayerConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a DanmuDefaultPlayerConfig message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DanmuDefaultPlayerConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.playerDanmakuUseDefaultConfig != null && message.hasOwnProperty("playerDanmakuUseDefaultConfig"))
                                if (typeof message.playerDanmakuUseDefaultConfig !== "boolean")
                                    return "playerDanmakuUseDefaultConfig: boolean expected";
                            if (message.playerDanmakuAiRecommendedSwitch != null && message.hasOwnProperty("playerDanmakuAiRecommendedSwitch"))
                                if (typeof message.playerDanmakuAiRecommendedSwitch !== "boolean")
                                    return "playerDanmakuAiRecommendedSwitch: boolean expected";
                            if (message.playerDanmakuAiRecommendedLevel != null && message.hasOwnProperty("playerDanmakuAiRecommendedLevel"))
                                if (!$util.isInteger(message.playerDanmakuAiRecommendedLevel))
                                    return "playerDanmakuAiRecommendedLevel: integer expected";
                            if (message.playerDanmakuBlocktop != null && message.hasOwnProperty("playerDanmakuBlocktop"))
                                if (typeof message.playerDanmakuBlocktop !== "boolean")
                                    return "playerDanmakuBlocktop: boolean expected";
                            if (message.playerDanmakuBlockscroll != null && message.hasOwnProperty("playerDanmakuBlockscroll"))
                                if (typeof message.playerDanmakuBlockscroll !== "boolean")
                                    return "playerDanmakuBlockscroll: boolean expected";
                            if (message.playerDanmakuBlockbottom != null && message.hasOwnProperty("playerDanmakuBlockbottom"))
                                if (typeof message.playerDanmakuBlockbottom !== "boolean")
                                    return "playerDanmakuBlockbottom: boolean expected";
                            if (message.playerDanmakuBlockcolorful != null && message.hasOwnProperty("playerDanmakuBlockcolorful"))
                                if (typeof message.playerDanmakuBlockcolorful !== "boolean")
                                    return "playerDanmakuBlockcolorful: boolean expected";
                            if (message.playerDanmakuBlockrepeat != null && message.hasOwnProperty("playerDanmakuBlockrepeat"))
                                if (typeof message.playerDanmakuBlockrepeat !== "boolean")
                                    return "playerDanmakuBlockrepeat: boolean expected";
                            if (message.playerDanmakuBlockspecial != null && message.hasOwnProperty("playerDanmakuBlockspecial"))
                                if (typeof message.playerDanmakuBlockspecial !== "boolean")
                                    return "playerDanmakuBlockspecial: boolean expected";
                            if (message.playerDanmakuOpacity != null && message.hasOwnProperty("playerDanmakuOpacity"))
                                if (typeof message.playerDanmakuOpacity !== "number")
                                    return "playerDanmakuOpacity: number expected";
                            if (message.playerDanmakuScalingfactor != null && message.hasOwnProperty("playerDanmakuScalingfactor"))
                                if (typeof message.playerDanmakuScalingfactor !== "number")
                                    return "playerDanmakuScalingfactor: number expected";
                            if (message.playerDanmakuDomain != null && message.hasOwnProperty("playerDanmakuDomain"))
                                if (typeof message.playerDanmakuDomain !== "number")
                                    return "playerDanmakuDomain: number expected";
                            if (message.playerDanmakuSpeed != null && message.hasOwnProperty("playerDanmakuSpeed"))
                                if (!$util.isInteger(message.playerDanmakuSpeed))
                                    return "playerDanmakuSpeed: integer expected";
                            if (message.inlinePlayerDanmakuSwitch != null && message.hasOwnProperty("inlinePlayerDanmakuSwitch"))
                                if (typeof message.inlinePlayerDanmakuSwitch !== "boolean")
                                    return "inlinePlayerDanmakuSwitch: boolean expected";
                            if (message.playerDanmakuSeniorModeSwitch != null && message.hasOwnProperty("playerDanmakuSeniorModeSwitch"))
                                if (!$util.isInteger(message.playerDanmakuSeniorModeSwitch))
                                    return "playerDanmakuSeniorModeSwitch: integer expected";
                            if (message.playerDanmakuAiRecommendedLevelV2 != null && message.hasOwnProperty("playerDanmakuAiRecommendedLevelV2"))
                                if (!$util.isInteger(message.playerDanmakuAiRecommendedLevelV2))
                                    return "playerDanmakuAiRecommendedLevelV2: integer expected";
                            if (message.playerDanmakuAiRecommendedLevelV2Map != null && message.hasOwnProperty("playerDanmakuAiRecommendedLevelV2Map")) {
                                if (!$util.isObject(message.playerDanmakuAiRecommendedLevelV2Map))
                                    return "playerDanmakuAiRecommendedLevelV2Map: object expected";
                                let key = Object.keys(message.playerDanmakuAiRecommendedLevelV2Map);
                                for (let i = 0; i < key.length; ++i) {
                                    if (!$util.key32Re.test(key[i]))
                                        return "playerDanmakuAiRecommendedLevelV2Map: integer key{k:int32} expected";
                                    if (!$util.isInteger(message.playerDanmakuAiRecommendedLevelV2Map[key[i]]))
                                        return "playerDanmakuAiRecommendedLevelV2Map: integer{k:int32} expected";
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates a DanmuDefaultPlayerConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig} DanmuDefaultPlayerConfig
                         */
                        DanmuDefaultPlayerConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig();
                            if (object.playerDanmakuUseDefaultConfig != null)
                                message.playerDanmakuUseDefaultConfig = Boolean(object.playerDanmakuUseDefaultConfig);
                            if (object.playerDanmakuAiRecommendedSwitch != null)
                                message.playerDanmakuAiRecommendedSwitch = Boolean(object.playerDanmakuAiRecommendedSwitch);
                            if (object.playerDanmakuAiRecommendedLevel != null)
                                message.playerDanmakuAiRecommendedLevel = object.playerDanmakuAiRecommendedLevel | 0;
                            if (object.playerDanmakuBlocktop != null)
                                message.playerDanmakuBlocktop = Boolean(object.playerDanmakuBlocktop);
                            if (object.playerDanmakuBlockscroll != null)
                                message.playerDanmakuBlockscroll = Boolean(object.playerDanmakuBlockscroll);
                            if (object.playerDanmakuBlockbottom != null)
                                message.playerDanmakuBlockbottom = Boolean(object.playerDanmakuBlockbottom);
                            if (object.playerDanmakuBlockcolorful != null)
                                message.playerDanmakuBlockcolorful = Boolean(object.playerDanmakuBlockcolorful);
                            if (object.playerDanmakuBlockrepeat != null)
                                message.playerDanmakuBlockrepeat = Boolean(object.playerDanmakuBlockrepeat);
                            if (object.playerDanmakuBlockspecial != null)
                                message.playerDanmakuBlockspecial = Boolean(object.playerDanmakuBlockspecial);
                            if (object.playerDanmakuOpacity != null)
                                message.playerDanmakuOpacity = Number(object.playerDanmakuOpacity);
                            if (object.playerDanmakuScalingfactor != null)
                                message.playerDanmakuScalingfactor = Number(object.playerDanmakuScalingfactor);
                            if (object.playerDanmakuDomain != null)
                                message.playerDanmakuDomain = Number(object.playerDanmakuDomain);
                            if (object.playerDanmakuSpeed != null)
                                message.playerDanmakuSpeed = object.playerDanmakuSpeed | 0;
                            if (object.inlinePlayerDanmakuSwitch != null)
                                message.inlinePlayerDanmakuSwitch = Boolean(object.inlinePlayerDanmakuSwitch);
                            if (object.playerDanmakuSeniorModeSwitch != null)
                                message.playerDanmakuSeniorModeSwitch = object.playerDanmakuSeniorModeSwitch | 0;
                            if (object.playerDanmakuAiRecommendedLevelV2 != null)
                                message.playerDanmakuAiRecommendedLevelV2 = object.playerDanmakuAiRecommendedLevelV2 | 0;
                            if (object.playerDanmakuAiRecommendedLevelV2Map) {
                                if (typeof object.playerDanmakuAiRecommendedLevelV2Map !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.playerDanmakuAiRecommendedLevelV2Map: object expected");
                                message.playerDanmakuAiRecommendedLevelV2Map = {};
                                for (let keys = Object.keys(object.playerDanmakuAiRecommendedLevelV2Map), i = 0; i < keys.length; ++i)
                                    message.playerDanmakuAiRecommendedLevelV2Map[keys[i]] = object.playerDanmakuAiRecommendedLevelV2Map[keys[i]] | 0;
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a DanmuDefaultPlayerConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig} message DanmuDefaultPlayerConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DanmuDefaultPlayerConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.objects || options.defaults)
                                object.playerDanmakuAiRecommendedLevelV2Map = {};
                            if (options.defaults) {
                                object.playerDanmakuUseDefaultConfig = false;
                                object.playerDanmakuAiRecommendedSwitch = false;
                                object.playerDanmakuAiRecommendedLevel = 0;
                                object.playerDanmakuBlocktop = false;
                                object.playerDanmakuBlockscroll = false;
                                object.playerDanmakuBlockbottom = false;
                                object.playerDanmakuBlockcolorful = false;
                                object.playerDanmakuBlockrepeat = false;
                                object.playerDanmakuBlockspecial = false;
                                object.playerDanmakuOpacity = 0;
                                object.playerDanmakuScalingfactor = 0;
                                object.playerDanmakuDomain = 0;
                                object.playerDanmakuSpeed = 0;
                                object.inlinePlayerDanmakuSwitch = false;
                                object.playerDanmakuSeniorModeSwitch = 0;
                                object.playerDanmakuAiRecommendedLevelV2 = 0;
                            }
                            if (message.playerDanmakuUseDefaultConfig != null && message.hasOwnProperty("playerDanmakuUseDefaultConfig"))
                                object.playerDanmakuUseDefaultConfig = message.playerDanmakuUseDefaultConfig;
                            if (message.playerDanmakuAiRecommendedSwitch != null && message.hasOwnProperty("playerDanmakuAiRecommendedSwitch"))
                                object.playerDanmakuAiRecommendedSwitch = message.playerDanmakuAiRecommendedSwitch;
                            if (message.playerDanmakuAiRecommendedLevel != null && message.hasOwnProperty("playerDanmakuAiRecommendedLevel"))
                                object.playerDanmakuAiRecommendedLevel = message.playerDanmakuAiRecommendedLevel;
                            if (message.playerDanmakuBlocktop != null && message.hasOwnProperty("playerDanmakuBlocktop"))
                                object.playerDanmakuBlocktop = message.playerDanmakuBlocktop;
                            if (message.playerDanmakuBlockscroll != null && message.hasOwnProperty("playerDanmakuBlockscroll"))
                                object.playerDanmakuBlockscroll = message.playerDanmakuBlockscroll;
                            if (message.playerDanmakuBlockbottom != null && message.hasOwnProperty("playerDanmakuBlockbottom"))
                                object.playerDanmakuBlockbottom = message.playerDanmakuBlockbottom;
                            if (message.playerDanmakuBlockcolorful != null && message.hasOwnProperty("playerDanmakuBlockcolorful"))
                                object.playerDanmakuBlockcolorful = message.playerDanmakuBlockcolorful;
                            if (message.playerDanmakuBlockrepeat != null && message.hasOwnProperty("playerDanmakuBlockrepeat"))
                                object.playerDanmakuBlockrepeat = message.playerDanmakuBlockrepeat;
                            if (message.playerDanmakuBlockspecial != null && message.hasOwnProperty("playerDanmakuBlockspecial"))
                                object.playerDanmakuBlockspecial = message.playerDanmakuBlockspecial;
                            if (message.playerDanmakuOpacity != null && message.hasOwnProperty("playerDanmakuOpacity"))
                                object.playerDanmakuOpacity = options.json && !isFinite(message.playerDanmakuOpacity) ? String(message.playerDanmakuOpacity) : message.playerDanmakuOpacity;
                            if (message.playerDanmakuScalingfactor != null && message.hasOwnProperty("playerDanmakuScalingfactor"))
                                object.playerDanmakuScalingfactor = options.json && !isFinite(message.playerDanmakuScalingfactor) ? String(message.playerDanmakuScalingfactor) : message.playerDanmakuScalingfactor;
                            if (message.playerDanmakuDomain != null && message.hasOwnProperty("playerDanmakuDomain"))
                                object.playerDanmakuDomain = options.json && !isFinite(message.playerDanmakuDomain) ? String(message.playerDanmakuDomain) : message.playerDanmakuDomain;
                            if (message.playerDanmakuSpeed != null && message.hasOwnProperty("playerDanmakuSpeed"))
                                object.playerDanmakuSpeed = message.playerDanmakuSpeed;
                            if (message.inlinePlayerDanmakuSwitch != null && message.hasOwnProperty("inlinePlayerDanmakuSwitch"))
                                object.inlinePlayerDanmakuSwitch = message.inlinePlayerDanmakuSwitch;
                            if (message.playerDanmakuSeniorModeSwitch != null && message.hasOwnProperty("playerDanmakuSeniorModeSwitch"))
                                object.playerDanmakuSeniorModeSwitch = message.playerDanmakuSeniorModeSwitch;
                            if (message.playerDanmakuAiRecommendedLevelV2 != null && message.hasOwnProperty("playerDanmakuAiRecommendedLevelV2"))
                                object.playerDanmakuAiRecommendedLevelV2 = message.playerDanmakuAiRecommendedLevelV2;
                            let keys2;
                            if (message.playerDanmakuAiRecommendedLevelV2Map && (keys2 = Object.keys(message.playerDanmakuAiRecommendedLevelV2Map)).length) {
                                object.playerDanmakuAiRecommendedLevelV2Map = {};
                                for (let j = 0; j < keys2.length; ++j)
                                    object.playerDanmakuAiRecommendedLevelV2Map[keys2[j]] = message.playerDanmakuAiRecommendedLevelV2Map[keys2[j]];
                            }
                            return object;
                        };

                        /**
                         * Converts this DanmuDefaultPlayerConfig to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DanmuDefaultPlayerConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for DanmuDefaultPlayerConfig
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DanmuDefaultPlayerConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig";
                        };

                        return DanmuDefaultPlayerConfig;
                    })();

                    v1.DanmuPlayerConfig = (function() {

                        /**
                         * Properties of a DanmuPlayerConfig.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IDanmuPlayerConfig
                         * @property {boolean|null} [playerDanmakuSwitch] DanmuPlayerConfig playerDanmakuSwitch
                         * @property {boolean|null} [playerDanmakuSwitchSave] DanmuPlayerConfig playerDanmakuSwitchSave
                         * @property {boolean|null} [playerDanmakuUseDefaultConfig] DanmuPlayerConfig playerDanmakuUseDefaultConfig
                         * @property {boolean|null} [playerDanmakuAiRecommendedSwitch] DanmuPlayerConfig playerDanmakuAiRecommendedSwitch
                         * @property {number|null} [playerDanmakuAiRecommendedLevel] DanmuPlayerConfig playerDanmakuAiRecommendedLevel
                         * @property {boolean|null} [playerDanmakuBlocktop] DanmuPlayerConfig playerDanmakuBlocktop
                         * @property {boolean|null} [playerDanmakuBlockscroll] DanmuPlayerConfig playerDanmakuBlockscroll
                         * @property {boolean|null} [playerDanmakuBlockbottom] DanmuPlayerConfig playerDanmakuBlockbottom
                         * @property {boolean|null} [playerDanmakuBlockcolorful] DanmuPlayerConfig playerDanmakuBlockcolorful
                         * @property {boolean|null} [playerDanmakuBlockrepeat] DanmuPlayerConfig playerDanmakuBlockrepeat
                         * @property {boolean|null} [playerDanmakuBlockspecial] DanmuPlayerConfig playerDanmakuBlockspecial
                         * @property {number|null} [playerDanmakuOpacity] DanmuPlayerConfig playerDanmakuOpacity
                         * @property {number|null} [playerDanmakuScalingfactor] DanmuPlayerConfig playerDanmakuScalingfactor
                         * @property {number|null} [playerDanmakuDomain] DanmuPlayerConfig playerDanmakuDomain
                         * @property {number|null} [playerDanmakuSpeed] DanmuPlayerConfig playerDanmakuSpeed
                         * @property {boolean|null} [playerDanmakuEnableblocklist] DanmuPlayerConfig playerDanmakuEnableblocklist
                         * @property {boolean|null} [inlinePlayerDanmakuSwitch] DanmuPlayerConfig inlinePlayerDanmakuSwitch
                         * @property {number|null} [inlinePlayerDanmakuConfig] DanmuPlayerConfig inlinePlayerDanmakuConfig
                         * @property {number|null} [playerDanmakuIosSwitchSave] DanmuPlayerConfig playerDanmakuIosSwitchSave
                         * @property {number|null} [playerDanmakuSeniorModeSwitch] DanmuPlayerConfig playerDanmakuSeniorModeSwitch
                         * @property {number|null} [playerDanmakuAiRecommendedLevelV2] DanmuPlayerConfig playerDanmakuAiRecommendedLevelV2
                         * @property {Object.<string,number>|null} [playerDanmakuAiRecommendedLevelV2Map] DanmuPlayerConfig playerDanmakuAiRecommendedLevelV2Map
                         */

                        /**
                         * Constructs a new DanmuPlayerConfig.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a DanmuPlayerConfig.
                         * @implements IDanmuPlayerConfig
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IDanmuPlayerConfig=} [properties] Properties to set
                         */
                        function DanmuPlayerConfig(properties) {
                            this.playerDanmakuAiRecommendedLevelV2Map = {};
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * DanmuPlayerConfig playerDanmakuSwitch.
                         * @member {boolean} playerDanmakuSwitch
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfig
                         * @instance
                         */
                        DanmuPlayerConfig.prototype.playerDanmakuSwitch = false;

                        /**
                         * DanmuPlayerConfig playerDanmakuSwitchSave.
                         * @member {boolean} playerDanmakuSwitchSave
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfig
                         * @instance
                         */
                        DanmuPlayerConfig.prototype.playerDanmakuSwitchSave = false;

                        /**
                         * DanmuPlayerConfig playerDanmakuUseDefaultConfig.
                         * @member {boolean} playerDanmakuUseDefaultConfig
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfig
                         * @instance
                         */
                        DanmuPlayerConfig.prototype.playerDanmakuUseDefaultConfig = false;

                        /**
                         * DanmuPlayerConfig playerDanmakuAiRecommendedSwitch.
                         * @member {boolean} playerDanmakuAiRecommendedSwitch
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfig
                         * @instance
                         */
                        DanmuPlayerConfig.prototype.playerDanmakuAiRecommendedSwitch = false;

                        /**
                         * DanmuPlayerConfig playerDanmakuAiRecommendedLevel.
                         * @member {number} playerDanmakuAiRecommendedLevel
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfig
                         * @instance
                         */
                        DanmuPlayerConfig.prototype.playerDanmakuAiRecommendedLevel = 0;

                        /**
                         * DanmuPlayerConfig playerDanmakuBlocktop.
                         * @member {boolean} playerDanmakuBlocktop
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfig
                         * @instance
                         */
                        DanmuPlayerConfig.prototype.playerDanmakuBlocktop = false;

                        /**
                         * DanmuPlayerConfig playerDanmakuBlockscroll.
                         * @member {boolean} playerDanmakuBlockscroll
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfig
                         * @instance
                         */
                        DanmuPlayerConfig.prototype.playerDanmakuBlockscroll = false;

                        /**
                         * DanmuPlayerConfig playerDanmakuBlockbottom.
                         * @member {boolean} playerDanmakuBlockbottom
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfig
                         * @instance
                         */
                        DanmuPlayerConfig.prototype.playerDanmakuBlockbottom = false;

                        /**
                         * DanmuPlayerConfig playerDanmakuBlockcolorful.
                         * @member {boolean} playerDanmakuBlockcolorful
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfig
                         * @instance
                         */
                        DanmuPlayerConfig.prototype.playerDanmakuBlockcolorful = false;

                        /**
                         * DanmuPlayerConfig playerDanmakuBlockrepeat.
                         * @member {boolean} playerDanmakuBlockrepeat
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfig
                         * @instance
                         */
                        DanmuPlayerConfig.prototype.playerDanmakuBlockrepeat = false;

                        /**
                         * DanmuPlayerConfig playerDanmakuBlockspecial.
                         * @member {boolean} playerDanmakuBlockspecial
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfig
                         * @instance
                         */
                        DanmuPlayerConfig.prototype.playerDanmakuBlockspecial = false;

                        /**
                         * DanmuPlayerConfig playerDanmakuOpacity.
                         * @member {number} playerDanmakuOpacity
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfig
                         * @instance
                         */
                        DanmuPlayerConfig.prototype.playerDanmakuOpacity = 0;

                        /**
                         * DanmuPlayerConfig playerDanmakuScalingfactor.
                         * @member {number} playerDanmakuScalingfactor
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfig
                         * @instance
                         */
                        DanmuPlayerConfig.prototype.playerDanmakuScalingfactor = 0;

                        /**
                         * DanmuPlayerConfig playerDanmakuDomain.
                         * @member {number} playerDanmakuDomain
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfig
                         * @instance
                         */
                        DanmuPlayerConfig.prototype.playerDanmakuDomain = 0;

                        /**
                         * DanmuPlayerConfig playerDanmakuSpeed.
                         * @member {number} playerDanmakuSpeed
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfig
                         * @instance
                         */
                        DanmuPlayerConfig.prototype.playerDanmakuSpeed = 0;

                        /**
                         * DanmuPlayerConfig playerDanmakuEnableblocklist.
                         * @member {boolean} playerDanmakuEnableblocklist
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfig
                         * @instance
                         */
                        DanmuPlayerConfig.prototype.playerDanmakuEnableblocklist = false;

                        /**
                         * DanmuPlayerConfig inlinePlayerDanmakuSwitch.
                         * @member {boolean} inlinePlayerDanmakuSwitch
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfig
                         * @instance
                         */
                        DanmuPlayerConfig.prototype.inlinePlayerDanmakuSwitch = false;

                        /**
                         * DanmuPlayerConfig inlinePlayerDanmakuConfig.
                         * @member {number} inlinePlayerDanmakuConfig
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfig
                         * @instance
                         */
                        DanmuPlayerConfig.prototype.inlinePlayerDanmakuConfig = 0;

                        /**
                         * DanmuPlayerConfig playerDanmakuIosSwitchSave.
                         * @member {number} playerDanmakuIosSwitchSave
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfig
                         * @instance
                         */
                        DanmuPlayerConfig.prototype.playerDanmakuIosSwitchSave = 0;

                        /**
                         * DanmuPlayerConfig playerDanmakuSeniorModeSwitch.
                         * @member {number} playerDanmakuSeniorModeSwitch
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfig
                         * @instance
                         */
                        DanmuPlayerConfig.prototype.playerDanmakuSeniorModeSwitch = 0;

                        /**
                         * DanmuPlayerConfig playerDanmakuAiRecommendedLevelV2.
                         * @member {number} playerDanmakuAiRecommendedLevelV2
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfig
                         * @instance
                         */
                        DanmuPlayerConfig.prototype.playerDanmakuAiRecommendedLevelV2 = 0;

                        /**
                         * DanmuPlayerConfig playerDanmakuAiRecommendedLevelV2Map.
                         * @member {Object.<string,number>} playerDanmakuAiRecommendedLevelV2Map
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfig
                         * @instance
                         */
                        DanmuPlayerConfig.prototype.playerDanmakuAiRecommendedLevelV2Map = $util.emptyObject;

                        /**
                         * Creates a new DanmuPlayerConfig instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDanmuPlayerConfig=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.DanmuPlayerConfig} DanmuPlayerConfig instance
                         */
                        DanmuPlayerConfig.create = function create(properties) {
                            return new DanmuPlayerConfig(properties);
                        };

                        /**
                         * Encodes the specified DanmuPlayerConfig message. Does not implicitly {@link bilibili.community.service.dm.v1.DanmuPlayerConfig.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDanmuPlayerConfig} message DanmuPlayerConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DanmuPlayerConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.playerDanmakuSwitch != null && Object.hasOwnProperty.call(message, "playerDanmakuSwitch"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.playerDanmakuSwitch);
                            if (message.playerDanmakuSwitchSave != null && Object.hasOwnProperty.call(message, "playerDanmakuSwitchSave"))
                                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.playerDanmakuSwitchSave);
                            if (message.playerDanmakuUseDefaultConfig != null && Object.hasOwnProperty.call(message, "playerDanmakuUseDefaultConfig"))
                                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.playerDanmakuUseDefaultConfig);
                            if (message.playerDanmakuAiRecommendedSwitch != null && Object.hasOwnProperty.call(message, "playerDanmakuAiRecommendedSwitch"))
                                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.playerDanmakuAiRecommendedSwitch);
                            if (message.playerDanmakuAiRecommendedLevel != null && Object.hasOwnProperty.call(message, "playerDanmakuAiRecommendedLevel"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.playerDanmakuAiRecommendedLevel);
                            if (message.playerDanmakuBlocktop != null && Object.hasOwnProperty.call(message, "playerDanmakuBlocktop"))
                                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.playerDanmakuBlocktop);
                            if (message.playerDanmakuBlockscroll != null && Object.hasOwnProperty.call(message, "playerDanmakuBlockscroll"))
                                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.playerDanmakuBlockscroll);
                            if (message.playerDanmakuBlockbottom != null && Object.hasOwnProperty.call(message, "playerDanmakuBlockbottom"))
                                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.playerDanmakuBlockbottom);
                            if (message.playerDanmakuBlockcolorful != null && Object.hasOwnProperty.call(message, "playerDanmakuBlockcolorful"))
                                writer.uint32(/* id 9, wireType 0 =*/72).bool(message.playerDanmakuBlockcolorful);
                            if (message.playerDanmakuBlockrepeat != null && Object.hasOwnProperty.call(message, "playerDanmakuBlockrepeat"))
                                writer.uint32(/* id 10, wireType 0 =*/80).bool(message.playerDanmakuBlockrepeat);
                            if (message.playerDanmakuBlockspecial != null && Object.hasOwnProperty.call(message, "playerDanmakuBlockspecial"))
                                writer.uint32(/* id 11, wireType 0 =*/88).bool(message.playerDanmakuBlockspecial);
                            if (message.playerDanmakuOpacity != null && Object.hasOwnProperty.call(message, "playerDanmakuOpacity"))
                                writer.uint32(/* id 12, wireType 5 =*/101).float(message.playerDanmakuOpacity);
                            if (message.playerDanmakuScalingfactor != null && Object.hasOwnProperty.call(message, "playerDanmakuScalingfactor"))
                                writer.uint32(/* id 13, wireType 5 =*/109).float(message.playerDanmakuScalingfactor);
                            if (message.playerDanmakuDomain != null && Object.hasOwnProperty.call(message, "playerDanmakuDomain"))
                                writer.uint32(/* id 14, wireType 5 =*/117).float(message.playerDanmakuDomain);
                            if (message.playerDanmakuSpeed != null && Object.hasOwnProperty.call(message, "playerDanmakuSpeed"))
                                writer.uint32(/* id 15, wireType 0 =*/120).int32(message.playerDanmakuSpeed);
                            if (message.playerDanmakuEnableblocklist != null && Object.hasOwnProperty.call(message, "playerDanmakuEnableblocklist"))
                                writer.uint32(/* id 16, wireType 0 =*/128).bool(message.playerDanmakuEnableblocklist);
                            if (message.inlinePlayerDanmakuSwitch != null && Object.hasOwnProperty.call(message, "inlinePlayerDanmakuSwitch"))
                                writer.uint32(/* id 17, wireType 0 =*/136).bool(message.inlinePlayerDanmakuSwitch);
                            if (message.inlinePlayerDanmakuConfig != null && Object.hasOwnProperty.call(message, "inlinePlayerDanmakuConfig"))
                                writer.uint32(/* id 18, wireType 0 =*/144).int32(message.inlinePlayerDanmakuConfig);
                            if (message.playerDanmakuIosSwitchSave != null && Object.hasOwnProperty.call(message, "playerDanmakuIosSwitchSave"))
                                writer.uint32(/* id 19, wireType 0 =*/152).int32(message.playerDanmakuIosSwitchSave);
                            if (message.playerDanmakuSeniorModeSwitch != null && Object.hasOwnProperty.call(message, "playerDanmakuSeniorModeSwitch"))
                                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.playerDanmakuSeniorModeSwitch);
                            if (message.playerDanmakuAiRecommendedLevelV2 != null && Object.hasOwnProperty.call(message, "playerDanmakuAiRecommendedLevelV2"))
                                writer.uint32(/* id 21, wireType 0 =*/168).int32(message.playerDanmakuAiRecommendedLevelV2);
                            if (message.playerDanmakuAiRecommendedLevelV2Map != null && Object.hasOwnProperty.call(message, "playerDanmakuAiRecommendedLevelV2Map"))
                                for (let keys = Object.keys(message.playerDanmakuAiRecommendedLevelV2Map), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 22, wireType 2 =*/178).fork().uint32(/* id 1, wireType 0 =*/8).int32(keys[i]).uint32(/* id 2, wireType 0 =*/16).int32(message.playerDanmakuAiRecommendedLevelV2Map[keys[i]]).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified DanmuPlayerConfig message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.DanmuPlayerConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDanmuPlayerConfig} message DanmuPlayerConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DanmuPlayerConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a DanmuPlayerConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.DanmuPlayerConfig} DanmuPlayerConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DanmuPlayerConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.DanmuPlayerConfig(), key, value;
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.playerDanmakuSwitch = reader.bool();
                                        break;
                                    }
                                case 2: {
                                        message.playerDanmakuSwitchSave = reader.bool();
                                        break;
                                    }
                                case 3: {
                                        message.playerDanmakuUseDefaultConfig = reader.bool();
                                        break;
                                    }
                                case 4: {
                                        message.playerDanmakuAiRecommendedSwitch = reader.bool();
                                        break;
                                    }
                                case 5: {
                                        message.playerDanmakuAiRecommendedLevel = reader.int32();
                                        break;
                                    }
                                case 6: {
                                        message.playerDanmakuBlocktop = reader.bool();
                                        break;
                                    }
                                case 7: {
                                        message.playerDanmakuBlockscroll = reader.bool();
                                        break;
                                    }
                                case 8: {
                                        message.playerDanmakuBlockbottom = reader.bool();
                                        break;
                                    }
                                case 9: {
                                        message.playerDanmakuBlockcolorful = reader.bool();
                                        break;
                                    }
                                case 10: {
                                        message.playerDanmakuBlockrepeat = reader.bool();
                                        break;
                                    }
                                case 11: {
                                        message.playerDanmakuBlockspecial = reader.bool();
                                        break;
                                    }
                                case 12: {
                                        message.playerDanmakuOpacity = reader.float();
                                        break;
                                    }
                                case 13: {
                                        message.playerDanmakuScalingfactor = reader.float();
                                        break;
                                    }
                                case 14: {
                                        message.playerDanmakuDomain = reader.float();
                                        break;
                                    }
                                case 15: {
                                        message.playerDanmakuSpeed = reader.int32();
                                        break;
                                    }
                                case 16: {
                                        message.playerDanmakuEnableblocklist = reader.bool();
                                        break;
                                    }
                                case 17: {
                                        message.inlinePlayerDanmakuSwitch = reader.bool();
                                        break;
                                    }
                                case 18: {
                                        message.inlinePlayerDanmakuConfig = reader.int32();
                                        break;
                                    }
                                case 19: {
                                        message.playerDanmakuIosSwitchSave = reader.int32();
                                        break;
                                    }
                                case 20: {
                                        message.playerDanmakuSeniorModeSwitch = reader.int32();
                                        break;
                                    }
                                case 21: {
                                        message.playerDanmakuAiRecommendedLevelV2 = reader.int32();
                                        break;
                                    }
                                case 22: {
                                        if (message.playerDanmakuAiRecommendedLevelV2Map === $util.emptyObject)
                                            message.playerDanmakuAiRecommendedLevelV2Map = {};
                                        let end2 = reader.uint32() + reader.pos;
                                        key = 0;
                                        value = 0;
                                        while (reader.pos < end2) {
                                            let tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.int32();
                                                break;
                                            case 2:
                                                value = reader.int32();
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.playerDanmakuAiRecommendedLevelV2Map[key] = value;
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a DanmuPlayerConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.DanmuPlayerConfig} DanmuPlayerConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DanmuPlayerConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a DanmuPlayerConfig message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DanmuPlayerConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.playerDanmakuSwitch != null && message.hasOwnProperty("playerDanmakuSwitch"))
                                if (typeof message.playerDanmakuSwitch !== "boolean")
                                    return "playerDanmakuSwitch: boolean expected";
                            if (message.playerDanmakuSwitchSave != null && message.hasOwnProperty("playerDanmakuSwitchSave"))
                                if (typeof message.playerDanmakuSwitchSave !== "boolean")
                                    return "playerDanmakuSwitchSave: boolean expected";
                            if (message.playerDanmakuUseDefaultConfig != null && message.hasOwnProperty("playerDanmakuUseDefaultConfig"))
                                if (typeof message.playerDanmakuUseDefaultConfig !== "boolean")
                                    return "playerDanmakuUseDefaultConfig: boolean expected";
                            if (message.playerDanmakuAiRecommendedSwitch != null && message.hasOwnProperty("playerDanmakuAiRecommendedSwitch"))
                                if (typeof message.playerDanmakuAiRecommendedSwitch !== "boolean")
                                    return "playerDanmakuAiRecommendedSwitch: boolean expected";
                            if (message.playerDanmakuAiRecommendedLevel != null && message.hasOwnProperty("playerDanmakuAiRecommendedLevel"))
                                if (!$util.isInteger(message.playerDanmakuAiRecommendedLevel))
                                    return "playerDanmakuAiRecommendedLevel: integer expected";
                            if (message.playerDanmakuBlocktop != null && message.hasOwnProperty("playerDanmakuBlocktop"))
                                if (typeof message.playerDanmakuBlocktop !== "boolean")
                                    return "playerDanmakuBlocktop: boolean expected";
                            if (message.playerDanmakuBlockscroll != null && message.hasOwnProperty("playerDanmakuBlockscroll"))
                                if (typeof message.playerDanmakuBlockscroll !== "boolean")
                                    return "playerDanmakuBlockscroll: boolean expected";
                            if (message.playerDanmakuBlockbottom != null && message.hasOwnProperty("playerDanmakuBlockbottom"))
                                if (typeof message.playerDanmakuBlockbottom !== "boolean")
                                    return "playerDanmakuBlockbottom: boolean expected";
                            if (message.playerDanmakuBlockcolorful != null && message.hasOwnProperty("playerDanmakuBlockcolorful"))
                                if (typeof message.playerDanmakuBlockcolorful !== "boolean")
                                    return "playerDanmakuBlockcolorful: boolean expected";
                            if (message.playerDanmakuBlockrepeat != null && message.hasOwnProperty("playerDanmakuBlockrepeat"))
                                if (typeof message.playerDanmakuBlockrepeat !== "boolean")
                                    return "playerDanmakuBlockrepeat: boolean expected";
                            if (message.playerDanmakuBlockspecial != null && message.hasOwnProperty("playerDanmakuBlockspecial"))
                                if (typeof message.playerDanmakuBlockspecial !== "boolean")
                                    return "playerDanmakuBlockspecial: boolean expected";
                            if (message.playerDanmakuOpacity != null && message.hasOwnProperty("playerDanmakuOpacity"))
                                if (typeof message.playerDanmakuOpacity !== "number")
                                    return "playerDanmakuOpacity: number expected";
                            if (message.playerDanmakuScalingfactor != null && message.hasOwnProperty("playerDanmakuScalingfactor"))
                                if (typeof message.playerDanmakuScalingfactor !== "number")
                                    return "playerDanmakuScalingfactor: number expected";
                            if (message.playerDanmakuDomain != null && message.hasOwnProperty("playerDanmakuDomain"))
                                if (typeof message.playerDanmakuDomain !== "number")
                                    return "playerDanmakuDomain: number expected";
                            if (message.playerDanmakuSpeed != null && message.hasOwnProperty("playerDanmakuSpeed"))
                                if (!$util.isInteger(message.playerDanmakuSpeed))
                                    return "playerDanmakuSpeed: integer expected";
                            if (message.playerDanmakuEnableblocklist != null && message.hasOwnProperty("playerDanmakuEnableblocklist"))
                                if (typeof message.playerDanmakuEnableblocklist !== "boolean")
                                    return "playerDanmakuEnableblocklist: boolean expected";
                            if (message.inlinePlayerDanmakuSwitch != null && message.hasOwnProperty("inlinePlayerDanmakuSwitch"))
                                if (typeof message.inlinePlayerDanmakuSwitch !== "boolean")
                                    return "inlinePlayerDanmakuSwitch: boolean expected";
                            if (message.inlinePlayerDanmakuConfig != null && message.hasOwnProperty("inlinePlayerDanmakuConfig"))
                                if (!$util.isInteger(message.inlinePlayerDanmakuConfig))
                                    return "inlinePlayerDanmakuConfig: integer expected";
                            if (message.playerDanmakuIosSwitchSave != null && message.hasOwnProperty("playerDanmakuIosSwitchSave"))
                                if (!$util.isInteger(message.playerDanmakuIosSwitchSave))
                                    return "playerDanmakuIosSwitchSave: integer expected";
                            if (message.playerDanmakuSeniorModeSwitch != null && message.hasOwnProperty("playerDanmakuSeniorModeSwitch"))
                                if (!$util.isInteger(message.playerDanmakuSeniorModeSwitch))
                                    return "playerDanmakuSeniorModeSwitch: integer expected";
                            if (message.playerDanmakuAiRecommendedLevelV2 != null && message.hasOwnProperty("playerDanmakuAiRecommendedLevelV2"))
                                if (!$util.isInteger(message.playerDanmakuAiRecommendedLevelV2))
                                    return "playerDanmakuAiRecommendedLevelV2: integer expected";
                            if (message.playerDanmakuAiRecommendedLevelV2Map != null && message.hasOwnProperty("playerDanmakuAiRecommendedLevelV2Map")) {
                                if (!$util.isObject(message.playerDanmakuAiRecommendedLevelV2Map))
                                    return "playerDanmakuAiRecommendedLevelV2Map: object expected";
                                let key = Object.keys(message.playerDanmakuAiRecommendedLevelV2Map);
                                for (let i = 0; i < key.length; ++i) {
                                    if (!$util.key32Re.test(key[i]))
                                        return "playerDanmakuAiRecommendedLevelV2Map: integer key{k:int32} expected";
                                    if (!$util.isInteger(message.playerDanmakuAiRecommendedLevelV2Map[key[i]]))
                                        return "playerDanmakuAiRecommendedLevelV2Map: integer{k:int32} expected";
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates a DanmuPlayerConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.DanmuPlayerConfig} DanmuPlayerConfig
                         */
                        DanmuPlayerConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.DanmuPlayerConfig)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.DanmuPlayerConfig();
                            if (object.playerDanmakuSwitch != null)
                                message.playerDanmakuSwitch = Boolean(object.playerDanmakuSwitch);
                            if (object.playerDanmakuSwitchSave != null)
                                message.playerDanmakuSwitchSave = Boolean(object.playerDanmakuSwitchSave);
                            if (object.playerDanmakuUseDefaultConfig != null)
                                message.playerDanmakuUseDefaultConfig = Boolean(object.playerDanmakuUseDefaultConfig);
                            if (object.playerDanmakuAiRecommendedSwitch != null)
                                message.playerDanmakuAiRecommendedSwitch = Boolean(object.playerDanmakuAiRecommendedSwitch);
                            if (object.playerDanmakuAiRecommendedLevel != null)
                                message.playerDanmakuAiRecommendedLevel = object.playerDanmakuAiRecommendedLevel | 0;
                            if (object.playerDanmakuBlocktop != null)
                                message.playerDanmakuBlocktop = Boolean(object.playerDanmakuBlocktop);
                            if (object.playerDanmakuBlockscroll != null)
                                message.playerDanmakuBlockscroll = Boolean(object.playerDanmakuBlockscroll);
                            if (object.playerDanmakuBlockbottom != null)
                                message.playerDanmakuBlockbottom = Boolean(object.playerDanmakuBlockbottom);
                            if (object.playerDanmakuBlockcolorful != null)
                                message.playerDanmakuBlockcolorful = Boolean(object.playerDanmakuBlockcolorful);
                            if (object.playerDanmakuBlockrepeat != null)
                                message.playerDanmakuBlockrepeat = Boolean(object.playerDanmakuBlockrepeat);
                            if (object.playerDanmakuBlockspecial != null)
                                message.playerDanmakuBlockspecial = Boolean(object.playerDanmakuBlockspecial);
                            if (object.playerDanmakuOpacity != null)
                                message.playerDanmakuOpacity = Number(object.playerDanmakuOpacity);
                            if (object.playerDanmakuScalingfactor != null)
                                message.playerDanmakuScalingfactor = Number(object.playerDanmakuScalingfactor);
                            if (object.playerDanmakuDomain != null)
                                message.playerDanmakuDomain = Number(object.playerDanmakuDomain);
                            if (object.playerDanmakuSpeed != null)
                                message.playerDanmakuSpeed = object.playerDanmakuSpeed | 0;
                            if (object.playerDanmakuEnableblocklist != null)
                                message.playerDanmakuEnableblocklist = Boolean(object.playerDanmakuEnableblocklist);
                            if (object.inlinePlayerDanmakuSwitch != null)
                                message.inlinePlayerDanmakuSwitch = Boolean(object.inlinePlayerDanmakuSwitch);
                            if (object.inlinePlayerDanmakuConfig != null)
                                message.inlinePlayerDanmakuConfig = object.inlinePlayerDanmakuConfig | 0;
                            if (object.playerDanmakuIosSwitchSave != null)
                                message.playerDanmakuIosSwitchSave = object.playerDanmakuIosSwitchSave | 0;
                            if (object.playerDanmakuSeniorModeSwitch != null)
                                message.playerDanmakuSeniorModeSwitch = object.playerDanmakuSeniorModeSwitch | 0;
                            if (object.playerDanmakuAiRecommendedLevelV2 != null)
                                message.playerDanmakuAiRecommendedLevelV2 = object.playerDanmakuAiRecommendedLevelV2 | 0;
                            if (object.playerDanmakuAiRecommendedLevelV2Map) {
                                if (typeof object.playerDanmakuAiRecommendedLevelV2Map !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DanmuPlayerConfig.playerDanmakuAiRecommendedLevelV2Map: object expected");
                                message.playerDanmakuAiRecommendedLevelV2Map = {};
                                for (let keys = Object.keys(object.playerDanmakuAiRecommendedLevelV2Map), i = 0; i < keys.length; ++i)
                                    message.playerDanmakuAiRecommendedLevelV2Map[keys[i]] = object.playerDanmakuAiRecommendedLevelV2Map[keys[i]] | 0;
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a DanmuPlayerConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.DanmuPlayerConfig} message DanmuPlayerConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DanmuPlayerConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.objects || options.defaults)
                                object.playerDanmakuAiRecommendedLevelV2Map = {};
                            if (options.defaults) {
                                object.playerDanmakuSwitch = false;
                                object.playerDanmakuSwitchSave = false;
                                object.playerDanmakuUseDefaultConfig = false;
                                object.playerDanmakuAiRecommendedSwitch = false;
                                object.playerDanmakuAiRecommendedLevel = 0;
                                object.playerDanmakuBlocktop = false;
                                object.playerDanmakuBlockscroll = false;
                                object.playerDanmakuBlockbottom = false;
                                object.playerDanmakuBlockcolorful = false;
                                object.playerDanmakuBlockrepeat = false;
                                object.playerDanmakuBlockspecial = false;
                                object.playerDanmakuOpacity = 0;
                                object.playerDanmakuScalingfactor = 0;
                                object.playerDanmakuDomain = 0;
                                object.playerDanmakuSpeed = 0;
                                object.playerDanmakuEnableblocklist = false;
                                object.inlinePlayerDanmakuSwitch = false;
                                object.inlinePlayerDanmakuConfig = 0;
                                object.playerDanmakuIosSwitchSave = 0;
                                object.playerDanmakuSeniorModeSwitch = 0;
                                object.playerDanmakuAiRecommendedLevelV2 = 0;
                            }
                            if (message.playerDanmakuSwitch != null && message.hasOwnProperty("playerDanmakuSwitch"))
                                object.playerDanmakuSwitch = message.playerDanmakuSwitch;
                            if (message.playerDanmakuSwitchSave != null && message.hasOwnProperty("playerDanmakuSwitchSave"))
                                object.playerDanmakuSwitchSave = message.playerDanmakuSwitchSave;
                            if (message.playerDanmakuUseDefaultConfig != null && message.hasOwnProperty("playerDanmakuUseDefaultConfig"))
                                object.playerDanmakuUseDefaultConfig = message.playerDanmakuUseDefaultConfig;
                            if (message.playerDanmakuAiRecommendedSwitch != null && message.hasOwnProperty("playerDanmakuAiRecommendedSwitch"))
                                object.playerDanmakuAiRecommendedSwitch = message.playerDanmakuAiRecommendedSwitch;
                            if (message.playerDanmakuAiRecommendedLevel != null && message.hasOwnProperty("playerDanmakuAiRecommendedLevel"))
                                object.playerDanmakuAiRecommendedLevel = message.playerDanmakuAiRecommendedLevel;
                            if (message.playerDanmakuBlocktop != null && message.hasOwnProperty("playerDanmakuBlocktop"))
                                object.playerDanmakuBlocktop = message.playerDanmakuBlocktop;
                            if (message.playerDanmakuBlockscroll != null && message.hasOwnProperty("playerDanmakuBlockscroll"))
                                object.playerDanmakuBlockscroll = message.playerDanmakuBlockscroll;
                            if (message.playerDanmakuBlockbottom != null && message.hasOwnProperty("playerDanmakuBlockbottom"))
                                object.playerDanmakuBlockbottom = message.playerDanmakuBlockbottom;
                            if (message.playerDanmakuBlockcolorful != null && message.hasOwnProperty("playerDanmakuBlockcolorful"))
                                object.playerDanmakuBlockcolorful = message.playerDanmakuBlockcolorful;
                            if (message.playerDanmakuBlockrepeat != null && message.hasOwnProperty("playerDanmakuBlockrepeat"))
                                object.playerDanmakuBlockrepeat = message.playerDanmakuBlockrepeat;
                            if (message.playerDanmakuBlockspecial != null && message.hasOwnProperty("playerDanmakuBlockspecial"))
                                object.playerDanmakuBlockspecial = message.playerDanmakuBlockspecial;
                            if (message.playerDanmakuOpacity != null && message.hasOwnProperty("playerDanmakuOpacity"))
                                object.playerDanmakuOpacity = options.json && !isFinite(message.playerDanmakuOpacity) ? String(message.playerDanmakuOpacity) : message.playerDanmakuOpacity;
                            if (message.playerDanmakuScalingfactor != null && message.hasOwnProperty("playerDanmakuScalingfactor"))
                                object.playerDanmakuScalingfactor = options.json && !isFinite(message.playerDanmakuScalingfactor) ? String(message.playerDanmakuScalingfactor) : message.playerDanmakuScalingfactor;
                            if (message.playerDanmakuDomain != null && message.hasOwnProperty("playerDanmakuDomain"))
                                object.playerDanmakuDomain = options.json && !isFinite(message.playerDanmakuDomain) ? String(message.playerDanmakuDomain) : message.playerDanmakuDomain;
                            if (message.playerDanmakuSpeed != null && message.hasOwnProperty("playerDanmakuSpeed"))
                                object.playerDanmakuSpeed = message.playerDanmakuSpeed;
                            if (message.playerDanmakuEnableblocklist != null && message.hasOwnProperty("playerDanmakuEnableblocklist"))
                                object.playerDanmakuEnableblocklist = message.playerDanmakuEnableblocklist;
                            if (message.inlinePlayerDanmakuSwitch != null && message.hasOwnProperty("inlinePlayerDanmakuSwitch"))
                                object.inlinePlayerDanmakuSwitch = message.inlinePlayerDanmakuSwitch;
                            if (message.inlinePlayerDanmakuConfig != null && message.hasOwnProperty("inlinePlayerDanmakuConfig"))
                                object.inlinePlayerDanmakuConfig = message.inlinePlayerDanmakuConfig;
                            if (message.playerDanmakuIosSwitchSave != null && message.hasOwnProperty("playerDanmakuIosSwitchSave"))
                                object.playerDanmakuIosSwitchSave = message.playerDanmakuIosSwitchSave;
                            if (message.playerDanmakuSeniorModeSwitch != null && message.hasOwnProperty("playerDanmakuSeniorModeSwitch"))
                                object.playerDanmakuSeniorModeSwitch = message.playerDanmakuSeniorModeSwitch;
                            if (message.playerDanmakuAiRecommendedLevelV2 != null && message.hasOwnProperty("playerDanmakuAiRecommendedLevelV2"))
                                object.playerDanmakuAiRecommendedLevelV2 = message.playerDanmakuAiRecommendedLevelV2;
                            let keys2;
                            if (message.playerDanmakuAiRecommendedLevelV2Map && (keys2 = Object.keys(message.playerDanmakuAiRecommendedLevelV2Map)).length) {
                                object.playerDanmakuAiRecommendedLevelV2Map = {};
                                for (let j = 0; j < keys2.length; ++j)
                                    object.playerDanmakuAiRecommendedLevelV2Map[keys2[j]] = message.playerDanmakuAiRecommendedLevelV2Map[keys2[j]];
                            }
                            return object;
                        };

                        /**
                         * Converts this DanmuPlayerConfig to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DanmuPlayerConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for DanmuPlayerConfig
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DanmuPlayerConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.DanmuPlayerConfig";
                        };

                        return DanmuPlayerConfig;
                    })();

                    v1.DanmuPlayerConfigPanel = (function() {

                        /**
                         * Properties of a DanmuPlayerConfigPanel.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IDanmuPlayerConfigPanel
                         * @property {string|null} [selectionText] DanmuPlayerConfigPanel selectionText
                         */

                        /**
                         * Constructs a new DanmuPlayerConfigPanel.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a DanmuPlayerConfigPanel.
                         * @implements IDanmuPlayerConfigPanel
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IDanmuPlayerConfigPanel=} [properties] Properties to set
                         */
                        function DanmuPlayerConfigPanel(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * DanmuPlayerConfigPanel selectionText.
                         * @member {string} selectionText
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfigPanel
                         * @instance
                         */
                        DanmuPlayerConfigPanel.prototype.selectionText = "";

                        /**
                         * Creates a new DanmuPlayerConfigPanel instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfigPanel
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDanmuPlayerConfigPanel=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.DanmuPlayerConfigPanel} DanmuPlayerConfigPanel instance
                         */
                        DanmuPlayerConfigPanel.create = function create(properties) {
                            return new DanmuPlayerConfigPanel(properties);
                        };

                        /**
                         * Encodes the specified DanmuPlayerConfigPanel message. Does not implicitly {@link bilibili.community.service.dm.v1.DanmuPlayerConfigPanel.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfigPanel
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDanmuPlayerConfigPanel} message DanmuPlayerConfigPanel message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DanmuPlayerConfigPanel.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.selectionText != null && Object.hasOwnProperty.call(message, "selectionText"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.selectionText);
                            return writer;
                        };

                        /**
                         * Encodes the specified DanmuPlayerConfigPanel message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.DanmuPlayerConfigPanel.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfigPanel
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDanmuPlayerConfigPanel} message DanmuPlayerConfigPanel message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DanmuPlayerConfigPanel.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a DanmuPlayerConfigPanel message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfigPanel
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.DanmuPlayerConfigPanel} DanmuPlayerConfigPanel
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DanmuPlayerConfigPanel.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.DanmuPlayerConfigPanel();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.selectionText = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a DanmuPlayerConfigPanel message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfigPanel
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.DanmuPlayerConfigPanel} DanmuPlayerConfigPanel
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DanmuPlayerConfigPanel.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a DanmuPlayerConfigPanel message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfigPanel
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DanmuPlayerConfigPanel.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.selectionText != null && message.hasOwnProperty("selectionText"))
                                if (!$util.isString(message.selectionText))
                                    return "selectionText: string expected";
                            return null;
                        };

                        /**
                         * Creates a DanmuPlayerConfigPanel message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfigPanel
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.DanmuPlayerConfigPanel} DanmuPlayerConfigPanel
                         */
                        DanmuPlayerConfigPanel.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.DanmuPlayerConfigPanel)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.DanmuPlayerConfigPanel();
                            if (object.selectionText != null)
                                message.selectionText = String(object.selectionText);
                            return message;
                        };

                        /**
                         * Creates a plain object from a DanmuPlayerConfigPanel message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfigPanel
                         * @static
                         * @param {bilibili.community.service.dm.v1.DanmuPlayerConfigPanel} message DanmuPlayerConfigPanel
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DanmuPlayerConfigPanel.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults)
                                object.selectionText = "";
                            if (message.selectionText != null && message.hasOwnProperty("selectionText"))
                                object.selectionText = message.selectionText;
                            return object;
                        };

                        /**
                         * Converts this DanmuPlayerConfigPanel to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfigPanel
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DanmuPlayerConfigPanel.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for DanmuPlayerConfigPanel
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerConfigPanel
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DanmuPlayerConfigPanel.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.DanmuPlayerConfigPanel";
                        };

                        return DanmuPlayerConfigPanel;
                    })();

                    v1.DanmuPlayerDynamicConfig = (function() {

                        /**
                         * Properties of a DanmuPlayerDynamicConfig.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IDanmuPlayerDynamicConfig
                         * @property {number|null} [progress] DanmuPlayerDynamicConfig progress
                         * @property {number|null} [playerDanmakuDomain] DanmuPlayerDynamicConfig playerDanmakuDomain
                         */

                        /**
                         * Constructs a new DanmuPlayerDynamicConfig.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a DanmuPlayerDynamicConfig.
                         * @implements IDanmuPlayerDynamicConfig
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IDanmuPlayerDynamicConfig=} [properties] Properties to set
                         */
                        function DanmuPlayerDynamicConfig(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * DanmuPlayerDynamicConfig progress.
                         * @member {number} progress
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig
                         * @instance
                         */
                        DanmuPlayerDynamicConfig.prototype.progress = 0;

                        /**
                         * DanmuPlayerDynamicConfig playerDanmakuDomain.
                         * @member {number} playerDanmakuDomain
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig
                         * @instance
                         */
                        DanmuPlayerDynamicConfig.prototype.playerDanmakuDomain = 0;

                        /**
                         * Creates a new DanmuPlayerDynamicConfig instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDanmuPlayerDynamicConfig=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig} DanmuPlayerDynamicConfig instance
                         */
                        DanmuPlayerDynamicConfig.create = function create(properties) {
                            return new DanmuPlayerDynamicConfig(properties);
                        };

                        /**
                         * Encodes the specified DanmuPlayerDynamicConfig message. Does not implicitly {@link bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDanmuPlayerDynamicConfig} message DanmuPlayerDynamicConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DanmuPlayerDynamicConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.progress != null && Object.hasOwnProperty.call(message, "progress"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.progress);
                            if (message.playerDanmakuDomain != null && Object.hasOwnProperty.call(message, "playerDanmakuDomain"))
                                writer.uint32(/* id 14, wireType 5 =*/117).float(message.playerDanmakuDomain);
                            return writer;
                        };

                        /**
                         * Encodes the specified DanmuPlayerDynamicConfig message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDanmuPlayerDynamicConfig} message DanmuPlayerDynamicConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DanmuPlayerDynamicConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a DanmuPlayerDynamicConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig} DanmuPlayerDynamicConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DanmuPlayerDynamicConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.progress = reader.int32();
                                        break;
                                    }
                                case 14: {
                                        message.playerDanmakuDomain = reader.float();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a DanmuPlayerDynamicConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig} DanmuPlayerDynamicConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DanmuPlayerDynamicConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a DanmuPlayerDynamicConfig message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DanmuPlayerDynamicConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.progress != null && message.hasOwnProperty("progress"))
                                if (!$util.isInteger(message.progress))
                                    return "progress: integer expected";
                            if (message.playerDanmakuDomain != null && message.hasOwnProperty("playerDanmakuDomain"))
                                if (typeof message.playerDanmakuDomain !== "number")
                                    return "playerDanmakuDomain: number expected";
                            return null;
                        };

                        /**
                         * Creates a DanmuPlayerDynamicConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig} DanmuPlayerDynamicConfig
                         */
                        DanmuPlayerDynamicConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig();
                            if (object.progress != null)
                                message.progress = object.progress | 0;
                            if (object.playerDanmakuDomain != null)
                                message.playerDanmakuDomain = Number(object.playerDanmakuDomain);
                            return message;
                        };

                        /**
                         * Creates a plain object from a DanmuPlayerDynamicConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig} message DanmuPlayerDynamicConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DanmuPlayerDynamicConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.progress = 0;
                                object.playerDanmakuDomain = 0;
                            }
                            if (message.progress != null && message.hasOwnProperty("progress"))
                                object.progress = message.progress;
                            if (message.playerDanmakuDomain != null && message.hasOwnProperty("playerDanmakuDomain"))
                                object.playerDanmakuDomain = options.json && !isFinite(message.playerDanmakuDomain) ? String(message.playerDanmakuDomain) : message.playerDanmakuDomain;
                            return object;
                        };

                        /**
                         * Converts this DanmuPlayerDynamicConfig to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DanmuPlayerDynamicConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for DanmuPlayerDynamicConfig
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DanmuPlayerDynamicConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig";
                        };

                        return DanmuPlayerDynamicConfig;
                    })();

                    v1.DanmuPlayerViewConfig = (function() {

                        /**
                         * Properties of a DanmuPlayerViewConfig.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IDanmuPlayerViewConfig
                         * @property {bilibili.community.service.dm.v1.IDanmuDefaultPlayerConfig|null} [danmukuDefaultPlayerConfig] DanmuPlayerViewConfig danmukuDefaultPlayerConfig
                         * @property {bilibili.community.service.dm.v1.IDanmuPlayerConfig|null} [danmukuPlayerConfig] DanmuPlayerViewConfig danmukuPlayerConfig
                         * @property {Array.<bilibili.community.service.dm.v1.IDanmuPlayerDynamicConfig>|null} [danmukuPlayerDynamicConfig] DanmuPlayerViewConfig danmukuPlayerDynamicConfig
                         * @property {bilibili.community.service.dm.v1.IDanmuPlayerConfigPanel|null} [danmukuPlayerConfigPanel] DanmuPlayerViewConfig danmukuPlayerConfigPanel
                         */

                        /**
                         * Constructs a new DanmuPlayerViewConfig.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a DanmuPlayerViewConfig.
                         * @implements IDanmuPlayerViewConfig
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IDanmuPlayerViewConfig=} [properties] Properties to set
                         */
                        function DanmuPlayerViewConfig(properties) {
                            this.danmukuPlayerDynamicConfig = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * DanmuPlayerViewConfig danmukuDefaultPlayerConfig.
                         * @member {bilibili.community.service.dm.v1.IDanmuDefaultPlayerConfig|null|undefined} danmukuDefaultPlayerConfig
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerViewConfig
                         * @instance
                         */
                        DanmuPlayerViewConfig.prototype.danmukuDefaultPlayerConfig = null;

                        /**
                         * DanmuPlayerViewConfig danmukuPlayerConfig.
                         * @member {bilibili.community.service.dm.v1.IDanmuPlayerConfig|null|undefined} danmukuPlayerConfig
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerViewConfig
                         * @instance
                         */
                        DanmuPlayerViewConfig.prototype.danmukuPlayerConfig = null;

                        /**
                         * DanmuPlayerViewConfig danmukuPlayerDynamicConfig.
                         * @member {Array.<bilibili.community.service.dm.v1.IDanmuPlayerDynamicConfig>} danmukuPlayerDynamicConfig
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerViewConfig
                         * @instance
                         */
                        DanmuPlayerViewConfig.prototype.danmukuPlayerDynamicConfig = $util.emptyArray;

                        /**
                         * DanmuPlayerViewConfig danmukuPlayerConfigPanel.
                         * @member {bilibili.community.service.dm.v1.IDanmuPlayerConfigPanel|null|undefined} danmukuPlayerConfigPanel
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerViewConfig
                         * @instance
                         */
                        DanmuPlayerViewConfig.prototype.danmukuPlayerConfigPanel = null;

                        /**
                         * Creates a new DanmuPlayerViewConfig instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerViewConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDanmuPlayerViewConfig=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.DanmuPlayerViewConfig} DanmuPlayerViewConfig instance
                         */
                        DanmuPlayerViewConfig.create = function create(properties) {
                            return new DanmuPlayerViewConfig(properties);
                        };

                        /**
                         * Encodes the specified DanmuPlayerViewConfig message. Does not implicitly {@link bilibili.community.service.dm.v1.DanmuPlayerViewConfig.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerViewConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDanmuPlayerViewConfig} message DanmuPlayerViewConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DanmuPlayerViewConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.danmukuDefaultPlayerConfig != null && Object.hasOwnProperty.call(message, "danmukuDefaultPlayerConfig"))
                                $root.bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.encode(message.danmukuDefaultPlayerConfig, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.danmukuPlayerConfig != null && Object.hasOwnProperty.call(message, "danmukuPlayerConfig"))
                                $root.bilibili.community.service.dm.v1.DanmuPlayerConfig.encode(message.danmukuPlayerConfig, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.danmukuPlayerDynamicConfig != null && message.danmukuPlayerDynamicConfig.length)
                                for (let i = 0; i < message.danmukuPlayerDynamicConfig.length; ++i)
                                    $root.bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig.encode(message.danmukuPlayerDynamicConfig[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.danmukuPlayerConfigPanel != null && Object.hasOwnProperty.call(message, "danmukuPlayerConfigPanel"))
                                $root.bilibili.community.service.dm.v1.DanmuPlayerConfigPanel.encode(message.danmukuPlayerConfigPanel, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified DanmuPlayerViewConfig message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.DanmuPlayerViewConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerViewConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDanmuPlayerViewConfig} message DanmuPlayerViewConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DanmuPlayerViewConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a DanmuPlayerViewConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerViewConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.DanmuPlayerViewConfig} DanmuPlayerViewConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DanmuPlayerViewConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.DanmuPlayerViewConfig();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.danmukuDefaultPlayerConfig = $root.bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 2: {
                                        message.danmukuPlayerConfig = $root.bilibili.community.service.dm.v1.DanmuPlayerConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        if (!(message.danmukuPlayerDynamicConfig && message.danmukuPlayerDynamicConfig.length))
                                            message.danmukuPlayerDynamicConfig = [];
                                        message.danmukuPlayerDynamicConfig.push($root.bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 4: {
                                        message.danmukuPlayerConfigPanel = $root.bilibili.community.service.dm.v1.DanmuPlayerConfigPanel.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a DanmuPlayerViewConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerViewConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.DanmuPlayerViewConfig} DanmuPlayerViewConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DanmuPlayerViewConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a DanmuPlayerViewConfig message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerViewConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DanmuPlayerViewConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.danmukuDefaultPlayerConfig != null && message.hasOwnProperty("danmukuDefaultPlayerConfig")) {
                                let error = $root.bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.verify(message.danmukuDefaultPlayerConfig);
                                if (error)
                                    return "danmukuDefaultPlayerConfig." + error;
                            }
                            if (message.danmukuPlayerConfig != null && message.hasOwnProperty("danmukuPlayerConfig")) {
                                let error = $root.bilibili.community.service.dm.v1.DanmuPlayerConfig.verify(message.danmukuPlayerConfig);
                                if (error)
                                    return "danmukuPlayerConfig." + error;
                            }
                            if (message.danmukuPlayerDynamicConfig != null && message.hasOwnProperty("danmukuPlayerDynamicConfig")) {
                                if (!Array.isArray(message.danmukuPlayerDynamicConfig))
                                    return "danmukuPlayerDynamicConfig: array expected";
                                for (let i = 0; i < message.danmukuPlayerDynamicConfig.length; ++i) {
                                    let error = $root.bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig.verify(message.danmukuPlayerDynamicConfig[i]);
                                    if (error)
                                        return "danmukuPlayerDynamicConfig." + error;
                                }
                            }
                            if (message.danmukuPlayerConfigPanel != null && message.hasOwnProperty("danmukuPlayerConfigPanel")) {
                                let error = $root.bilibili.community.service.dm.v1.DanmuPlayerConfigPanel.verify(message.danmukuPlayerConfigPanel);
                                if (error)
                                    return "danmukuPlayerConfigPanel." + error;
                            }
                            return null;
                        };

                        /**
                         * Creates a DanmuPlayerViewConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerViewConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.DanmuPlayerViewConfig} DanmuPlayerViewConfig
                         */
                        DanmuPlayerViewConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.DanmuPlayerViewConfig)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.DanmuPlayerViewConfig();
                            if (object.danmukuDefaultPlayerConfig != null) {
                                if (typeof object.danmukuDefaultPlayerConfig !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DanmuPlayerViewConfig.danmukuDefaultPlayerConfig: object expected");
                                message.danmukuDefaultPlayerConfig = $root.bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.fromObject(object.danmukuDefaultPlayerConfig);
                            }
                            if (object.danmukuPlayerConfig != null) {
                                if (typeof object.danmukuPlayerConfig !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DanmuPlayerViewConfig.danmukuPlayerConfig: object expected");
                                message.danmukuPlayerConfig = $root.bilibili.community.service.dm.v1.DanmuPlayerConfig.fromObject(object.danmukuPlayerConfig);
                            }
                            if (object.danmukuPlayerDynamicConfig) {
                                if (!Array.isArray(object.danmukuPlayerDynamicConfig))
                                    throw TypeError(".bilibili.community.service.dm.v1.DanmuPlayerViewConfig.danmukuPlayerDynamicConfig: array expected");
                                message.danmukuPlayerDynamicConfig = [];
                                for (let i = 0; i < object.danmukuPlayerDynamicConfig.length; ++i) {
                                    if (typeof object.danmukuPlayerDynamicConfig[i] !== "object")
                                        throw TypeError(".bilibili.community.service.dm.v1.DanmuPlayerViewConfig.danmukuPlayerDynamicConfig: object expected");
                                    message.danmukuPlayerDynamicConfig[i] = $root.bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig.fromObject(object.danmukuPlayerDynamicConfig[i]);
                                }
                            }
                            if (object.danmukuPlayerConfigPanel != null) {
                                if (typeof object.danmukuPlayerConfigPanel !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DanmuPlayerViewConfig.danmukuPlayerConfigPanel: object expected");
                                message.danmukuPlayerConfigPanel = $root.bilibili.community.service.dm.v1.DanmuPlayerConfigPanel.fromObject(object.danmukuPlayerConfigPanel);
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a DanmuPlayerViewConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerViewConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.DanmuPlayerViewConfig} message DanmuPlayerViewConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DanmuPlayerViewConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults)
                                object.danmukuPlayerDynamicConfig = [];
                            if (options.defaults) {
                                object.danmukuDefaultPlayerConfig = null;
                                object.danmukuPlayerConfig = null;
                                object.danmukuPlayerConfigPanel = null;
                            }
                            if (message.danmukuDefaultPlayerConfig != null && message.hasOwnProperty("danmukuDefaultPlayerConfig"))
                                object.danmukuDefaultPlayerConfig = $root.bilibili.community.service.dm.v1.DanmuDefaultPlayerConfig.toObject(message.danmukuDefaultPlayerConfig, options);
                            if (message.danmukuPlayerConfig != null && message.hasOwnProperty("danmukuPlayerConfig"))
                                object.danmukuPlayerConfig = $root.bilibili.community.service.dm.v1.DanmuPlayerConfig.toObject(message.danmukuPlayerConfig, options);
                            if (message.danmukuPlayerDynamicConfig && message.danmukuPlayerDynamicConfig.length) {
                                object.danmukuPlayerDynamicConfig = [];
                                for (let j = 0; j < message.danmukuPlayerDynamicConfig.length; ++j)
                                    object.danmukuPlayerDynamicConfig[j] = $root.bilibili.community.service.dm.v1.DanmuPlayerDynamicConfig.toObject(message.danmukuPlayerDynamicConfig[j], options);
                            }
                            if (message.danmukuPlayerConfigPanel != null && message.hasOwnProperty("danmukuPlayerConfigPanel"))
                                object.danmukuPlayerConfigPanel = $root.bilibili.community.service.dm.v1.DanmuPlayerConfigPanel.toObject(message.danmukuPlayerConfigPanel, options);
                            return object;
                        };

                        /**
                         * Converts this DanmuPlayerViewConfig to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerViewConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DanmuPlayerViewConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for DanmuPlayerViewConfig
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.DanmuPlayerViewConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DanmuPlayerViewConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.DanmuPlayerViewConfig";
                        };

                        return DanmuPlayerViewConfig;
                    })();

                    v1.DanmuWebPlayerConfig = (function() {

                        /**
                         * Properties of a DanmuWebPlayerConfig.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IDanmuWebPlayerConfig
                         * @property {boolean|null} [dmSwitch] DanmuWebPlayerConfig dmSwitch
                         * @property {boolean|null} [aiSwitch] DanmuWebPlayerConfig aiSwitch
                         * @property {number|null} [aiLevel] DanmuWebPlayerConfig aiLevel
                         * @property {boolean|null} [blocktop] DanmuWebPlayerConfig blocktop
                         * @property {boolean|null} [blockscroll] DanmuWebPlayerConfig blockscroll
                         * @property {boolean|null} [blockbottom] DanmuWebPlayerConfig blockbottom
                         * @property {boolean|null} [blockcolor] DanmuWebPlayerConfig blockcolor
                         * @property {boolean|null} [blockspecial] DanmuWebPlayerConfig blockspecial
                         * @property {boolean|null} [preventshade] DanmuWebPlayerConfig preventshade
                         * @property {boolean|null} [dmask] DanmuWebPlayerConfig dmask
                         * @property {number|null} [opacity] DanmuWebPlayerConfig opacity
                         * @property {number|null} [dmarea] DanmuWebPlayerConfig dmarea
                         * @property {number|null} [speedplus] DanmuWebPlayerConfig speedplus
                         * @property {number|null} [fontsize] DanmuWebPlayerConfig fontsize
                         * @property {boolean|null} [screensync] DanmuWebPlayerConfig screensync
                         * @property {boolean|null} [speedsync] DanmuWebPlayerConfig speedsync
                         * @property {string|null} [fontfamily] DanmuWebPlayerConfig fontfamily
                         * @property {boolean|null} [bold] DanmuWebPlayerConfig bold
                         * @property {number|null} [fontborder] DanmuWebPlayerConfig fontborder
                         * @property {string|null} [drawType] DanmuWebPlayerConfig drawType
                         * @property {number|null} [seniorModeSwitch] DanmuWebPlayerConfig seniorModeSwitch
                         * @property {number|null} [aiLevelV2] DanmuWebPlayerConfig aiLevelV2
                         * @property {Object.<string,number>|null} [aiLevelV2Map] DanmuWebPlayerConfig aiLevelV2Map
                         */

                        /**
                         * Constructs a new DanmuWebPlayerConfig.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a DanmuWebPlayerConfig.
                         * @implements IDanmuWebPlayerConfig
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IDanmuWebPlayerConfig=} [properties] Properties to set
                         */
                        function DanmuWebPlayerConfig(properties) {
                            this.aiLevelV2Map = {};
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * DanmuWebPlayerConfig dmSwitch.
                         * @member {boolean} dmSwitch
                         * @memberof bilibili.community.service.dm.v1.DanmuWebPlayerConfig
                         * @instance
                         */
                        DanmuWebPlayerConfig.prototype.dmSwitch = false;

                        /**
                         * DanmuWebPlayerConfig aiSwitch.
                         * @member {boolean} aiSwitch
                         * @memberof bilibili.community.service.dm.v1.DanmuWebPlayerConfig
                         * @instance
                         */
                        DanmuWebPlayerConfig.prototype.aiSwitch = false;

                        /**
                         * DanmuWebPlayerConfig aiLevel.
                         * @member {number} aiLevel
                         * @memberof bilibili.community.service.dm.v1.DanmuWebPlayerConfig
                         * @instance
                         */
                        DanmuWebPlayerConfig.prototype.aiLevel = 0;

                        /**
                         * DanmuWebPlayerConfig blocktop.
                         * @member {boolean} blocktop
                         * @memberof bilibili.community.service.dm.v1.DanmuWebPlayerConfig
                         * @instance
                         */
                        DanmuWebPlayerConfig.prototype.blocktop = false;

                        /**
                         * DanmuWebPlayerConfig blockscroll.
                         * @member {boolean} blockscroll
                         * @memberof bilibili.community.service.dm.v1.DanmuWebPlayerConfig
                         * @instance
                         */
                        DanmuWebPlayerConfig.prototype.blockscroll = false;

                        /**
                         * DanmuWebPlayerConfig blockbottom.
                         * @member {boolean} blockbottom
                         * @memberof bilibili.community.service.dm.v1.DanmuWebPlayerConfig
                         * @instance
                         */
                        DanmuWebPlayerConfig.prototype.blockbottom = false;

                        /**
                         * DanmuWebPlayerConfig blockcolor.
                         * @member {boolean} blockcolor
                         * @memberof bilibili.community.service.dm.v1.DanmuWebPlayerConfig
                         * @instance
                         */
                        DanmuWebPlayerConfig.prototype.blockcolor = false;

                        /**
                         * DanmuWebPlayerConfig blockspecial.
                         * @member {boolean} blockspecial
                         * @memberof bilibili.community.service.dm.v1.DanmuWebPlayerConfig
                         * @instance
                         */
                        DanmuWebPlayerConfig.prototype.blockspecial = false;

                        /**
                         * DanmuWebPlayerConfig preventshade.
                         * @member {boolean} preventshade
                         * @memberof bilibili.community.service.dm.v1.DanmuWebPlayerConfig
                         * @instance
                         */
                        DanmuWebPlayerConfig.prototype.preventshade = false;

                        /**
                         * DanmuWebPlayerConfig dmask.
                         * @member {boolean} dmask
                         * @memberof bilibili.community.service.dm.v1.DanmuWebPlayerConfig
                         * @instance
                         */
                        DanmuWebPlayerConfig.prototype.dmask = false;

                        /**
                         * DanmuWebPlayerConfig opacity.
                         * @member {number} opacity
                         * @memberof bilibili.community.service.dm.v1.DanmuWebPlayerConfig
                         * @instance
                         */
                        DanmuWebPlayerConfig.prototype.opacity = 0;

                        /**
                         * DanmuWebPlayerConfig dmarea.
                         * @member {number} dmarea
                         * @memberof bilibili.community.service.dm.v1.DanmuWebPlayerConfig
                         * @instance
                         */
                        DanmuWebPlayerConfig.prototype.dmarea = 0;

                        /**
                         * DanmuWebPlayerConfig speedplus.
                         * @member {number} speedplus
                         * @memberof bilibili.community.service.dm.v1.DanmuWebPlayerConfig
                         * @instance
                         */
                        DanmuWebPlayerConfig.prototype.speedplus = 0;

                        /**
                         * DanmuWebPlayerConfig fontsize.
                         * @member {number} fontsize
                         * @memberof bilibili.community.service.dm.v1.DanmuWebPlayerConfig
                         * @instance
                         */
                        DanmuWebPlayerConfig.prototype.fontsize = 0;

                        /**
                         * DanmuWebPlayerConfig screensync.
                         * @member {boolean} screensync
                         * @memberof bilibili.community.service.dm.v1.DanmuWebPlayerConfig
                         * @instance
                         */
                        DanmuWebPlayerConfig.prototype.screensync = false;

                        /**
                         * DanmuWebPlayerConfig speedsync.
                         * @member {boolean} speedsync
                         * @memberof bilibili.community.service.dm.v1.DanmuWebPlayerConfig
                         * @instance
                         */
                        DanmuWebPlayerConfig.prototype.speedsync = false;

                        /**
                         * DanmuWebPlayerConfig fontfamily.
                         * @member {string} fontfamily
                         * @memberof bilibili.community.service.dm.v1.DanmuWebPlayerConfig
                         * @instance
                         */
                        DanmuWebPlayerConfig.prototype.fontfamily = "";

                        /**
                         * DanmuWebPlayerConfig bold.
                         * @member {boolean} bold
                         * @memberof bilibili.community.service.dm.v1.DanmuWebPlayerConfig
                         * @instance
                         */
                        DanmuWebPlayerConfig.prototype.bold = false;

                        /**
                         * DanmuWebPlayerConfig fontborder.
                         * @member {number} fontborder
                         * @memberof bilibili.community.service.dm.v1.DanmuWebPlayerConfig
                         * @instance
                         */
                        DanmuWebPlayerConfig.prototype.fontborder = 0;

                        /**
                         * DanmuWebPlayerConfig drawType.
                         * @member {string} drawType
                         * @memberof bilibili.community.service.dm.v1.DanmuWebPlayerConfig
                         * @instance
                         */
                        DanmuWebPlayerConfig.prototype.drawType = "";

                        /**
                         * DanmuWebPlayerConfig seniorModeSwitch.
                         * @member {number} seniorModeSwitch
                         * @memberof bilibili.community.service.dm.v1.DanmuWebPlayerConfig
                         * @instance
                         */
                        DanmuWebPlayerConfig.prototype.seniorModeSwitch = 0;

                        /**
                         * DanmuWebPlayerConfig aiLevelV2.
                         * @member {number} aiLevelV2
                         * @memberof bilibili.community.service.dm.v1.DanmuWebPlayerConfig
                         * @instance
                         */
                        DanmuWebPlayerConfig.prototype.aiLevelV2 = 0;

                        /**
                         * DanmuWebPlayerConfig aiLevelV2Map.
                         * @member {Object.<string,number>} aiLevelV2Map
                         * @memberof bilibili.community.service.dm.v1.DanmuWebPlayerConfig
                         * @instance
                         */
                        DanmuWebPlayerConfig.prototype.aiLevelV2Map = $util.emptyObject;

                        /**
                         * Creates a new DanmuWebPlayerConfig instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.DanmuWebPlayerConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDanmuWebPlayerConfig=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.DanmuWebPlayerConfig} DanmuWebPlayerConfig instance
                         */
                        DanmuWebPlayerConfig.create = function create(properties) {
                            return new DanmuWebPlayerConfig(properties);
                        };

                        /**
                         * Encodes the specified DanmuWebPlayerConfig message. Does not implicitly {@link bilibili.community.service.dm.v1.DanmuWebPlayerConfig.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.DanmuWebPlayerConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDanmuWebPlayerConfig} message DanmuWebPlayerConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DanmuWebPlayerConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.dmSwitch != null && Object.hasOwnProperty.call(message, "dmSwitch"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.dmSwitch);
                            if (message.aiSwitch != null && Object.hasOwnProperty.call(message, "aiSwitch"))
                                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.aiSwitch);
                            if (message.aiLevel != null && Object.hasOwnProperty.call(message, "aiLevel"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.aiLevel);
                            if (message.blocktop != null && Object.hasOwnProperty.call(message, "blocktop"))
                                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.blocktop);
                            if (message.blockscroll != null && Object.hasOwnProperty.call(message, "blockscroll"))
                                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.blockscroll);
                            if (message.blockbottom != null && Object.hasOwnProperty.call(message, "blockbottom"))
                                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.blockbottom);
                            if (message.blockcolor != null && Object.hasOwnProperty.call(message, "blockcolor"))
                                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.blockcolor);
                            if (message.blockspecial != null && Object.hasOwnProperty.call(message, "blockspecial"))
                                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.blockspecial);
                            if (message.preventshade != null && Object.hasOwnProperty.call(message, "preventshade"))
                                writer.uint32(/* id 9, wireType 0 =*/72).bool(message.preventshade);
                            if (message.dmask != null && Object.hasOwnProperty.call(message, "dmask"))
                                writer.uint32(/* id 10, wireType 0 =*/80).bool(message.dmask);
                            if (message.opacity != null && Object.hasOwnProperty.call(message, "opacity"))
                                writer.uint32(/* id 11, wireType 5 =*/93).float(message.opacity);
                            if (message.dmarea != null && Object.hasOwnProperty.call(message, "dmarea"))
                                writer.uint32(/* id 12, wireType 0 =*/96).int32(message.dmarea);
                            if (message.speedplus != null && Object.hasOwnProperty.call(message, "speedplus"))
                                writer.uint32(/* id 13, wireType 5 =*/109).float(message.speedplus);
                            if (message.fontsize != null && Object.hasOwnProperty.call(message, "fontsize"))
                                writer.uint32(/* id 14, wireType 5 =*/117).float(message.fontsize);
                            if (message.screensync != null && Object.hasOwnProperty.call(message, "screensync"))
                                writer.uint32(/* id 15, wireType 0 =*/120).bool(message.screensync);
                            if (message.speedsync != null && Object.hasOwnProperty.call(message, "speedsync"))
                                writer.uint32(/* id 16, wireType 0 =*/128).bool(message.speedsync);
                            if (message.fontfamily != null && Object.hasOwnProperty.call(message, "fontfamily"))
                                writer.uint32(/* id 17, wireType 2 =*/138).string(message.fontfamily);
                            if (message.bold != null && Object.hasOwnProperty.call(message, "bold"))
                                writer.uint32(/* id 18, wireType 0 =*/144).bool(message.bold);
                            if (message.fontborder != null && Object.hasOwnProperty.call(message, "fontborder"))
                                writer.uint32(/* id 19, wireType 0 =*/152).int32(message.fontborder);
                            if (message.drawType != null && Object.hasOwnProperty.call(message, "drawType"))
                                writer.uint32(/* id 20, wireType 2 =*/162).string(message.drawType);
                            if (message.seniorModeSwitch != null && Object.hasOwnProperty.call(message, "seniorModeSwitch"))
                                writer.uint32(/* id 21, wireType 0 =*/168).int32(message.seniorModeSwitch);
                            if (message.aiLevelV2 != null && Object.hasOwnProperty.call(message, "aiLevelV2"))
                                writer.uint32(/* id 22, wireType 0 =*/176).int32(message.aiLevelV2);
                            if (message.aiLevelV2Map != null && Object.hasOwnProperty.call(message, "aiLevelV2Map"))
                                for (let keys = Object.keys(message.aiLevelV2Map), i = 0; i < keys.length; ++i)
                                    writer.uint32(/* id 23, wireType 2 =*/186).fork().uint32(/* id 1, wireType 0 =*/8).int32(keys[i]).uint32(/* id 2, wireType 0 =*/16).int32(message.aiLevelV2Map[keys[i]]).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified DanmuWebPlayerConfig message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.DanmuWebPlayerConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DanmuWebPlayerConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDanmuWebPlayerConfig} message DanmuWebPlayerConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DanmuWebPlayerConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a DanmuWebPlayerConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.DanmuWebPlayerConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.DanmuWebPlayerConfig} DanmuWebPlayerConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DanmuWebPlayerConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.DanmuWebPlayerConfig(), key, value;
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.dmSwitch = reader.bool();
                                        break;
                                    }
                                case 2: {
                                        message.aiSwitch = reader.bool();
                                        break;
                                    }
                                case 3: {
                                        message.aiLevel = reader.int32();
                                        break;
                                    }
                                case 4: {
                                        message.blocktop = reader.bool();
                                        break;
                                    }
                                case 5: {
                                        message.blockscroll = reader.bool();
                                        break;
                                    }
                                case 6: {
                                        message.blockbottom = reader.bool();
                                        break;
                                    }
                                case 7: {
                                        message.blockcolor = reader.bool();
                                        break;
                                    }
                                case 8: {
                                        message.blockspecial = reader.bool();
                                        break;
                                    }
                                case 9: {
                                        message.preventshade = reader.bool();
                                        break;
                                    }
                                case 10: {
                                        message.dmask = reader.bool();
                                        break;
                                    }
                                case 11: {
                                        message.opacity = reader.float();
                                        break;
                                    }
                                case 12: {
                                        message.dmarea = reader.int32();
                                        break;
                                    }
                                case 13: {
                                        message.speedplus = reader.float();
                                        break;
                                    }
                                case 14: {
                                        message.fontsize = reader.float();
                                        break;
                                    }
                                case 15: {
                                        message.screensync = reader.bool();
                                        break;
                                    }
                                case 16: {
                                        message.speedsync = reader.bool();
                                        break;
                                    }
                                case 17: {
                                        message.fontfamily = reader.string();
                                        break;
                                    }
                                case 18: {
                                        message.bold = reader.bool();
                                        break;
                                    }
                                case 19: {
                                        message.fontborder = reader.int32();
                                        break;
                                    }
                                case 20: {
                                        message.drawType = reader.string();
                                        break;
                                    }
                                case 21: {
                                        message.seniorModeSwitch = reader.int32();
                                        break;
                                    }
                                case 22: {
                                        message.aiLevelV2 = reader.int32();
                                        break;
                                    }
                                case 23: {
                                        if (message.aiLevelV2Map === $util.emptyObject)
                                            message.aiLevelV2Map = {};
                                        let end2 = reader.uint32() + reader.pos;
                                        key = 0;
                                        value = 0;
                                        while (reader.pos < end2) {
                                            let tag2 = reader.uint32();
                                            switch (tag2 >>> 3) {
                                            case 1:
                                                key = reader.int32();
                                                break;
                                            case 2:
                                                value = reader.int32();
                                                break;
                                            default:
                                                reader.skipType(tag2 & 7);
                                                break;
                                            }
                                        }
                                        message.aiLevelV2Map[key] = value;
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a DanmuWebPlayerConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DanmuWebPlayerConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.DanmuWebPlayerConfig} DanmuWebPlayerConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DanmuWebPlayerConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a DanmuWebPlayerConfig message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.DanmuWebPlayerConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DanmuWebPlayerConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.dmSwitch != null && message.hasOwnProperty("dmSwitch"))
                                if (typeof message.dmSwitch !== "boolean")
                                    return "dmSwitch: boolean expected";
                            if (message.aiSwitch != null && message.hasOwnProperty("aiSwitch"))
                                if (typeof message.aiSwitch !== "boolean")
                                    return "aiSwitch: boolean expected";
                            if (message.aiLevel != null && message.hasOwnProperty("aiLevel"))
                                if (!$util.isInteger(message.aiLevel))
                                    return "aiLevel: integer expected";
                            if (message.blocktop != null && message.hasOwnProperty("blocktop"))
                                if (typeof message.blocktop !== "boolean")
                                    return "blocktop: boolean expected";
                            if (message.blockscroll != null && message.hasOwnProperty("blockscroll"))
                                if (typeof message.blockscroll !== "boolean")
                                    return "blockscroll: boolean expected";
                            if (message.blockbottom != null && message.hasOwnProperty("blockbottom"))
                                if (typeof message.blockbottom !== "boolean")
                                    return "blockbottom: boolean expected";
                            if (message.blockcolor != null && message.hasOwnProperty("blockcolor"))
                                if (typeof message.blockcolor !== "boolean")
                                    return "blockcolor: boolean expected";
                            if (message.blockspecial != null && message.hasOwnProperty("blockspecial"))
                                if (typeof message.blockspecial !== "boolean")
                                    return "blockspecial: boolean expected";
                            if (message.preventshade != null && message.hasOwnProperty("preventshade"))
                                if (typeof message.preventshade !== "boolean")
                                    return "preventshade: boolean expected";
                            if (message.dmask != null && message.hasOwnProperty("dmask"))
                                if (typeof message.dmask !== "boolean")
                                    return "dmask: boolean expected";
                            if (message.opacity != null && message.hasOwnProperty("opacity"))
                                if (typeof message.opacity !== "number")
                                    return "opacity: number expected";
                            if (message.dmarea != null && message.hasOwnProperty("dmarea"))
                                if (!$util.isInteger(message.dmarea))
                                    return "dmarea: integer expected";
                            if (message.speedplus != null && message.hasOwnProperty("speedplus"))
                                if (typeof message.speedplus !== "number")
                                    return "speedplus: number expected";
                            if (message.fontsize != null && message.hasOwnProperty("fontsize"))
                                if (typeof message.fontsize !== "number")
                                    return "fontsize: number expected";
                            if (message.screensync != null && message.hasOwnProperty("screensync"))
                                if (typeof message.screensync !== "boolean")
                                    return "screensync: boolean expected";
                            if (message.speedsync != null && message.hasOwnProperty("speedsync"))
                                if (typeof message.speedsync !== "boolean")
                                    return "speedsync: boolean expected";
                            if (message.fontfamily != null && message.hasOwnProperty("fontfamily"))
                                if (!$util.isString(message.fontfamily))
                                    return "fontfamily: string expected";
                            if (message.bold != null && message.hasOwnProperty("bold"))
                                if (typeof message.bold !== "boolean")
                                    return "bold: boolean expected";
                            if (message.fontborder != null && message.hasOwnProperty("fontborder"))
                                if (!$util.isInteger(message.fontborder))
                                    return "fontborder: integer expected";
                            if (message.drawType != null && message.hasOwnProperty("drawType"))
                                if (!$util.isString(message.drawType))
                                    return "drawType: string expected";
                            if (message.seniorModeSwitch != null && message.hasOwnProperty("seniorModeSwitch"))
                                if (!$util.isInteger(message.seniorModeSwitch))
                                    return "seniorModeSwitch: integer expected";
                            if (message.aiLevelV2 != null && message.hasOwnProperty("aiLevelV2"))
                                if (!$util.isInteger(message.aiLevelV2))
                                    return "aiLevelV2: integer expected";
                            if (message.aiLevelV2Map != null && message.hasOwnProperty("aiLevelV2Map")) {
                                if (!$util.isObject(message.aiLevelV2Map))
                                    return "aiLevelV2Map: object expected";
                                let key = Object.keys(message.aiLevelV2Map);
                                for (let i = 0; i < key.length; ++i) {
                                    if (!$util.key32Re.test(key[i]))
                                        return "aiLevelV2Map: integer key{k:int32} expected";
                                    if (!$util.isInteger(message.aiLevelV2Map[key[i]]))
                                        return "aiLevelV2Map: integer{k:int32} expected";
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates a DanmuWebPlayerConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.DanmuWebPlayerConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.DanmuWebPlayerConfig} DanmuWebPlayerConfig
                         */
                        DanmuWebPlayerConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.DanmuWebPlayerConfig)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.DanmuWebPlayerConfig();
                            if (object.dmSwitch != null)
                                message.dmSwitch = Boolean(object.dmSwitch);
                            if (object.aiSwitch != null)
                                message.aiSwitch = Boolean(object.aiSwitch);
                            if (object.aiLevel != null)
                                message.aiLevel = object.aiLevel | 0;
                            if (object.blocktop != null)
                                message.blocktop = Boolean(object.blocktop);
                            if (object.blockscroll != null)
                                message.blockscroll = Boolean(object.blockscroll);
                            if (object.blockbottom != null)
                                message.blockbottom = Boolean(object.blockbottom);
                            if (object.blockcolor != null)
                                message.blockcolor = Boolean(object.blockcolor);
                            if (object.blockspecial != null)
                                message.blockspecial = Boolean(object.blockspecial);
                            if (object.preventshade != null)
                                message.preventshade = Boolean(object.preventshade);
                            if (object.dmask != null)
                                message.dmask = Boolean(object.dmask);
                            if (object.opacity != null)
                                message.opacity = Number(object.opacity);
                            if (object.dmarea != null)
                                message.dmarea = object.dmarea | 0;
                            if (object.speedplus != null)
                                message.speedplus = Number(object.speedplus);
                            if (object.fontsize != null)
                                message.fontsize = Number(object.fontsize);
                            if (object.screensync != null)
                                message.screensync = Boolean(object.screensync);
                            if (object.speedsync != null)
                                message.speedsync = Boolean(object.speedsync);
                            if (object.fontfamily != null)
                                message.fontfamily = String(object.fontfamily);
                            if (object.bold != null)
                                message.bold = Boolean(object.bold);
                            if (object.fontborder != null)
                                message.fontborder = object.fontborder | 0;
                            if (object.drawType != null)
                                message.drawType = String(object.drawType);
                            if (object.seniorModeSwitch != null)
                                message.seniorModeSwitch = object.seniorModeSwitch | 0;
                            if (object.aiLevelV2 != null)
                                message.aiLevelV2 = object.aiLevelV2 | 0;
                            if (object.aiLevelV2Map) {
                                if (typeof object.aiLevelV2Map !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DanmuWebPlayerConfig.aiLevelV2Map: object expected");
                                message.aiLevelV2Map = {};
                                for (let keys = Object.keys(object.aiLevelV2Map), i = 0; i < keys.length; ++i)
                                    message.aiLevelV2Map[keys[i]] = object.aiLevelV2Map[keys[i]] | 0;
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a DanmuWebPlayerConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.DanmuWebPlayerConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.DanmuWebPlayerConfig} message DanmuWebPlayerConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DanmuWebPlayerConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.objects || options.defaults)
                                object.aiLevelV2Map = {};
                            if (options.defaults) {
                                object.dmSwitch = false;
                                object.aiSwitch = false;
                                object.aiLevel = 0;
                                object.blocktop = false;
                                object.blockscroll = false;
                                object.blockbottom = false;
                                object.blockcolor = false;
                                object.blockspecial = false;
                                object.preventshade = false;
                                object.dmask = false;
                                object.opacity = 0;
                                object.dmarea = 0;
                                object.speedplus = 0;
                                object.fontsize = 0;
                                object.screensync = false;
                                object.speedsync = false;
                                object.fontfamily = "";
                                object.bold = false;
                                object.fontborder = 0;
                                object.drawType = "";
                                object.seniorModeSwitch = 0;
                                object.aiLevelV2 = 0;
                            }
                            if (message.dmSwitch != null && message.hasOwnProperty("dmSwitch"))
                                object.dmSwitch = message.dmSwitch;
                            if (message.aiSwitch != null && message.hasOwnProperty("aiSwitch"))
                                object.aiSwitch = message.aiSwitch;
                            if (message.aiLevel != null && message.hasOwnProperty("aiLevel"))
                                object.aiLevel = message.aiLevel;
                            if (message.blocktop != null && message.hasOwnProperty("blocktop"))
                                object.blocktop = message.blocktop;
                            if (message.blockscroll != null && message.hasOwnProperty("blockscroll"))
                                object.blockscroll = message.blockscroll;
                            if (message.blockbottom != null && message.hasOwnProperty("blockbottom"))
                                object.blockbottom = message.blockbottom;
                            if (message.blockcolor != null && message.hasOwnProperty("blockcolor"))
                                object.blockcolor = message.blockcolor;
                            if (message.blockspecial != null && message.hasOwnProperty("blockspecial"))
                                object.blockspecial = message.blockspecial;
                            if (message.preventshade != null && message.hasOwnProperty("preventshade"))
                                object.preventshade = message.preventshade;
                            if (message.dmask != null && message.hasOwnProperty("dmask"))
                                object.dmask = message.dmask;
                            if (message.opacity != null && message.hasOwnProperty("opacity"))
                                object.opacity = options.json && !isFinite(message.opacity) ? String(message.opacity) : message.opacity;
                            if (message.dmarea != null && message.hasOwnProperty("dmarea"))
                                object.dmarea = message.dmarea;
                            if (message.speedplus != null && message.hasOwnProperty("speedplus"))
                                object.speedplus = options.json && !isFinite(message.speedplus) ? String(message.speedplus) : message.speedplus;
                            if (message.fontsize != null && message.hasOwnProperty("fontsize"))
                                object.fontsize = options.json && !isFinite(message.fontsize) ? String(message.fontsize) : message.fontsize;
                            if (message.screensync != null && message.hasOwnProperty("screensync"))
                                object.screensync = message.screensync;
                            if (message.speedsync != null && message.hasOwnProperty("speedsync"))
                                object.speedsync = message.speedsync;
                            if (message.fontfamily != null && message.hasOwnProperty("fontfamily"))
                                object.fontfamily = message.fontfamily;
                            if (message.bold != null && message.hasOwnProperty("bold"))
                                object.bold = message.bold;
                            if (message.fontborder != null && message.hasOwnProperty("fontborder"))
                                object.fontborder = message.fontborder;
                            if (message.drawType != null && message.hasOwnProperty("drawType"))
                                object.drawType = message.drawType;
                            if (message.seniorModeSwitch != null && message.hasOwnProperty("seniorModeSwitch"))
                                object.seniorModeSwitch = message.seniorModeSwitch;
                            if (message.aiLevelV2 != null && message.hasOwnProperty("aiLevelV2"))
                                object.aiLevelV2 = message.aiLevelV2;
                            let keys2;
                            if (message.aiLevelV2Map && (keys2 = Object.keys(message.aiLevelV2Map)).length) {
                                object.aiLevelV2Map = {};
                                for (let j = 0; j < keys2.length; ++j)
                                    object.aiLevelV2Map[keys2[j]] = message.aiLevelV2Map[keys2[j]];
                            }
                            return object;
                        };

                        /**
                         * Converts this DanmuWebPlayerConfig to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.DanmuWebPlayerConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DanmuWebPlayerConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for DanmuWebPlayerConfig
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.DanmuWebPlayerConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DanmuWebPlayerConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.DanmuWebPlayerConfig";
                        };

                        return DanmuWebPlayerConfig;
                    })();

                    /**
                     * DMAttrBit enum.
                     * @name bilibili.community.service.dm.v1.DMAttrBit
                     * @enum {number}
                     * @property {number} DMAttrBitProtect=0 DMAttrBitProtect value
                     * @property {number} DMAttrBitFromLive=1 DMAttrBitFromLive value
                     * @property {number} DMAttrHighLike=2 DMAttrHighLike value
                     */
                    v1.DMAttrBit = (function() {
                        const valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "DMAttrBitProtect"] = 0;
                        values[valuesById[1] = "DMAttrBitFromLive"] = 1;
                        values[valuesById[2] = "DMAttrHighLike"] = 2;
                        return values;
                    })();

                    v1.DmColorful = (function() {

                        /**
                         * Properties of a DmColorful.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IDmColorful
                         * @property {bilibili.community.service.dm.v1.DmColorfulType|null} [type] DmColorful type
                         * @property {string|null} [src] DmColorful src
                         */

                        /**
                         * Constructs a new DmColorful.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a DmColorful.
                         * @implements IDmColorful
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IDmColorful=} [properties] Properties to set
                         */
                        function DmColorful(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * DmColorful type.
                         * @member {bilibili.community.service.dm.v1.DmColorfulType} type
                         * @memberof bilibili.community.service.dm.v1.DmColorful
                         * @instance
                         */
                        DmColorful.prototype.type = 0;

                        /**
                         * DmColorful src.
                         * @member {string} src
                         * @memberof bilibili.community.service.dm.v1.DmColorful
                         * @instance
                         */
                        DmColorful.prototype.src = "";

                        /**
                         * Creates a new DmColorful instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.DmColorful
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmColorful=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.DmColorful} DmColorful instance
                         */
                        DmColorful.create = function create(properties) {
                            return new DmColorful(properties);
                        };

                        /**
                         * Encodes the specified DmColorful message. Does not implicitly {@link bilibili.community.service.dm.v1.DmColorful.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.DmColorful
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmColorful} message DmColorful message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DmColorful.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                            if (message.src != null && Object.hasOwnProperty.call(message, "src"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.src);
                            return writer;
                        };

                        /**
                         * Encodes the specified DmColorful message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.DmColorful.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DmColorful
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmColorful} message DmColorful message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DmColorful.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a DmColorful message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.DmColorful
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.DmColorful} DmColorful
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DmColorful.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.DmColorful();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.type = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.src = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a DmColorful message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DmColorful
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.DmColorful} DmColorful
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DmColorful.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a DmColorful message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.DmColorful
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DmColorful.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                switch (message.type) {
                                default:
                                    return "type: enum value expected";
                                case 0:
                                case 60001:
                                    break;
                                }
                            if (message.src != null && message.hasOwnProperty("src"))
                                if (!$util.isString(message.src))
                                    return "src: string expected";
                            return null;
                        };

                        /**
                         * Creates a DmColorful message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.DmColorful
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.DmColorful} DmColorful
                         */
                        DmColorful.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.DmColorful)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.DmColorful();
                            switch (object.type) {
                            default:
                                if (typeof object.type === "number") {
                                    message.type = object.type;
                                    break;
                                }
                                break;
                            case "NoneType":
                            case 0:
                                message.type = 0;
                                break;
                            case "VipGradualColor":
                            case 60001:
                                message.type = 60001;
                                break;
                            }
                            if (object.src != null)
                                message.src = String(object.src);
                            return message;
                        };

                        /**
                         * Creates a plain object from a DmColorful message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.DmColorful
                         * @static
                         * @param {bilibili.community.service.dm.v1.DmColorful} message DmColorful
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DmColorful.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.type = options.enums === String ? "NoneType" : 0;
                                object.src = "";
                            }
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = options.enums === String ? $root.bilibili.community.service.dm.v1.DmColorfulType[message.type] === undefined ? message.type : $root.bilibili.community.service.dm.v1.DmColorfulType[message.type] : message.type;
                            if (message.src != null && message.hasOwnProperty("src"))
                                object.src = message.src;
                            return object;
                        };

                        /**
                         * Converts this DmColorful to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.DmColorful
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DmColorful.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for DmColorful
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.DmColorful
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DmColorful.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.DmColorful";
                        };

                        return DmColorful;
                    })();

                    /**
                     * DmColorfulType enum.
                     * @name bilibili.community.service.dm.v1.DmColorfulType
                     * @enum {number}
                     * @property {number} NoneType=0 NoneType value
                     * @property {number} VipGradualColor=60001 VipGradualColor value
                     */
                    v1.DmColorfulType = (function() {
                        const valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "NoneType"] = 0;
                        values[valuesById[60001] = "VipGradualColor"] = 60001;
                        return values;
                    })();

                    v1.DmExpoReportReq = (function() {

                        /**
                         * Properties of a DmExpoReportReq.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IDmExpoReportReq
                         * @property {string|null} [sessionId] DmExpoReportReq sessionId
                         * @property {number|Long|null} [oid] DmExpoReportReq oid
                         * @property {string|null} [spmid] DmExpoReportReq spmid
                         */

                        /**
                         * Constructs a new DmExpoReportReq.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a DmExpoReportReq.
                         * @implements IDmExpoReportReq
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IDmExpoReportReq=} [properties] Properties to set
                         */
                        function DmExpoReportReq(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * DmExpoReportReq sessionId.
                         * @member {string} sessionId
                         * @memberof bilibili.community.service.dm.v1.DmExpoReportReq
                         * @instance
                         */
                        DmExpoReportReq.prototype.sessionId = "";

                        /**
                         * DmExpoReportReq oid.
                         * @member {number|Long} oid
                         * @memberof bilibili.community.service.dm.v1.DmExpoReportReq
                         * @instance
                         */
                        DmExpoReportReq.prototype.oid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * DmExpoReportReq spmid.
                         * @member {string} spmid
                         * @memberof bilibili.community.service.dm.v1.DmExpoReportReq
                         * @instance
                         */
                        DmExpoReportReq.prototype.spmid = "";

                        /**
                         * Creates a new DmExpoReportReq instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.DmExpoReportReq
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmExpoReportReq=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.DmExpoReportReq} DmExpoReportReq instance
                         */
                        DmExpoReportReq.create = function create(properties) {
                            return new DmExpoReportReq(properties);
                        };

                        /**
                         * Encodes the specified DmExpoReportReq message. Does not implicitly {@link bilibili.community.service.dm.v1.DmExpoReportReq.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.DmExpoReportReq
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmExpoReportReq} message DmExpoReportReq message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DmExpoReportReq.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.sessionId != null && Object.hasOwnProperty.call(message, "sessionId"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.sessionId);
                            if (message.oid != null && Object.hasOwnProperty.call(message, "oid"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.oid);
                            if (message.spmid != null && Object.hasOwnProperty.call(message, "spmid"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.spmid);
                            return writer;
                        };

                        /**
                         * Encodes the specified DmExpoReportReq message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.DmExpoReportReq.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DmExpoReportReq
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmExpoReportReq} message DmExpoReportReq message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DmExpoReportReq.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a DmExpoReportReq message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.DmExpoReportReq
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.DmExpoReportReq} DmExpoReportReq
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DmExpoReportReq.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.DmExpoReportReq();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.sessionId = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.oid = reader.int64();
                                        break;
                                    }
                                case 4: {
                                        message.spmid = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a DmExpoReportReq message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DmExpoReportReq
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.DmExpoReportReq} DmExpoReportReq
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DmExpoReportReq.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a DmExpoReportReq message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.DmExpoReportReq
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DmExpoReportReq.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.sessionId != null && message.hasOwnProperty("sessionId"))
                                if (!$util.isString(message.sessionId))
                                    return "sessionId: string expected";
                            if (message.oid != null && message.hasOwnProperty("oid"))
                                if (!$util.isInteger(message.oid) && !(message.oid && $util.isInteger(message.oid.low) && $util.isInteger(message.oid.high)))
                                    return "oid: integer|Long expected";
                            if (message.spmid != null && message.hasOwnProperty("spmid"))
                                if (!$util.isString(message.spmid))
                                    return "spmid: string expected";
                            return null;
                        };

                        /**
                         * Creates a DmExpoReportReq message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.DmExpoReportReq
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.DmExpoReportReq} DmExpoReportReq
                         */
                        DmExpoReportReq.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.DmExpoReportReq)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.DmExpoReportReq();
                            if (object.sessionId != null)
                                message.sessionId = String(object.sessionId);
                            if (object.oid != null)
                                if ($util.Long)
                                    (message.oid = $util.Long.fromValue(object.oid)).unsigned = false;
                                else if (typeof object.oid === "string")
                                    message.oid = parseInt(object.oid, 10);
                                else if (typeof object.oid === "number")
                                    message.oid = object.oid;
                                else if (typeof object.oid === "object")
                                    message.oid = new $util.LongBits(object.oid.low >>> 0, object.oid.high >>> 0).toNumber();
                            if (object.spmid != null)
                                message.spmid = String(object.spmid);
                            return message;
                        };

                        /**
                         * Creates a plain object from a DmExpoReportReq message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.DmExpoReportReq
                         * @static
                         * @param {bilibili.community.service.dm.v1.DmExpoReportReq} message DmExpoReportReq
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DmExpoReportReq.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.sessionId = "";
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.oid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.oid = options.longs === String ? "0" : 0;
                                object.spmid = "";
                            }
                            if (message.sessionId != null && message.hasOwnProperty("sessionId"))
                                object.sessionId = message.sessionId;
                            if (message.oid != null && message.hasOwnProperty("oid"))
                                if (typeof message.oid === "number")
                                    object.oid = options.longs === String ? String(message.oid) : message.oid;
                                else
                                    object.oid = options.longs === String ? $util.Long.prototype.toString.call(message.oid) : options.longs === Number ? new $util.LongBits(message.oid.low >>> 0, message.oid.high >>> 0).toNumber() : message.oid;
                            if (message.spmid != null && message.hasOwnProperty("spmid"))
                                object.spmid = message.spmid;
                            return object;
                        };

                        /**
                         * Converts this DmExpoReportReq to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.DmExpoReportReq
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DmExpoReportReq.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for DmExpoReportReq
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.DmExpoReportReq
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DmExpoReportReq.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.DmExpoReportReq";
                        };

                        return DmExpoReportReq;
                    })();

                    v1.DmExpoReportRes = (function() {

                        /**
                         * Properties of a DmExpoReportRes.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IDmExpoReportRes
                         */

                        /**
                         * Constructs a new DmExpoReportRes.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a DmExpoReportRes.
                         * @implements IDmExpoReportRes
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IDmExpoReportRes=} [properties] Properties to set
                         */
                        function DmExpoReportRes(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Creates a new DmExpoReportRes instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.DmExpoReportRes
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmExpoReportRes=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.DmExpoReportRes} DmExpoReportRes instance
                         */
                        DmExpoReportRes.create = function create(properties) {
                            return new DmExpoReportRes(properties);
                        };

                        /**
                         * Encodes the specified DmExpoReportRes message. Does not implicitly {@link bilibili.community.service.dm.v1.DmExpoReportRes.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.DmExpoReportRes
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmExpoReportRes} message DmExpoReportRes message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DmExpoReportRes.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            return writer;
                        };

                        /**
                         * Encodes the specified DmExpoReportRes message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.DmExpoReportRes.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DmExpoReportRes
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmExpoReportRes} message DmExpoReportRes message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DmExpoReportRes.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a DmExpoReportRes message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.DmExpoReportRes
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.DmExpoReportRes} DmExpoReportRes
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DmExpoReportRes.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.DmExpoReportRes();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a DmExpoReportRes message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DmExpoReportRes
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.DmExpoReportRes} DmExpoReportRes
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DmExpoReportRes.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a DmExpoReportRes message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.DmExpoReportRes
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DmExpoReportRes.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            return null;
                        };

                        /**
                         * Creates a DmExpoReportRes message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.DmExpoReportRes
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.DmExpoReportRes} DmExpoReportRes
                         */
                        DmExpoReportRes.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.DmExpoReportRes)
                                return object;
                            return new $root.bilibili.community.service.dm.v1.DmExpoReportRes();
                        };

                        /**
                         * Creates a plain object from a DmExpoReportRes message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.DmExpoReportRes
                         * @static
                         * @param {bilibili.community.service.dm.v1.DmExpoReportRes} message DmExpoReportRes
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DmExpoReportRes.toObject = function toObject() {
                            return {};
                        };

                        /**
                         * Converts this DmExpoReportRes to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.DmExpoReportRes
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DmExpoReportRes.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for DmExpoReportRes
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.DmExpoReportRes
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DmExpoReportRes.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.DmExpoReportRes";
                        };

                        return DmExpoReportRes;
                    })();

                    v1.DmPlayerConfigReq = (function() {

                        /**
                         * Properties of a DmPlayerConfigReq.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IDmPlayerConfigReq
                         * @property {number|Long|null} [ts] DmPlayerConfigReq ts
                         * @property {bilibili.community.service.dm.v1.IPlayerDanmakuSwitch|null} ["switch"] DmPlayerConfigReq switch
                         * @property {bilibili.community.service.dm.v1.IPlayerDanmakuSwitchSave|null} [switchSave] DmPlayerConfigReq switchSave
                         * @property {bilibili.community.service.dm.v1.IPlayerDanmakuUseDefaultConfig|null} [useDefaultConfig] DmPlayerConfigReq useDefaultConfig
                         * @property {bilibili.community.service.dm.v1.IPlayerDanmakuAiRecommendedSwitch|null} [aiRecommendedSwitch] DmPlayerConfigReq aiRecommendedSwitch
                         * @property {bilibili.community.service.dm.v1.IPlayerDanmakuAiRecommendedLevel|null} [aiRecommendedLevel] DmPlayerConfigReq aiRecommendedLevel
                         * @property {bilibili.community.service.dm.v1.IPlayerDanmakuBlocktop|null} [blocktop] DmPlayerConfigReq blocktop
                         * @property {bilibili.community.service.dm.v1.IPlayerDanmakuBlockscroll|null} [blockscroll] DmPlayerConfigReq blockscroll
                         * @property {bilibili.community.service.dm.v1.IPlayerDanmakuBlockbottom|null} [blockbottom] DmPlayerConfigReq blockbottom
                         * @property {bilibili.community.service.dm.v1.IPlayerDanmakuBlockcolorful|null} [blockcolorful] DmPlayerConfigReq blockcolorful
                         * @property {bilibili.community.service.dm.v1.IPlayerDanmakuBlockrepeat|null} [blockrepeat] DmPlayerConfigReq blockrepeat
                         * @property {bilibili.community.service.dm.v1.IPlayerDanmakuBlockspecial|null} [blockspecial] DmPlayerConfigReq blockspecial
                         * @property {bilibili.community.service.dm.v1.IPlayerDanmakuOpacity|null} [opacity] DmPlayerConfigReq opacity
                         * @property {bilibili.community.service.dm.v1.IPlayerDanmakuScalingfactor|null} [scalingfactor] DmPlayerConfigReq scalingfactor
                         * @property {bilibili.community.service.dm.v1.IPlayerDanmakuDomain|null} [domain] DmPlayerConfigReq domain
                         * @property {bilibili.community.service.dm.v1.IPlayerDanmakuSpeed|null} [speed] DmPlayerConfigReq speed
                         * @property {bilibili.community.service.dm.v1.IPlayerDanmakuEnableblocklist|null} [enableblocklist] DmPlayerConfigReq enableblocklist
                         * @property {bilibili.community.service.dm.v1.IInlinePlayerDanmakuSwitch|null} [inlinePlayerDanmakuSwitch] DmPlayerConfigReq inlinePlayerDanmakuSwitch
                         * @property {bilibili.community.service.dm.v1.IPlayerDanmakuSeniorModeSwitch|null} [seniorModeSwitch] DmPlayerConfigReq seniorModeSwitch
                         * @property {bilibili.community.service.dm.v1.IPlayerDanmakuAiRecommendedLevelV2|null} [aiRecommendedLevelV2] DmPlayerConfigReq aiRecommendedLevelV2
                         */

                        /**
                         * Constructs a new DmPlayerConfigReq.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a DmPlayerConfigReq.
                         * @implements IDmPlayerConfigReq
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IDmPlayerConfigReq=} [properties] Properties to set
                         */
                        function DmPlayerConfigReq(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * DmPlayerConfigReq ts.
                         * @member {number|Long} ts
                         * @memberof bilibili.community.service.dm.v1.DmPlayerConfigReq
                         * @instance
                         */
                        DmPlayerConfigReq.prototype.ts = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * DmPlayerConfigReq switch.
                         * @member {bilibili.community.service.dm.v1.IPlayerDanmakuSwitch|null|undefined} switch
                         * @memberof bilibili.community.service.dm.v1.DmPlayerConfigReq
                         * @instance
                         */
                        DmPlayerConfigReq.prototype["switch"] = null;

                        /**
                         * DmPlayerConfigReq switchSave.
                         * @member {bilibili.community.service.dm.v1.IPlayerDanmakuSwitchSave|null|undefined} switchSave
                         * @memberof bilibili.community.service.dm.v1.DmPlayerConfigReq
                         * @instance
                         */
                        DmPlayerConfigReq.prototype.switchSave = null;

                        /**
                         * DmPlayerConfigReq useDefaultConfig.
                         * @member {bilibili.community.service.dm.v1.IPlayerDanmakuUseDefaultConfig|null|undefined} useDefaultConfig
                         * @memberof bilibili.community.service.dm.v1.DmPlayerConfigReq
                         * @instance
                         */
                        DmPlayerConfigReq.prototype.useDefaultConfig = null;

                        /**
                         * DmPlayerConfigReq aiRecommendedSwitch.
                         * @member {bilibili.community.service.dm.v1.IPlayerDanmakuAiRecommendedSwitch|null|undefined} aiRecommendedSwitch
                         * @memberof bilibili.community.service.dm.v1.DmPlayerConfigReq
                         * @instance
                         */
                        DmPlayerConfigReq.prototype.aiRecommendedSwitch = null;

                        /**
                         * DmPlayerConfigReq aiRecommendedLevel.
                         * @member {bilibili.community.service.dm.v1.IPlayerDanmakuAiRecommendedLevel|null|undefined} aiRecommendedLevel
                         * @memberof bilibili.community.service.dm.v1.DmPlayerConfigReq
                         * @instance
                         */
                        DmPlayerConfigReq.prototype.aiRecommendedLevel = null;

                        /**
                         * DmPlayerConfigReq blocktop.
                         * @member {bilibili.community.service.dm.v1.IPlayerDanmakuBlocktop|null|undefined} blocktop
                         * @memberof bilibili.community.service.dm.v1.DmPlayerConfigReq
                         * @instance
                         */
                        DmPlayerConfigReq.prototype.blocktop = null;

                        /**
                         * DmPlayerConfigReq blockscroll.
                         * @member {bilibili.community.service.dm.v1.IPlayerDanmakuBlockscroll|null|undefined} blockscroll
                         * @memberof bilibili.community.service.dm.v1.DmPlayerConfigReq
                         * @instance
                         */
                        DmPlayerConfigReq.prototype.blockscroll = null;

                        /**
                         * DmPlayerConfigReq blockbottom.
                         * @member {bilibili.community.service.dm.v1.IPlayerDanmakuBlockbottom|null|undefined} blockbottom
                         * @memberof bilibili.community.service.dm.v1.DmPlayerConfigReq
                         * @instance
                         */
                        DmPlayerConfigReq.prototype.blockbottom = null;

                        /**
                         * DmPlayerConfigReq blockcolorful.
                         * @member {bilibili.community.service.dm.v1.IPlayerDanmakuBlockcolorful|null|undefined} blockcolorful
                         * @memberof bilibili.community.service.dm.v1.DmPlayerConfigReq
                         * @instance
                         */
                        DmPlayerConfigReq.prototype.blockcolorful = null;

                        /**
                         * DmPlayerConfigReq blockrepeat.
                         * @member {bilibili.community.service.dm.v1.IPlayerDanmakuBlockrepeat|null|undefined} blockrepeat
                         * @memberof bilibili.community.service.dm.v1.DmPlayerConfigReq
                         * @instance
                         */
                        DmPlayerConfigReq.prototype.blockrepeat = null;

                        /**
                         * DmPlayerConfigReq blockspecial.
                         * @member {bilibili.community.service.dm.v1.IPlayerDanmakuBlockspecial|null|undefined} blockspecial
                         * @memberof bilibili.community.service.dm.v1.DmPlayerConfigReq
                         * @instance
                         */
                        DmPlayerConfigReq.prototype.blockspecial = null;

                        /**
                         * DmPlayerConfigReq opacity.
                         * @member {bilibili.community.service.dm.v1.IPlayerDanmakuOpacity|null|undefined} opacity
                         * @memberof bilibili.community.service.dm.v1.DmPlayerConfigReq
                         * @instance
                         */
                        DmPlayerConfigReq.prototype.opacity = null;

                        /**
                         * DmPlayerConfigReq scalingfactor.
                         * @member {bilibili.community.service.dm.v1.IPlayerDanmakuScalingfactor|null|undefined} scalingfactor
                         * @memberof bilibili.community.service.dm.v1.DmPlayerConfigReq
                         * @instance
                         */
                        DmPlayerConfigReq.prototype.scalingfactor = null;

                        /**
                         * DmPlayerConfigReq domain.
                         * @member {bilibili.community.service.dm.v1.IPlayerDanmakuDomain|null|undefined} domain
                         * @memberof bilibili.community.service.dm.v1.DmPlayerConfigReq
                         * @instance
                         */
                        DmPlayerConfigReq.prototype.domain = null;

                        /**
                         * DmPlayerConfigReq speed.
                         * @member {bilibili.community.service.dm.v1.IPlayerDanmakuSpeed|null|undefined} speed
                         * @memberof bilibili.community.service.dm.v1.DmPlayerConfigReq
                         * @instance
                         */
                        DmPlayerConfigReq.prototype.speed = null;

                        /**
                         * DmPlayerConfigReq enableblocklist.
                         * @member {bilibili.community.service.dm.v1.IPlayerDanmakuEnableblocklist|null|undefined} enableblocklist
                         * @memberof bilibili.community.service.dm.v1.DmPlayerConfigReq
                         * @instance
                         */
                        DmPlayerConfigReq.prototype.enableblocklist = null;

                        /**
                         * DmPlayerConfigReq inlinePlayerDanmakuSwitch.
                         * @member {bilibili.community.service.dm.v1.IInlinePlayerDanmakuSwitch|null|undefined} inlinePlayerDanmakuSwitch
                         * @memberof bilibili.community.service.dm.v1.DmPlayerConfigReq
                         * @instance
                         */
                        DmPlayerConfigReq.prototype.inlinePlayerDanmakuSwitch = null;

                        /**
                         * DmPlayerConfigReq seniorModeSwitch.
                         * @member {bilibili.community.service.dm.v1.IPlayerDanmakuSeniorModeSwitch|null|undefined} seniorModeSwitch
                         * @memberof bilibili.community.service.dm.v1.DmPlayerConfigReq
                         * @instance
                         */
                        DmPlayerConfigReq.prototype.seniorModeSwitch = null;

                        /**
                         * DmPlayerConfigReq aiRecommendedLevelV2.
                         * @member {bilibili.community.service.dm.v1.IPlayerDanmakuAiRecommendedLevelV2|null|undefined} aiRecommendedLevelV2
                         * @memberof bilibili.community.service.dm.v1.DmPlayerConfigReq
                         * @instance
                         */
                        DmPlayerConfigReq.prototype.aiRecommendedLevelV2 = null;

                        /**
                         * Creates a new DmPlayerConfigReq instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.DmPlayerConfigReq
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmPlayerConfigReq=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.DmPlayerConfigReq} DmPlayerConfigReq instance
                         */
                        DmPlayerConfigReq.create = function create(properties) {
                            return new DmPlayerConfigReq(properties);
                        };

                        /**
                         * Encodes the specified DmPlayerConfigReq message. Does not implicitly {@link bilibili.community.service.dm.v1.DmPlayerConfigReq.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.DmPlayerConfigReq
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmPlayerConfigReq} message DmPlayerConfigReq message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DmPlayerConfigReq.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.ts != null && Object.hasOwnProperty.call(message, "ts"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.ts);
                            if (message["switch"] != null && Object.hasOwnProperty.call(message, "switch"))
                                $root.bilibili.community.service.dm.v1.PlayerDanmakuSwitch.encode(message["switch"], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.switchSave != null && Object.hasOwnProperty.call(message, "switchSave"))
                                $root.bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave.encode(message.switchSave, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.useDefaultConfig != null && Object.hasOwnProperty.call(message, "useDefaultConfig"))
                                $root.bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig.encode(message.useDefaultConfig, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.aiRecommendedSwitch != null && Object.hasOwnProperty.call(message, "aiRecommendedSwitch"))
                                $root.bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch.encode(message.aiRecommendedSwitch, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.aiRecommendedLevel != null && Object.hasOwnProperty.call(message, "aiRecommendedLevel"))
                                $root.bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel.encode(message.aiRecommendedLevel, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.blocktop != null && Object.hasOwnProperty.call(message, "blocktop"))
                                $root.bilibili.community.service.dm.v1.PlayerDanmakuBlocktop.encode(message.blocktop, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.blockscroll != null && Object.hasOwnProperty.call(message, "blockscroll"))
                                $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll.encode(message.blockscroll, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                            if (message.blockbottom != null && Object.hasOwnProperty.call(message, "blockbottom"))
                                $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom.encode(message.blockbottom, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                            if (message.blockcolorful != null && Object.hasOwnProperty.call(message, "blockcolorful"))
                                $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful.encode(message.blockcolorful, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                            if (message.blockrepeat != null && Object.hasOwnProperty.call(message, "blockrepeat"))
                                $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat.encode(message.blockrepeat, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                            if (message.blockspecial != null && Object.hasOwnProperty.call(message, "blockspecial"))
                                $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial.encode(message.blockspecial, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                            if (message.opacity != null && Object.hasOwnProperty.call(message, "opacity"))
                                $root.bilibili.community.service.dm.v1.PlayerDanmakuOpacity.encode(message.opacity, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                            if (message.scalingfactor != null && Object.hasOwnProperty.call(message, "scalingfactor"))
                                $root.bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor.encode(message.scalingfactor, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                            if (message.domain != null && Object.hasOwnProperty.call(message, "domain"))
                                $root.bilibili.community.service.dm.v1.PlayerDanmakuDomain.encode(message.domain, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
                            if (message.speed != null && Object.hasOwnProperty.call(message, "speed"))
                                $root.bilibili.community.service.dm.v1.PlayerDanmakuSpeed.encode(message.speed, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
                            if (message.enableblocklist != null && Object.hasOwnProperty.call(message, "enableblocklist"))
                                $root.bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist.encode(message.enableblocklist, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                            if (message.inlinePlayerDanmakuSwitch != null && Object.hasOwnProperty.call(message, "inlinePlayerDanmakuSwitch"))
                                $root.bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch.encode(message.inlinePlayerDanmakuSwitch, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
                            if (message.seniorModeSwitch != null && Object.hasOwnProperty.call(message, "seniorModeSwitch"))
                                $root.bilibili.community.service.dm.v1.PlayerDanmakuSeniorModeSwitch.encode(message.seniorModeSwitch, writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();
                            if (message.aiRecommendedLevelV2 != null && Object.hasOwnProperty.call(message, "aiRecommendedLevelV2"))
                                $root.bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevelV2.encode(message.aiRecommendedLevelV2, writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified DmPlayerConfigReq message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.DmPlayerConfigReq.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DmPlayerConfigReq
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmPlayerConfigReq} message DmPlayerConfigReq message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DmPlayerConfigReq.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a DmPlayerConfigReq message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.DmPlayerConfigReq
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.DmPlayerConfigReq} DmPlayerConfigReq
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DmPlayerConfigReq.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.DmPlayerConfigReq();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.ts = reader.int64();
                                        break;
                                    }
                                case 2: {
                                        message["switch"] = $root.bilibili.community.service.dm.v1.PlayerDanmakuSwitch.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.switchSave = $root.bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        message.useDefaultConfig = $root.bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 5: {
                                        message.aiRecommendedSwitch = $root.bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 6: {
                                        message.aiRecommendedLevel = $root.bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 7: {
                                        message.blocktop = $root.bilibili.community.service.dm.v1.PlayerDanmakuBlocktop.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 8: {
                                        message.blockscroll = $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 9: {
                                        message.blockbottom = $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 10: {
                                        message.blockcolorful = $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 11: {
                                        message.blockrepeat = $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 12: {
                                        message.blockspecial = $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 13: {
                                        message.opacity = $root.bilibili.community.service.dm.v1.PlayerDanmakuOpacity.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 14: {
                                        message.scalingfactor = $root.bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 15: {
                                        message.domain = $root.bilibili.community.service.dm.v1.PlayerDanmakuDomain.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 16: {
                                        message.speed = $root.bilibili.community.service.dm.v1.PlayerDanmakuSpeed.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 17: {
                                        message.enableblocklist = $root.bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 18: {
                                        message.inlinePlayerDanmakuSwitch = $root.bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 19: {
                                        message.seniorModeSwitch = $root.bilibili.community.service.dm.v1.PlayerDanmakuSeniorModeSwitch.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 20: {
                                        message.aiRecommendedLevelV2 = $root.bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevelV2.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a DmPlayerConfigReq message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DmPlayerConfigReq
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.DmPlayerConfigReq} DmPlayerConfigReq
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DmPlayerConfigReq.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a DmPlayerConfigReq message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.DmPlayerConfigReq
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DmPlayerConfigReq.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.ts != null && message.hasOwnProperty("ts"))
                                if (!$util.isInteger(message.ts) && !(message.ts && $util.isInteger(message.ts.low) && $util.isInteger(message.ts.high)))
                                    return "ts: integer|Long expected";
                            if (message["switch"] != null && message.hasOwnProperty("switch")) {
                                let error = $root.bilibili.community.service.dm.v1.PlayerDanmakuSwitch.verify(message["switch"]);
                                if (error)
                                    return "switch." + error;
                            }
                            if (message.switchSave != null && message.hasOwnProperty("switchSave")) {
                                let error = $root.bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave.verify(message.switchSave);
                                if (error)
                                    return "switchSave." + error;
                            }
                            if (message.useDefaultConfig != null && message.hasOwnProperty("useDefaultConfig")) {
                                let error = $root.bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig.verify(message.useDefaultConfig);
                                if (error)
                                    return "useDefaultConfig." + error;
                            }
                            if (message.aiRecommendedSwitch != null && message.hasOwnProperty("aiRecommendedSwitch")) {
                                let error = $root.bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch.verify(message.aiRecommendedSwitch);
                                if (error)
                                    return "aiRecommendedSwitch." + error;
                            }
                            if (message.aiRecommendedLevel != null && message.hasOwnProperty("aiRecommendedLevel")) {
                                let error = $root.bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel.verify(message.aiRecommendedLevel);
                                if (error)
                                    return "aiRecommendedLevel." + error;
                            }
                            if (message.blocktop != null && message.hasOwnProperty("blocktop")) {
                                let error = $root.bilibili.community.service.dm.v1.PlayerDanmakuBlocktop.verify(message.blocktop);
                                if (error)
                                    return "blocktop." + error;
                            }
                            if (message.blockscroll != null && message.hasOwnProperty("blockscroll")) {
                                let error = $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll.verify(message.blockscroll);
                                if (error)
                                    return "blockscroll." + error;
                            }
                            if (message.blockbottom != null && message.hasOwnProperty("blockbottom")) {
                                let error = $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom.verify(message.blockbottom);
                                if (error)
                                    return "blockbottom." + error;
                            }
                            if (message.blockcolorful != null && message.hasOwnProperty("blockcolorful")) {
                                let error = $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful.verify(message.blockcolorful);
                                if (error)
                                    return "blockcolorful." + error;
                            }
                            if (message.blockrepeat != null && message.hasOwnProperty("blockrepeat")) {
                                let error = $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat.verify(message.blockrepeat);
                                if (error)
                                    return "blockrepeat." + error;
                            }
                            if (message.blockspecial != null && message.hasOwnProperty("blockspecial")) {
                                let error = $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial.verify(message.blockspecial);
                                if (error)
                                    return "blockspecial." + error;
                            }
                            if (message.opacity != null && message.hasOwnProperty("opacity")) {
                                let error = $root.bilibili.community.service.dm.v1.PlayerDanmakuOpacity.verify(message.opacity);
                                if (error)
                                    return "opacity." + error;
                            }
                            if (message.scalingfactor != null && message.hasOwnProperty("scalingfactor")) {
                                let error = $root.bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor.verify(message.scalingfactor);
                                if (error)
                                    return "scalingfactor." + error;
                            }
                            if (message.domain != null && message.hasOwnProperty("domain")) {
                                let error = $root.bilibili.community.service.dm.v1.PlayerDanmakuDomain.verify(message.domain);
                                if (error)
                                    return "domain." + error;
                            }
                            if (message.speed != null && message.hasOwnProperty("speed")) {
                                let error = $root.bilibili.community.service.dm.v1.PlayerDanmakuSpeed.verify(message.speed);
                                if (error)
                                    return "speed." + error;
                            }
                            if (message.enableblocklist != null && message.hasOwnProperty("enableblocklist")) {
                                let error = $root.bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist.verify(message.enableblocklist);
                                if (error)
                                    return "enableblocklist." + error;
                            }
                            if (message.inlinePlayerDanmakuSwitch != null && message.hasOwnProperty("inlinePlayerDanmakuSwitch")) {
                                let error = $root.bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch.verify(message.inlinePlayerDanmakuSwitch);
                                if (error)
                                    return "inlinePlayerDanmakuSwitch." + error;
                            }
                            if (message.seniorModeSwitch != null && message.hasOwnProperty("seniorModeSwitch")) {
                                let error = $root.bilibili.community.service.dm.v1.PlayerDanmakuSeniorModeSwitch.verify(message.seniorModeSwitch);
                                if (error)
                                    return "seniorModeSwitch." + error;
                            }
                            if (message.aiRecommendedLevelV2 != null && message.hasOwnProperty("aiRecommendedLevelV2")) {
                                let error = $root.bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevelV2.verify(message.aiRecommendedLevelV2);
                                if (error)
                                    return "aiRecommendedLevelV2." + error;
                            }
                            return null;
                        };

                        /**
                         * Creates a DmPlayerConfigReq message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.DmPlayerConfigReq
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.DmPlayerConfigReq} DmPlayerConfigReq
                         */
                        DmPlayerConfigReq.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.DmPlayerConfigReq)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.DmPlayerConfigReq();
                            if (object.ts != null)
                                if ($util.Long)
                                    (message.ts = $util.Long.fromValue(object.ts)).unsigned = false;
                                else if (typeof object.ts === "string")
                                    message.ts = parseInt(object.ts, 10);
                                else if (typeof object.ts === "number")
                                    message.ts = object.ts;
                                else if (typeof object.ts === "object")
                                    message.ts = new $util.LongBits(object.ts.low >>> 0, object.ts.high >>> 0).toNumber();
                            if (object["switch"] != null) {
                                if (typeof object["switch"] !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DmPlayerConfigReq.switch: object expected");
                                message["switch"] = $root.bilibili.community.service.dm.v1.PlayerDanmakuSwitch.fromObject(object["switch"]);
                            }
                            if (object.switchSave != null) {
                                if (typeof object.switchSave !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DmPlayerConfigReq.switchSave: object expected");
                                message.switchSave = $root.bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave.fromObject(object.switchSave);
                            }
                            if (object.useDefaultConfig != null) {
                                if (typeof object.useDefaultConfig !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DmPlayerConfigReq.useDefaultConfig: object expected");
                                message.useDefaultConfig = $root.bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig.fromObject(object.useDefaultConfig);
                            }
                            if (object.aiRecommendedSwitch != null) {
                                if (typeof object.aiRecommendedSwitch !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DmPlayerConfigReq.aiRecommendedSwitch: object expected");
                                message.aiRecommendedSwitch = $root.bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch.fromObject(object.aiRecommendedSwitch);
                            }
                            if (object.aiRecommendedLevel != null) {
                                if (typeof object.aiRecommendedLevel !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DmPlayerConfigReq.aiRecommendedLevel: object expected");
                                message.aiRecommendedLevel = $root.bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel.fromObject(object.aiRecommendedLevel);
                            }
                            if (object.blocktop != null) {
                                if (typeof object.blocktop !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DmPlayerConfigReq.blocktop: object expected");
                                message.blocktop = $root.bilibili.community.service.dm.v1.PlayerDanmakuBlocktop.fromObject(object.blocktop);
                            }
                            if (object.blockscroll != null) {
                                if (typeof object.blockscroll !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DmPlayerConfigReq.blockscroll: object expected");
                                message.blockscroll = $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll.fromObject(object.blockscroll);
                            }
                            if (object.blockbottom != null) {
                                if (typeof object.blockbottom !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DmPlayerConfigReq.blockbottom: object expected");
                                message.blockbottom = $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom.fromObject(object.blockbottom);
                            }
                            if (object.blockcolorful != null) {
                                if (typeof object.blockcolorful !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DmPlayerConfigReq.blockcolorful: object expected");
                                message.blockcolorful = $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful.fromObject(object.blockcolorful);
                            }
                            if (object.blockrepeat != null) {
                                if (typeof object.blockrepeat !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DmPlayerConfigReq.blockrepeat: object expected");
                                message.blockrepeat = $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat.fromObject(object.blockrepeat);
                            }
                            if (object.blockspecial != null) {
                                if (typeof object.blockspecial !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DmPlayerConfigReq.blockspecial: object expected");
                                message.blockspecial = $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial.fromObject(object.blockspecial);
                            }
                            if (object.opacity != null) {
                                if (typeof object.opacity !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DmPlayerConfigReq.opacity: object expected");
                                message.opacity = $root.bilibili.community.service.dm.v1.PlayerDanmakuOpacity.fromObject(object.opacity);
                            }
                            if (object.scalingfactor != null) {
                                if (typeof object.scalingfactor !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DmPlayerConfigReq.scalingfactor: object expected");
                                message.scalingfactor = $root.bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor.fromObject(object.scalingfactor);
                            }
                            if (object.domain != null) {
                                if (typeof object.domain !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DmPlayerConfigReq.domain: object expected");
                                message.domain = $root.bilibili.community.service.dm.v1.PlayerDanmakuDomain.fromObject(object.domain);
                            }
                            if (object.speed != null) {
                                if (typeof object.speed !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DmPlayerConfigReq.speed: object expected");
                                message.speed = $root.bilibili.community.service.dm.v1.PlayerDanmakuSpeed.fromObject(object.speed);
                            }
                            if (object.enableblocklist != null) {
                                if (typeof object.enableblocklist !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DmPlayerConfigReq.enableblocklist: object expected");
                                message.enableblocklist = $root.bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist.fromObject(object.enableblocklist);
                            }
                            if (object.inlinePlayerDanmakuSwitch != null) {
                                if (typeof object.inlinePlayerDanmakuSwitch !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DmPlayerConfigReq.inlinePlayerDanmakuSwitch: object expected");
                                message.inlinePlayerDanmakuSwitch = $root.bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch.fromObject(object.inlinePlayerDanmakuSwitch);
                            }
                            if (object.seniorModeSwitch != null) {
                                if (typeof object.seniorModeSwitch !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DmPlayerConfigReq.seniorModeSwitch: object expected");
                                message.seniorModeSwitch = $root.bilibili.community.service.dm.v1.PlayerDanmakuSeniorModeSwitch.fromObject(object.seniorModeSwitch);
                            }
                            if (object.aiRecommendedLevelV2 != null) {
                                if (typeof object.aiRecommendedLevelV2 !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DmPlayerConfigReq.aiRecommendedLevelV2: object expected");
                                message.aiRecommendedLevelV2 = $root.bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevelV2.fromObject(object.aiRecommendedLevelV2);
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a DmPlayerConfigReq message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.DmPlayerConfigReq
                         * @static
                         * @param {bilibili.community.service.dm.v1.DmPlayerConfigReq} message DmPlayerConfigReq
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DmPlayerConfigReq.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.ts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.ts = options.longs === String ? "0" : 0;
                                object["switch"] = null;
                                object.switchSave = null;
                                object.useDefaultConfig = null;
                                object.aiRecommendedSwitch = null;
                                object.aiRecommendedLevel = null;
                                object.blocktop = null;
                                object.blockscroll = null;
                                object.blockbottom = null;
                                object.blockcolorful = null;
                                object.blockrepeat = null;
                                object.blockspecial = null;
                                object.opacity = null;
                                object.scalingfactor = null;
                                object.domain = null;
                                object.speed = null;
                                object.enableblocklist = null;
                                object.inlinePlayerDanmakuSwitch = null;
                                object.seniorModeSwitch = null;
                                object.aiRecommendedLevelV2 = null;
                            }
                            if (message.ts != null && message.hasOwnProperty("ts"))
                                if (typeof message.ts === "number")
                                    object.ts = options.longs === String ? String(message.ts) : message.ts;
                                else
                                    object.ts = options.longs === String ? $util.Long.prototype.toString.call(message.ts) : options.longs === Number ? new $util.LongBits(message.ts.low >>> 0, message.ts.high >>> 0).toNumber() : message.ts;
                            if (message["switch"] != null && message.hasOwnProperty("switch"))
                                object["switch"] = $root.bilibili.community.service.dm.v1.PlayerDanmakuSwitch.toObject(message["switch"], options);
                            if (message.switchSave != null && message.hasOwnProperty("switchSave"))
                                object.switchSave = $root.bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave.toObject(message.switchSave, options);
                            if (message.useDefaultConfig != null && message.hasOwnProperty("useDefaultConfig"))
                                object.useDefaultConfig = $root.bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig.toObject(message.useDefaultConfig, options);
                            if (message.aiRecommendedSwitch != null && message.hasOwnProperty("aiRecommendedSwitch"))
                                object.aiRecommendedSwitch = $root.bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch.toObject(message.aiRecommendedSwitch, options);
                            if (message.aiRecommendedLevel != null && message.hasOwnProperty("aiRecommendedLevel"))
                                object.aiRecommendedLevel = $root.bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel.toObject(message.aiRecommendedLevel, options);
                            if (message.blocktop != null && message.hasOwnProperty("blocktop"))
                                object.blocktop = $root.bilibili.community.service.dm.v1.PlayerDanmakuBlocktop.toObject(message.blocktop, options);
                            if (message.blockscroll != null && message.hasOwnProperty("blockscroll"))
                                object.blockscroll = $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll.toObject(message.blockscroll, options);
                            if (message.blockbottom != null && message.hasOwnProperty("blockbottom"))
                                object.blockbottom = $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom.toObject(message.blockbottom, options);
                            if (message.blockcolorful != null && message.hasOwnProperty("blockcolorful"))
                                object.blockcolorful = $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful.toObject(message.blockcolorful, options);
                            if (message.blockrepeat != null && message.hasOwnProperty("blockrepeat"))
                                object.blockrepeat = $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat.toObject(message.blockrepeat, options);
                            if (message.blockspecial != null && message.hasOwnProperty("blockspecial"))
                                object.blockspecial = $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial.toObject(message.blockspecial, options);
                            if (message.opacity != null && message.hasOwnProperty("opacity"))
                                object.opacity = $root.bilibili.community.service.dm.v1.PlayerDanmakuOpacity.toObject(message.opacity, options);
                            if (message.scalingfactor != null && message.hasOwnProperty("scalingfactor"))
                                object.scalingfactor = $root.bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor.toObject(message.scalingfactor, options);
                            if (message.domain != null && message.hasOwnProperty("domain"))
                                object.domain = $root.bilibili.community.service.dm.v1.PlayerDanmakuDomain.toObject(message.domain, options);
                            if (message.speed != null && message.hasOwnProperty("speed"))
                                object.speed = $root.bilibili.community.service.dm.v1.PlayerDanmakuSpeed.toObject(message.speed, options);
                            if (message.enableblocklist != null && message.hasOwnProperty("enableblocklist"))
                                object.enableblocklist = $root.bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist.toObject(message.enableblocklist, options);
                            if (message.inlinePlayerDanmakuSwitch != null && message.hasOwnProperty("inlinePlayerDanmakuSwitch"))
                                object.inlinePlayerDanmakuSwitch = $root.bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch.toObject(message.inlinePlayerDanmakuSwitch, options);
                            if (message.seniorModeSwitch != null && message.hasOwnProperty("seniorModeSwitch"))
                                object.seniorModeSwitch = $root.bilibili.community.service.dm.v1.PlayerDanmakuSeniorModeSwitch.toObject(message.seniorModeSwitch, options);
                            if (message.aiRecommendedLevelV2 != null && message.hasOwnProperty("aiRecommendedLevelV2"))
                                object.aiRecommendedLevelV2 = $root.bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevelV2.toObject(message.aiRecommendedLevelV2, options);
                            return object;
                        };

                        /**
                         * Converts this DmPlayerConfigReq to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.DmPlayerConfigReq
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DmPlayerConfigReq.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for DmPlayerConfigReq
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.DmPlayerConfigReq
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DmPlayerConfigReq.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.DmPlayerConfigReq";
                        };

                        return DmPlayerConfigReq;
                    })();

                    v1.DmSegConfig = (function() {

                        /**
                         * Properties of a DmSegConfig.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IDmSegConfig
                         * @property {number|Long|null} [pageSize] DmSegConfig pageSize
                         * @property {number|Long|null} [total] DmSegConfig total
                         */

                        /**
                         * Constructs a new DmSegConfig.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a DmSegConfig.
                         * @implements IDmSegConfig
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IDmSegConfig=} [properties] Properties to set
                         */
                        function DmSegConfig(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * DmSegConfig pageSize.
                         * @member {number|Long} pageSize
                         * @memberof bilibili.community.service.dm.v1.DmSegConfig
                         * @instance
                         */
                        DmSegConfig.prototype.pageSize = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * DmSegConfig total.
                         * @member {number|Long} total
                         * @memberof bilibili.community.service.dm.v1.DmSegConfig
                         * @instance
                         */
                        DmSegConfig.prototype.total = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * Creates a new DmSegConfig instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.DmSegConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmSegConfig=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.DmSegConfig} DmSegConfig instance
                         */
                        DmSegConfig.create = function create(properties) {
                            return new DmSegConfig(properties);
                        };

                        /**
                         * Encodes the specified DmSegConfig message. Does not implicitly {@link bilibili.community.service.dm.v1.DmSegConfig.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.DmSegConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmSegConfig} message DmSegConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DmSegConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.pageSize != null && Object.hasOwnProperty.call(message, "pageSize"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.pageSize);
                            if (message.total != null && Object.hasOwnProperty.call(message, "total"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.total);
                            return writer;
                        };

                        /**
                         * Encodes the specified DmSegConfig message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.DmSegConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DmSegConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmSegConfig} message DmSegConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DmSegConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a DmSegConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.DmSegConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.DmSegConfig} DmSegConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DmSegConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.DmSegConfig();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.pageSize = reader.int64();
                                        break;
                                    }
                                case 2: {
                                        message.total = reader.int64();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a DmSegConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DmSegConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.DmSegConfig} DmSegConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DmSegConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a DmSegConfig message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.DmSegConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DmSegConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (!$util.isInteger(message.pageSize) && !(message.pageSize && $util.isInteger(message.pageSize.low) && $util.isInteger(message.pageSize.high)))
                                    return "pageSize: integer|Long expected";
                            if (message.total != null && message.hasOwnProperty("total"))
                                if (!$util.isInteger(message.total) && !(message.total && $util.isInteger(message.total.low) && $util.isInteger(message.total.high)))
                                    return "total: integer|Long expected";
                            return null;
                        };

                        /**
                         * Creates a DmSegConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.DmSegConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.DmSegConfig} DmSegConfig
                         */
                        DmSegConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.DmSegConfig)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.DmSegConfig();
                            if (object.pageSize != null)
                                if ($util.Long)
                                    (message.pageSize = $util.Long.fromValue(object.pageSize)).unsigned = false;
                                else if (typeof object.pageSize === "string")
                                    message.pageSize = parseInt(object.pageSize, 10);
                                else if (typeof object.pageSize === "number")
                                    message.pageSize = object.pageSize;
                                else if (typeof object.pageSize === "object")
                                    message.pageSize = new $util.LongBits(object.pageSize.low >>> 0, object.pageSize.high >>> 0).toNumber();
                            if (object.total != null)
                                if ($util.Long)
                                    (message.total = $util.Long.fromValue(object.total)).unsigned = false;
                                else if (typeof object.total === "string")
                                    message.total = parseInt(object.total, 10);
                                else if (typeof object.total === "number")
                                    message.total = object.total;
                                else if (typeof object.total === "object")
                                    message.total = new $util.LongBits(object.total.low >>> 0, object.total.high >>> 0).toNumber();
                            return message;
                        };

                        /**
                         * Creates a plain object from a DmSegConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.DmSegConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.DmSegConfig} message DmSegConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DmSegConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.pageSize = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.pageSize = options.longs === String ? "0" : 0;
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.total = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.total = options.longs === String ? "0" : 0;
                            }
                            if (message.pageSize != null && message.hasOwnProperty("pageSize"))
                                if (typeof message.pageSize === "number")
                                    object.pageSize = options.longs === String ? String(message.pageSize) : message.pageSize;
                                else
                                    object.pageSize = options.longs === String ? $util.Long.prototype.toString.call(message.pageSize) : options.longs === Number ? new $util.LongBits(message.pageSize.low >>> 0, message.pageSize.high >>> 0).toNumber() : message.pageSize;
                            if (message.total != null && message.hasOwnProperty("total"))
                                if (typeof message.total === "number")
                                    object.total = options.longs === String ? String(message.total) : message.total;
                                else
                                    object.total = options.longs === String ? $util.Long.prototype.toString.call(message.total) : options.longs === Number ? new $util.LongBits(message.total.low >>> 0, message.total.high >>> 0).toNumber() : message.total;
                            return object;
                        };

                        /**
                         * Converts this DmSegConfig to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.DmSegConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DmSegConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for DmSegConfig
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.DmSegConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DmSegConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.DmSegConfig";
                        };

                        return DmSegConfig;
                    })();

                    v1.DmSegMobileReply = (function() {

                        /**
                         * Properties of a DmSegMobileReply.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IDmSegMobileReply
                         * @property {Array.<bilibili.community.service.dm.v1.IDanmakuElem>|null} [elems] DmSegMobileReply elems
                         * @property {number|null} [state] DmSegMobileReply state
                         * @property {bilibili.community.service.dm.v1.IDanmakuAIFlag|null} [aiFlag] DmSegMobileReply aiFlag
                         * @property {Array.<bilibili.community.service.dm.v1.IDmColorful>|null} [colorfulSrc] DmSegMobileReply colorfulSrc
                         */

                        /**
                         * Constructs a new DmSegMobileReply.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a DmSegMobileReply.
                         * @implements IDmSegMobileReply
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IDmSegMobileReply=} [properties] Properties to set
                         */
                        function DmSegMobileReply(properties) {
                            this.elems = [];
                            this.colorfulSrc = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * DmSegMobileReply elems.
                         * @member {Array.<bilibili.community.service.dm.v1.IDanmakuElem>} elems
                         * @memberof bilibili.community.service.dm.v1.DmSegMobileReply
                         * @instance
                         */
                        DmSegMobileReply.prototype.elems = $util.emptyArray;

                        /**
                         * DmSegMobileReply state.
                         * @member {number} state
                         * @memberof bilibili.community.service.dm.v1.DmSegMobileReply
                         * @instance
                         */
                        DmSegMobileReply.prototype.state = 0;

                        /**
                         * DmSegMobileReply aiFlag.
                         * @member {bilibili.community.service.dm.v1.IDanmakuAIFlag|null|undefined} aiFlag
                         * @memberof bilibili.community.service.dm.v1.DmSegMobileReply
                         * @instance
                         */
                        DmSegMobileReply.prototype.aiFlag = null;

                        /**
                         * DmSegMobileReply colorfulSrc.
                         * @member {Array.<bilibili.community.service.dm.v1.IDmColorful>} colorfulSrc
                         * @memberof bilibili.community.service.dm.v1.DmSegMobileReply
                         * @instance
                         */
                        DmSegMobileReply.prototype.colorfulSrc = $util.emptyArray;

                        /**
                         * Creates a new DmSegMobileReply instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.DmSegMobileReply
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmSegMobileReply=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.DmSegMobileReply} DmSegMobileReply instance
                         */
                        DmSegMobileReply.create = function create(properties) {
                            return new DmSegMobileReply(properties);
                        };

                        /**
                         * Encodes the specified DmSegMobileReply message. Does not implicitly {@link bilibili.community.service.dm.v1.DmSegMobileReply.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.DmSegMobileReply
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmSegMobileReply} message DmSegMobileReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DmSegMobileReply.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.elems != null && message.elems.length)
                                for (let i = 0; i < message.elems.length; ++i)
                                    $root.bilibili.community.service.dm.v1.DanmakuElem.encode(message.elems[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.state);
                            if (message.aiFlag != null && Object.hasOwnProperty.call(message, "aiFlag"))
                                $root.bilibili.community.service.dm.v1.DanmakuAIFlag.encode(message.aiFlag, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.colorfulSrc != null && message.colorfulSrc.length)
                                for (let i = 0; i < message.colorfulSrc.length; ++i)
                                    $root.bilibili.community.service.dm.v1.DmColorful.encode(message.colorfulSrc[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified DmSegMobileReply message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.DmSegMobileReply.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DmSegMobileReply
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmSegMobileReply} message DmSegMobileReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DmSegMobileReply.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a DmSegMobileReply message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.DmSegMobileReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.DmSegMobileReply} DmSegMobileReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DmSegMobileReply.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.DmSegMobileReply();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.elems && message.elems.length))
                                            message.elems = [];
                                        message.elems.push($root.bilibili.community.service.dm.v1.DanmakuElem.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 2: {
                                        message.state = reader.int32();
                                        break;
                                    }
                                case 3: {
                                        message.aiFlag = $root.bilibili.community.service.dm.v1.DanmakuAIFlag.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 5: {
                                        if (!(message.colorfulSrc && message.colorfulSrc.length))
                                            message.colorfulSrc = [];
                                        message.colorfulSrc.push($root.bilibili.community.service.dm.v1.DmColorful.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a DmSegMobileReply message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DmSegMobileReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.DmSegMobileReply} DmSegMobileReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DmSegMobileReply.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a DmSegMobileReply message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.DmSegMobileReply
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DmSegMobileReply.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.elems != null && message.hasOwnProperty("elems")) {
                                if (!Array.isArray(message.elems))
                                    return "elems: array expected";
                                for (let i = 0; i < message.elems.length; ++i) {
                                    let error = $root.bilibili.community.service.dm.v1.DanmakuElem.verify(message.elems[i]);
                                    if (error)
                                        return "elems." + error;
                                }
                            }
                            if (message.state != null && message.hasOwnProperty("state"))
                                if (!$util.isInteger(message.state))
                                    return "state: integer expected";
                            if (message.aiFlag != null && message.hasOwnProperty("aiFlag")) {
                                let error = $root.bilibili.community.service.dm.v1.DanmakuAIFlag.verify(message.aiFlag);
                                if (error)
                                    return "aiFlag." + error;
                            }
                            if (message.colorfulSrc != null && message.hasOwnProperty("colorfulSrc")) {
                                if (!Array.isArray(message.colorfulSrc))
                                    return "colorfulSrc: array expected";
                                for (let i = 0; i < message.colorfulSrc.length; ++i) {
                                    let error = $root.bilibili.community.service.dm.v1.DmColorful.verify(message.colorfulSrc[i]);
                                    if (error)
                                        return "colorfulSrc." + error;
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates a DmSegMobileReply message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.DmSegMobileReply
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.DmSegMobileReply} DmSegMobileReply
                         */
                        DmSegMobileReply.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.DmSegMobileReply)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.DmSegMobileReply();
                            if (object.elems) {
                                if (!Array.isArray(object.elems))
                                    throw TypeError(".bilibili.community.service.dm.v1.DmSegMobileReply.elems: array expected");
                                message.elems = [];
                                for (let i = 0; i < object.elems.length; ++i) {
                                    if (typeof object.elems[i] !== "object")
                                        throw TypeError(".bilibili.community.service.dm.v1.DmSegMobileReply.elems: object expected");
                                    message.elems[i] = $root.bilibili.community.service.dm.v1.DanmakuElem.fromObject(object.elems[i]);
                                }
                            }
                            if (object.state != null)
                                message.state = object.state | 0;
                            if (object.aiFlag != null) {
                                if (typeof object.aiFlag !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DmSegMobileReply.aiFlag: object expected");
                                message.aiFlag = $root.bilibili.community.service.dm.v1.DanmakuAIFlag.fromObject(object.aiFlag);
                            }
                            if (object.colorfulSrc) {
                                if (!Array.isArray(object.colorfulSrc))
                                    throw TypeError(".bilibili.community.service.dm.v1.DmSegMobileReply.colorfulSrc: array expected");
                                message.colorfulSrc = [];
                                for (let i = 0; i < object.colorfulSrc.length; ++i) {
                                    if (typeof object.colorfulSrc[i] !== "object")
                                        throw TypeError(".bilibili.community.service.dm.v1.DmSegMobileReply.colorfulSrc: object expected");
                                    message.colorfulSrc[i] = $root.bilibili.community.service.dm.v1.DmColorful.fromObject(object.colorfulSrc[i]);
                                }
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a DmSegMobileReply message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.DmSegMobileReply
                         * @static
                         * @param {bilibili.community.service.dm.v1.DmSegMobileReply} message DmSegMobileReply
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DmSegMobileReply.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults) {
                                object.elems = [];
                                object.colorfulSrc = [];
                            }
                            if (options.defaults) {
                                object.state = 0;
                                object.aiFlag = null;
                            }
                            if (message.elems && message.elems.length) {
                                object.elems = [];
                                for (let j = 0; j < message.elems.length; ++j)
                                    object.elems[j] = $root.bilibili.community.service.dm.v1.DanmakuElem.toObject(message.elems[j], options);
                            }
                            if (message.state != null && message.hasOwnProperty("state"))
                                object.state = message.state;
                            if (message.aiFlag != null && message.hasOwnProperty("aiFlag"))
                                object.aiFlag = $root.bilibili.community.service.dm.v1.DanmakuAIFlag.toObject(message.aiFlag, options);
                            if (message.colorfulSrc && message.colorfulSrc.length) {
                                object.colorfulSrc = [];
                                for (let j = 0; j < message.colorfulSrc.length; ++j)
                                    object.colorfulSrc[j] = $root.bilibili.community.service.dm.v1.DmColorful.toObject(message.colorfulSrc[j], options);
                            }
                            return object;
                        };

                        /**
                         * Converts this DmSegMobileReply to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.DmSegMobileReply
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DmSegMobileReply.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for DmSegMobileReply
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.DmSegMobileReply
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DmSegMobileReply.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.DmSegMobileReply";
                        };

                        return DmSegMobileReply;
                    })();

                    v1.DmSegMobileReq = (function() {

                        /**
                         * Properties of a DmSegMobileReq.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IDmSegMobileReq
                         * @property {number|Long|null} [pid] DmSegMobileReq pid
                         * @property {number|Long|null} [oid] DmSegMobileReq oid
                         * @property {number|null} [type] DmSegMobileReq type
                         * @property {number|Long|null} [segmentIndex] DmSegMobileReq segmentIndex
                         * @property {number|null} [teenagersMode] DmSegMobileReq teenagersMode
                         * @property {number|Long|null} [ps] DmSegMobileReq ps
                         * @property {number|Long|null} [pe] DmSegMobileReq pe
                         * @property {number|null} [pullMode] DmSegMobileReq pullMode
                         * @property {number|null} [fromScene] DmSegMobileReq fromScene
                         */

                        /**
                         * Constructs a new DmSegMobileReq.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a DmSegMobileReq.
                         * @implements IDmSegMobileReq
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IDmSegMobileReq=} [properties] Properties to set
                         */
                        function DmSegMobileReq(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * DmSegMobileReq pid.
                         * @member {number|Long} pid
                         * @memberof bilibili.community.service.dm.v1.DmSegMobileReq
                         * @instance
                         */
                        DmSegMobileReq.prototype.pid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * DmSegMobileReq oid.
                         * @member {number|Long} oid
                         * @memberof bilibili.community.service.dm.v1.DmSegMobileReq
                         * @instance
                         */
                        DmSegMobileReq.prototype.oid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * DmSegMobileReq type.
                         * @member {number} type
                         * @memberof bilibili.community.service.dm.v1.DmSegMobileReq
                         * @instance
                         */
                        DmSegMobileReq.prototype.type = 0;

                        /**
                         * DmSegMobileReq segmentIndex.
                         * @member {number|Long} segmentIndex
                         * @memberof bilibili.community.service.dm.v1.DmSegMobileReq
                         * @instance
                         */
                        DmSegMobileReq.prototype.segmentIndex = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * DmSegMobileReq teenagersMode.
                         * @member {number} teenagersMode
                         * @memberof bilibili.community.service.dm.v1.DmSegMobileReq
                         * @instance
                         */
                        DmSegMobileReq.prototype.teenagersMode = 0;

                        /**
                         * DmSegMobileReq ps.
                         * @member {number|Long} ps
                         * @memberof bilibili.community.service.dm.v1.DmSegMobileReq
                         * @instance
                         */
                        DmSegMobileReq.prototype.ps = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * DmSegMobileReq pe.
                         * @member {number|Long} pe
                         * @memberof bilibili.community.service.dm.v1.DmSegMobileReq
                         * @instance
                         */
                        DmSegMobileReq.prototype.pe = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * DmSegMobileReq pullMode.
                         * @member {number} pullMode
                         * @memberof bilibili.community.service.dm.v1.DmSegMobileReq
                         * @instance
                         */
                        DmSegMobileReq.prototype.pullMode = 0;

                        /**
                         * DmSegMobileReq fromScene.
                         * @member {number} fromScene
                         * @memberof bilibili.community.service.dm.v1.DmSegMobileReq
                         * @instance
                         */
                        DmSegMobileReq.prototype.fromScene = 0;

                        /**
                         * Creates a new DmSegMobileReq instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.DmSegMobileReq
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmSegMobileReq=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.DmSegMobileReq} DmSegMobileReq instance
                         */
                        DmSegMobileReq.create = function create(properties) {
                            return new DmSegMobileReq(properties);
                        };

                        /**
                         * Encodes the specified DmSegMobileReq message. Does not implicitly {@link bilibili.community.service.dm.v1.DmSegMobileReq.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.DmSegMobileReq
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmSegMobileReq} message DmSegMobileReq message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DmSegMobileReq.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.pid != null && Object.hasOwnProperty.call(message, "pid"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.pid);
                            if (message.oid != null && Object.hasOwnProperty.call(message, "oid"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.oid);
                            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.type);
                            if (message.segmentIndex != null && Object.hasOwnProperty.call(message, "segmentIndex"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.segmentIndex);
                            if (message.teenagersMode != null && Object.hasOwnProperty.call(message, "teenagersMode"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.teenagersMode);
                            if (message.ps != null && Object.hasOwnProperty.call(message, "ps"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int64(message.ps);
                            if (message.pe != null && Object.hasOwnProperty.call(message, "pe"))
                                writer.uint32(/* id 7, wireType 0 =*/56).int64(message.pe);
                            if (message.pullMode != null && Object.hasOwnProperty.call(message, "pullMode"))
                                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.pullMode);
                            if (message.fromScene != null && Object.hasOwnProperty.call(message, "fromScene"))
                                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.fromScene);
                            return writer;
                        };

                        /**
                         * Encodes the specified DmSegMobileReq message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.DmSegMobileReq.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DmSegMobileReq
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmSegMobileReq} message DmSegMobileReq message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DmSegMobileReq.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a DmSegMobileReq message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.DmSegMobileReq
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.DmSegMobileReq} DmSegMobileReq
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DmSegMobileReq.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.DmSegMobileReq();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.pid = reader.int64();
                                        break;
                                    }
                                case 2: {
                                        message.oid = reader.int64();
                                        break;
                                    }
                                case 3: {
                                        message.type = reader.int32();
                                        break;
                                    }
                                case 4: {
                                        message.segmentIndex = reader.int64();
                                        break;
                                    }
                                case 5: {
                                        message.teenagersMode = reader.int32();
                                        break;
                                    }
                                case 6: {
                                        message.ps = reader.int64();
                                        break;
                                    }
                                case 7: {
                                        message.pe = reader.int64();
                                        break;
                                    }
                                case 8: {
                                        message.pullMode = reader.int32();
                                        break;
                                    }
                                case 9: {
                                        message.fromScene = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a DmSegMobileReq message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DmSegMobileReq
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.DmSegMobileReq} DmSegMobileReq
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DmSegMobileReq.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a DmSegMobileReq message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.DmSegMobileReq
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DmSegMobileReq.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.pid != null && message.hasOwnProperty("pid"))
                                if (!$util.isInteger(message.pid) && !(message.pid && $util.isInteger(message.pid.low) && $util.isInteger(message.pid.high)))
                                    return "pid: integer|Long expected";
                            if (message.oid != null && message.hasOwnProperty("oid"))
                                if (!$util.isInteger(message.oid) && !(message.oid && $util.isInteger(message.oid.low) && $util.isInteger(message.oid.high)))
                                    return "oid: integer|Long expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                if (!$util.isInteger(message.type))
                                    return "type: integer expected";
                            if (message.segmentIndex != null && message.hasOwnProperty("segmentIndex"))
                                if (!$util.isInteger(message.segmentIndex) && !(message.segmentIndex && $util.isInteger(message.segmentIndex.low) && $util.isInteger(message.segmentIndex.high)))
                                    return "segmentIndex: integer|Long expected";
                            if (message.teenagersMode != null && message.hasOwnProperty("teenagersMode"))
                                if (!$util.isInteger(message.teenagersMode))
                                    return "teenagersMode: integer expected";
                            if (message.ps != null && message.hasOwnProperty("ps"))
                                if (!$util.isInteger(message.ps) && !(message.ps && $util.isInteger(message.ps.low) && $util.isInteger(message.ps.high)))
                                    return "ps: integer|Long expected";
                            if (message.pe != null && message.hasOwnProperty("pe"))
                                if (!$util.isInteger(message.pe) && !(message.pe && $util.isInteger(message.pe.low) && $util.isInteger(message.pe.high)))
                                    return "pe: integer|Long expected";
                            if (message.pullMode != null && message.hasOwnProperty("pullMode"))
                                if (!$util.isInteger(message.pullMode))
                                    return "pullMode: integer expected";
                            if (message.fromScene != null && message.hasOwnProperty("fromScene"))
                                if (!$util.isInteger(message.fromScene))
                                    return "fromScene: integer expected";
                            return null;
                        };

                        /**
                         * Creates a DmSegMobileReq message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.DmSegMobileReq
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.DmSegMobileReq} DmSegMobileReq
                         */
                        DmSegMobileReq.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.DmSegMobileReq)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.DmSegMobileReq();
                            if (object.pid != null)
                                if ($util.Long)
                                    (message.pid = $util.Long.fromValue(object.pid)).unsigned = false;
                                else if (typeof object.pid === "string")
                                    message.pid = parseInt(object.pid, 10);
                                else if (typeof object.pid === "number")
                                    message.pid = object.pid;
                                else if (typeof object.pid === "object")
                                    message.pid = new $util.LongBits(object.pid.low >>> 0, object.pid.high >>> 0).toNumber();
                            if (object.oid != null)
                                if ($util.Long)
                                    (message.oid = $util.Long.fromValue(object.oid)).unsigned = false;
                                else if (typeof object.oid === "string")
                                    message.oid = parseInt(object.oid, 10);
                                else if (typeof object.oid === "number")
                                    message.oid = object.oid;
                                else if (typeof object.oid === "object")
                                    message.oid = new $util.LongBits(object.oid.low >>> 0, object.oid.high >>> 0).toNumber();
                            if (object.type != null)
                                message.type = object.type | 0;
                            if (object.segmentIndex != null)
                                if ($util.Long)
                                    (message.segmentIndex = $util.Long.fromValue(object.segmentIndex)).unsigned = false;
                                else if (typeof object.segmentIndex === "string")
                                    message.segmentIndex = parseInt(object.segmentIndex, 10);
                                else if (typeof object.segmentIndex === "number")
                                    message.segmentIndex = object.segmentIndex;
                                else if (typeof object.segmentIndex === "object")
                                    message.segmentIndex = new $util.LongBits(object.segmentIndex.low >>> 0, object.segmentIndex.high >>> 0).toNumber();
                            if (object.teenagersMode != null)
                                message.teenagersMode = object.teenagersMode | 0;
                            if (object.ps != null)
                                if ($util.Long)
                                    (message.ps = $util.Long.fromValue(object.ps)).unsigned = false;
                                else if (typeof object.ps === "string")
                                    message.ps = parseInt(object.ps, 10);
                                else if (typeof object.ps === "number")
                                    message.ps = object.ps;
                                else if (typeof object.ps === "object")
                                    message.ps = new $util.LongBits(object.ps.low >>> 0, object.ps.high >>> 0).toNumber();
                            if (object.pe != null)
                                if ($util.Long)
                                    (message.pe = $util.Long.fromValue(object.pe)).unsigned = false;
                                else if (typeof object.pe === "string")
                                    message.pe = parseInt(object.pe, 10);
                                else if (typeof object.pe === "number")
                                    message.pe = object.pe;
                                else if (typeof object.pe === "object")
                                    message.pe = new $util.LongBits(object.pe.low >>> 0, object.pe.high >>> 0).toNumber();
                            if (object.pullMode != null)
                                message.pullMode = object.pullMode | 0;
                            if (object.fromScene != null)
                                message.fromScene = object.fromScene | 0;
                            return message;
                        };

                        /**
                         * Creates a plain object from a DmSegMobileReq message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.DmSegMobileReq
                         * @static
                         * @param {bilibili.community.service.dm.v1.DmSegMobileReq} message DmSegMobileReq
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DmSegMobileReq.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.pid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.pid = options.longs === String ? "0" : 0;
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.oid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.oid = options.longs === String ? "0" : 0;
                                object.type = 0;
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.segmentIndex = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.segmentIndex = options.longs === String ? "0" : 0;
                                object.teenagersMode = 0;
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.ps = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.ps = options.longs === String ? "0" : 0;
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.pe = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.pe = options.longs === String ? "0" : 0;
                                object.pullMode = 0;
                                object.fromScene = 0;
                            }
                            if (message.pid != null && message.hasOwnProperty("pid"))
                                if (typeof message.pid === "number")
                                    object.pid = options.longs === String ? String(message.pid) : message.pid;
                                else
                                    object.pid = options.longs === String ? $util.Long.prototype.toString.call(message.pid) : options.longs === Number ? new $util.LongBits(message.pid.low >>> 0, message.pid.high >>> 0).toNumber() : message.pid;
                            if (message.oid != null && message.hasOwnProperty("oid"))
                                if (typeof message.oid === "number")
                                    object.oid = options.longs === String ? String(message.oid) : message.oid;
                                else
                                    object.oid = options.longs === String ? $util.Long.prototype.toString.call(message.oid) : options.longs === Number ? new $util.LongBits(message.oid.low >>> 0, message.oid.high >>> 0).toNumber() : message.oid;
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = message.type;
                            if (message.segmentIndex != null && message.hasOwnProperty("segmentIndex"))
                                if (typeof message.segmentIndex === "number")
                                    object.segmentIndex = options.longs === String ? String(message.segmentIndex) : message.segmentIndex;
                                else
                                    object.segmentIndex = options.longs === String ? $util.Long.prototype.toString.call(message.segmentIndex) : options.longs === Number ? new $util.LongBits(message.segmentIndex.low >>> 0, message.segmentIndex.high >>> 0).toNumber() : message.segmentIndex;
                            if (message.teenagersMode != null && message.hasOwnProperty("teenagersMode"))
                                object.teenagersMode = message.teenagersMode;
                            if (message.ps != null && message.hasOwnProperty("ps"))
                                if (typeof message.ps === "number")
                                    object.ps = options.longs === String ? String(message.ps) : message.ps;
                                else
                                    object.ps = options.longs === String ? $util.Long.prototype.toString.call(message.ps) : options.longs === Number ? new $util.LongBits(message.ps.low >>> 0, message.ps.high >>> 0).toNumber() : message.ps;
                            if (message.pe != null && message.hasOwnProperty("pe"))
                                if (typeof message.pe === "number")
                                    object.pe = options.longs === String ? String(message.pe) : message.pe;
                                else
                                    object.pe = options.longs === String ? $util.Long.prototype.toString.call(message.pe) : options.longs === Number ? new $util.LongBits(message.pe.low >>> 0, message.pe.high >>> 0).toNumber() : message.pe;
                            if (message.pullMode != null && message.hasOwnProperty("pullMode"))
                                object.pullMode = message.pullMode;
                            if (message.fromScene != null && message.hasOwnProperty("fromScene"))
                                object.fromScene = message.fromScene;
                            return object;
                        };

                        /**
                         * Converts this DmSegMobileReq to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.DmSegMobileReq
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DmSegMobileReq.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for DmSegMobileReq
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.DmSegMobileReq
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DmSegMobileReq.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.DmSegMobileReq";
                        };

                        return DmSegMobileReq;
                    })();

                    v1.DmSegOttReply = (function() {

                        /**
                         * Properties of a DmSegOttReply.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IDmSegOttReply
                         * @property {boolean|null} [closed] DmSegOttReply closed
                         * @property {Array.<bilibili.community.service.dm.v1.IDanmakuElem>|null} [elems] DmSegOttReply elems
                         */

                        /**
                         * Constructs a new DmSegOttReply.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a DmSegOttReply.
                         * @implements IDmSegOttReply
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IDmSegOttReply=} [properties] Properties to set
                         */
                        function DmSegOttReply(properties) {
                            this.elems = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * DmSegOttReply closed.
                         * @member {boolean} closed
                         * @memberof bilibili.community.service.dm.v1.DmSegOttReply
                         * @instance
                         */
                        DmSegOttReply.prototype.closed = false;

                        /**
                         * DmSegOttReply elems.
                         * @member {Array.<bilibili.community.service.dm.v1.IDanmakuElem>} elems
                         * @memberof bilibili.community.service.dm.v1.DmSegOttReply
                         * @instance
                         */
                        DmSegOttReply.prototype.elems = $util.emptyArray;

                        /**
                         * Creates a new DmSegOttReply instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.DmSegOttReply
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmSegOttReply=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.DmSegOttReply} DmSegOttReply instance
                         */
                        DmSegOttReply.create = function create(properties) {
                            return new DmSegOttReply(properties);
                        };

                        /**
                         * Encodes the specified DmSegOttReply message. Does not implicitly {@link bilibili.community.service.dm.v1.DmSegOttReply.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.DmSegOttReply
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmSegOttReply} message DmSegOttReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DmSegOttReply.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.closed != null && Object.hasOwnProperty.call(message, "closed"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.closed);
                            if (message.elems != null && message.elems.length)
                                for (let i = 0; i < message.elems.length; ++i)
                                    $root.bilibili.community.service.dm.v1.DanmakuElem.encode(message.elems[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified DmSegOttReply message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.DmSegOttReply.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DmSegOttReply
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmSegOttReply} message DmSegOttReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DmSegOttReply.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a DmSegOttReply message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.DmSegOttReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.DmSegOttReply} DmSegOttReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DmSegOttReply.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.DmSegOttReply();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.closed = reader.bool();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.elems && message.elems.length))
                                            message.elems = [];
                                        message.elems.push($root.bilibili.community.service.dm.v1.DanmakuElem.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a DmSegOttReply message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DmSegOttReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.DmSegOttReply} DmSegOttReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DmSegOttReply.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a DmSegOttReply message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.DmSegOttReply
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DmSegOttReply.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.closed != null && message.hasOwnProperty("closed"))
                                if (typeof message.closed !== "boolean")
                                    return "closed: boolean expected";
                            if (message.elems != null && message.hasOwnProperty("elems")) {
                                if (!Array.isArray(message.elems))
                                    return "elems: array expected";
                                for (let i = 0; i < message.elems.length; ++i) {
                                    let error = $root.bilibili.community.service.dm.v1.DanmakuElem.verify(message.elems[i]);
                                    if (error)
                                        return "elems." + error;
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates a DmSegOttReply message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.DmSegOttReply
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.DmSegOttReply} DmSegOttReply
                         */
                        DmSegOttReply.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.DmSegOttReply)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.DmSegOttReply();
                            if (object.closed != null)
                                message.closed = Boolean(object.closed);
                            if (object.elems) {
                                if (!Array.isArray(object.elems))
                                    throw TypeError(".bilibili.community.service.dm.v1.DmSegOttReply.elems: array expected");
                                message.elems = [];
                                for (let i = 0; i < object.elems.length; ++i) {
                                    if (typeof object.elems[i] !== "object")
                                        throw TypeError(".bilibili.community.service.dm.v1.DmSegOttReply.elems: object expected");
                                    message.elems[i] = $root.bilibili.community.service.dm.v1.DanmakuElem.fromObject(object.elems[i]);
                                }
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a DmSegOttReply message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.DmSegOttReply
                         * @static
                         * @param {bilibili.community.service.dm.v1.DmSegOttReply} message DmSegOttReply
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DmSegOttReply.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults)
                                object.elems = [];
                            if (options.defaults)
                                object.closed = false;
                            if (message.closed != null && message.hasOwnProperty("closed"))
                                object.closed = message.closed;
                            if (message.elems && message.elems.length) {
                                object.elems = [];
                                for (let j = 0; j < message.elems.length; ++j)
                                    object.elems[j] = $root.bilibili.community.service.dm.v1.DanmakuElem.toObject(message.elems[j], options);
                            }
                            return object;
                        };

                        /**
                         * Converts this DmSegOttReply to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.DmSegOttReply
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DmSegOttReply.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for DmSegOttReply
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.DmSegOttReply
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DmSegOttReply.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.DmSegOttReply";
                        };

                        return DmSegOttReply;
                    })();

                    v1.DmSegOttReq = (function() {

                        /**
                         * Properties of a DmSegOttReq.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IDmSegOttReq
                         * @property {number|Long|null} [pid] DmSegOttReq pid
                         * @property {number|Long|null} [oid] DmSegOttReq oid
                         * @property {number|null} [type] DmSegOttReq type
                         * @property {number|Long|null} [segmentIndex] DmSegOttReq segmentIndex
                         */

                        /**
                         * Constructs a new DmSegOttReq.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a DmSegOttReq.
                         * @implements IDmSegOttReq
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IDmSegOttReq=} [properties] Properties to set
                         */
                        function DmSegOttReq(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * DmSegOttReq pid.
                         * @member {number|Long} pid
                         * @memberof bilibili.community.service.dm.v1.DmSegOttReq
                         * @instance
                         */
                        DmSegOttReq.prototype.pid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * DmSegOttReq oid.
                         * @member {number|Long} oid
                         * @memberof bilibili.community.service.dm.v1.DmSegOttReq
                         * @instance
                         */
                        DmSegOttReq.prototype.oid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * DmSegOttReq type.
                         * @member {number} type
                         * @memberof bilibili.community.service.dm.v1.DmSegOttReq
                         * @instance
                         */
                        DmSegOttReq.prototype.type = 0;

                        /**
                         * DmSegOttReq segmentIndex.
                         * @member {number|Long} segmentIndex
                         * @memberof bilibili.community.service.dm.v1.DmSegOttReq
                         * @instance
                         */
                        DmSegOttReq.prototype.segmentIndex = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * Creates a new DmSegOttReq instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.DmSegOttReq
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmSegOttReq=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.DmSegOttReq} DmSegOttReq instance
                         */
                        DmSegOttReq.create = function create(properties) {
                            return new DmSegOttReq(properties);
                        };

                        /**
                         * Encodes the specified DmSegOttReq message. Does not implicitly {@link bilibili.community.service.dm.v1.DmSegOttReq.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.DmSegOttReq
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmSegOttReq} message DmSegOttReq message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DmSegOttReq.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.pid != null && Object.hasOwnProperty.call(message, "pid"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.pid);
                            if (message.oid != null && Object.hasOwnProperty.call(message, "oid"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.oid);
                            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.type);
                            if (message.segmentIndex != null && Object.hasOwnProperty.call(message, "segmentIndex"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.segmentIndex);
                            return writer;
                        };

                        /**
                         * Encodes the specified DmSegOttReq message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.DmSegOttReq.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DmSegOttReq
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmSegOttReq} message DmSegOttReq message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DmSegOttReq.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a DmSegOttReq message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.DmSegOttReq
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.DmSegOttReq} DmSegOttReq
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DmSegOttReq.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.DmSegOttReq();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.pid = reader.int64();
                                        break;
                                    }
                                case 2: {
                                        message.oid = reader.int64();
                                        break;
                                    }
                                case 3: {
                                        message.type = reader.int32();
                                        break;
                                    }
                                case 4: {
                                        message.segmentIndex = reader.int64();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a DmSegOttReq message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DmSegOttReq
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.DmSegOttReq} DmSegOttReq
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DmSegOttReq.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a DmSegOttReq message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.DmSegOttReq
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DmSegOttReq.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.pid != null && message.hasOwnProperty("pid"))
                                if (!$util.isInteger(message.pid) && !(message.pid && $util.isInteger(message.pid.low) && $util.isInteger(message.pid.high)))
                                    return "pid: integer|Long expected";
                            if (message.oid != null && message.hasOwnProperty("oid"))
                                if (!$util.isInteger(message.oid) && !(message.oid && $util.isInteger(message.oid.low) && $util.isInteger(message.oid.high)))
                                    return "oid: integer|Long expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                if (!$util.isInteger(message.type))
                                    return "type: integer expected";
                            if (message.segmentIndex != null && message.hasOwnProperty("segmentIndex"))
                                if (!$util.isInteger(message.segmentIndex) && !(message.segmentIndex && $util.isInteger(message.segmentIndex.low) && $util.isInteger(message.segmentIndex.high)))
                                    return "segmentIndex: integer|Long expected";
                            return null;
                        };

                        /**
                         * Creates a DmSegOttReq message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.DmSegOttReq
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.DmSegOttReq} DmSegOttReq
                         */
                        DmSegOttReq.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.DmSegOttReq)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.DmSegOttReq();
                            if (object.pid != null)
                                if ($util.Long)
                                    (message.pid = $util.Long.fromValue(object.pid)).unsigned = false;
                                else if (typeof object.pid === "string")
                                    message.pid = parseInt(object.pid, 10);
                                else if (typeof object.pid === "number")
                                    message.pid = object.pid;
                                else if (typeof object.pid === "object")
                                    message.pid = new $util.LongBits(object.pid.low >>> 0, object.pid.high >>> 0).toNumber();
                            if (object.oid != null)
                                if ($util.Long)
                                    (message.oid = $util.Long.fromValue(object.oid)).unsigned = false;
                                else if (typeof object.oid === "string")
                                    message.oid = parseInt(object.oid, 10);
                                else if (typeof object.oid === "number")
                                    message.oid = object.oid;
                                else if (typeof object.oid === "object")
                                    message.oid = new $util.LongBits(object.oid.low >>> 0, object.oid.high >>> 0).toNumber();
                            if (object.type != null)
                                message.type = object.type | 0;
                            if (object.segmentIndex != null)
                                if ($util.Long)
                                    (message.segmentIndex = $util.Long.fromValue(object.segmentIndex)).unsigned = false;
                                else if (typeof object.segmentIndex === "string")
                                    message.segmentIndex = parseInt(object.segmentIndex, 10);
                                else if (typeof object.segmentIndex === "number")
                                    message.segmentIndex = object.segmentIndex;
                                else if (typeof object.segmentIndex === "object")
                                    message.segmentIndex = new $util.LongBits(object.segmentIndex.low >>> 0, object.segmentIndex.high >>> 0).toNumber();
                            return message;
                        };

                        /**
                         * Creates a plain object from a DmSegOttReq message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.DmSegOttReq
                         * @static
                         * @param {bilibili.community.service.dm.v1.DmSegOttReq} message DmSegOttReq
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DmSegOttReq.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.pid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.pid = options.longs === String ? "0" : 0;
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.oid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.oid = options.longs === String ? "0" : 0;
                                object.type = 0;
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.segmentIndex = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.segmentIndex = options.longs === String ? "0" : 0;
                            }
                            if (message.pid != null && message.hasOwnProperty("pid"))
                                if (typeof message.pid === "number")
                                    object.pid = options.longs === String ? String(message.pid) : message.pid;
                                else
                                    object.pid = options.longs === String ? $util.Long.prototype.toString.call(message.pid) : options.longs === Number ? new $util.LongBits(message.pid.low >>> 0, message.pid.high >>> 0).toNumber() : message.pid;
                            if (message.oid != null && message.hasOwnProperty("oid"))
                                if (typeof message.oid === "number")
                                    object.oid = options.longs === String ? String(message.oid) : message.oid;
                                else
                                    object.oid = options.longs === String ? $util.Long.prototype.toString.call(message.oid) : options.longs === Number ? new $util.LongBits(message.oid.low >>> 0, message.oid.high >>> 0).toNumber() : message.oid;
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = message.type;
                            if (message.segmentIndex != null && message.hasOwnProperty("segmentIndex"))
                                if (typeof message.segmentIndex === "number")
                                    object.segmentIndex = options.longs === String ? String(message.segmentIndex) : message.segmentIndex;
                                else
                                    object.segmentIndex = options.longs === String ? $util.Long.prototype.toString.call(message.segmentIndex) : options.longs === Number ? new $util.LongBits(message.segmentIndex.low >>> 0, message.segmentIndex.high >>> 0).toNumber() : message.segmentIndex;
                            return object;
                        };

                        /**
                         * Converts this DmSegOttReq to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.DmSegOttReq
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DmSegOttReq.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for DmSegOttReq
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.DmSegOttReq
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DmSegOttReq.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.DmSegOttReq";
                        };

                        return DmSegOttReq;
                    })();

                    v1.DmSegSDKReply = (function() {

                        /**
                         * Properties of a DmSegSDKReply.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IDmSegSDKReply
                         * @property {boolean|null} [closed] DmSegSDKReply closed
                         * @property {Array.<bilibili.community.service.dm.v1.IDanmakuElem>|null} [elems] DmSegSDKReply elems
                         */

                        /**
                         * Constructs a new DmSegSDKReply.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a DmSegSDKReply.
                         * @implements IDmSegSDKReply
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IDmSegSDKReply=} [properties] Properties to set
                         */
                        function DmSegSDKReply(properties) {
                            this.elems = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * DmSegSDKReply closed.
                         * @member {boolean} closed
                         * @memberof bilibili.community.service.dm.v1.DmSegSDKReply
                         * @instance
                         */
                        DmSegSDKReply.prototype.closed = false;

                        /**
                         * DmSegSDKReply elems.
                         * @member {Array.<bilibili.community.service.dm.v1.IDanmakuElem>} elems
                         * @memberof bilibili.community.service.dm.v1.DmSegSDKReply
                         * @instance
                         */
                        DmSegSDKReply.prototype.elems = $util.emptyArray;

                        /**
                         * Creates a new DmSegSDKReply instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.DmSegSDKReply
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmSegSDKReply=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.DmSegSDKReply} DmSegSDKReply instance
                         */
                        DmSegSDKReply.create = function create(properties) {
                            return new DmSegSDKReply(properties);
                        };

                        /**
                         * Encodes the specified DmSegSDKReply message. Does not implicitly {@link bilibili.community.service.dm.v1.DmSegSDKReply.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.DmSegSDKReply
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmSegSDKReply} message DmSegSDKReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DmSegSDKReply.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.closed != null && Object.hasOwnProperty.call(message, "closed"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.closed);
                            if (message.elems != null && message.elems.length)
                                for (let i = 0; i < message.elems.length; ++i)
                                    $root.bilibili.community.service.dm.v1.DanmakuElem.encode(message.elems[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified DmSegSDKReply message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.DmSegSDKReply.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DmSegSDKReply
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmSegSDKReply} message DmSegSDKReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DmSegSDKReply.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a DmSegSDKReply message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.DmSegSDKReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.DmSegSDKReply} DmSegSDKReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DmSegSDKReply.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.DmSegSDKReply();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.closed = reader.bool();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.elems && message.elems.length))
                                            message.elems = [];
                                        message.elems.push($root.bilibili.community.service.dm.v1.DanmakuElem.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a DmSegSDKReply message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DmSegSDKReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.DmSegSDKReply} DmSegSDKReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DmSegSDKReply.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a DmSegSDKReply message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.DmSegSDKReply
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DmSegSDKReply.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.closed != null && message.hasOwnProperty("closed"))
                                if (typeof message.closed !== "boolean")
                                    return "closed: boolean expected";
                            if (message.elems != null && message.hasOwnProperty("elems")) {
                                if (!Array.isArray(message.elems))
                                    return "elems: array expected";
                                for (let i = 0; i < message.elems.length; ++i) {
                                    let error = $root.bilibili.community.service.dm.v1.DanmakuElem.verify(message.elems[i]);
                                    if (error)
                                        return "elems." + error;
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates a DmSegSDKReply message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.DmSegSDKReply
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.DmSegSDKReply} DmSegSDKReply
                         */
                        DmSegSDKReply.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.DmSegSDKReply)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.DmSegSDKReply();
                            if (object.closed != null)
                                message.closed = Boolean(object.closed);
                            if (object.elems) {
                                if (!Array.isArray(object.elems))
                                    throw TypeError(".bilibili.community.service.dm.v1.DmSegSDKReply.elems: array expected");
                                message.elems = [];
                                for (let i = 0; i < object.elems.length; ++i) {
                                    if (typeof object.elems[i] !== "object")
                                        throw TypeError(".bilibili.community.service.dm.v1.DmSegSDKReply.elems: object expected");
                                    message.elems[i] = $root.bilibili.community.service.dm.v1.DanmakuElem.fromObject(object.elems[i]);
                                }
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a DmSegSDKReply message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.DmSegSDKReply
                         * @static
                         * @param {bilibili.community.service.dm.v1.DmSegSDKReply} message DmSegSDKReply
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DmSegSDKReply.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults)
                                object.elems = [];
                            if (options.defaults)
                                object.closed = false;
                            if (message.closed != null && message.hasOwnProperty("closed"))
                                object.closed = message.closed;
                            if (message.elems && message.elems.length) {
                                object.elems = [];
                                for (let j = 0; j < message.elems.length; ++j)
                                    object.elems[j] = $root.bilibili.community.service.dm.v1.DanmakuElem.toObject(message.elems[j], options);
                            }
                            return object;
                        };

                        /**
                         * Converts this DmSegSDKReply to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.DmSegSDKReply
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DmSegSDKReply.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for DmSegSDKReply
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.DmSegSDKReply
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DmSegSDKReply.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.DmSegSDKReply";
                        };

                        return DmSegSDKReply;
                    })();

                    v1.DmSegSDKReq = (function() {

                        /**
                         * Properties of a DmSegSDKReq.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IDmSegSDKReq
                         * @property {number|Long|null} [pid] DmSegSDKReq pid
                         * @property {number|Long|null} [oid] DmSegSDKReq oid
                         * @property {number|null} [type] DmSegSDKReq type
                         * @property {number|Long|null} [segmentIndex] DmSegSDKReq segmentIndex
                         */

                        /**
                         * Constructs a new DmSegSDKReq.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a DmSegSDKReq.
                         * @implements IDmSegSDKReq
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IDmSegSDKReq=} [properties] Properties to set
                         */
                        function DmSegSDKReq(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * DmSegSDKReq pid.
                         * @member {number|Long} pid
                         * @memberof bilibili.community.service.dm.v1.DmSegSDKReq
                         * @instance
                         */
                        DmSegSDKReq.prototype.pid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * DmSegSDKReq oid.
                         * @member {number|Long} oid
                         * @memberof bilibili.community.service.dm.v1.DmSegSDKReq
                         * @instance
                         */
                        DmSegSDKReq.prototype.oid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * DmSegSDKReq type.
                         * @member {number} type
                         * @memberof bilibili.community.service.dm.v1.DmSegSDKReq
                         * @instance
                         */
                        DmSegSDKReq.prototype.type = 0;

                        /**
                         * DmSegSDKReq segmentIndex.
                         * @member {number|Long} segmentIndex
                         * @memberof bilibili.community.service.dm.v1.DmSegSDKReq
                         * @instance
                         */
                        DmSegSDKReq.prototype.segmentIndex = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * Creates a new DmSegSDKReq instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.DmSegSDKReq
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmSegSDKReq=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.DmSegSDKReq} DmSegSDKReq instance
                         */
                        DmSegSDKReq.create = function create(properties) {
                            return new DmSegSDKReq(properties);
                        };

                        /**
                         * Encodes the specified DmSegSDKReq message. Does not implicitly {@link bilibili.community.service.dm.v1.DmSegSDKReq.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.DmSegSDKReq
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmSegSDKReq} message DmSegSDKReq message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DmSegSDKReq.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.pid != null && Object.hasOwnProperty.call(message, "pid"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.pid);
                            if (message.oid != null && Object.hasOwnProperty.call(message, "oid"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.oid);
                            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.type);
                            if (message.segmentIndex != null && Object.hasOwnProperty.call(message, "segmentIndex"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.segmentIndex);
                            return writer;
                        };

                        /**
                         * Encodes the specified DmSegSDKReq message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.DmSegSDKReq.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DmSegSDKReq
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmSegSDKReq} message DmSegSDKReq message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DmSegSDKReq.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a DmSegSDKReq message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.DmSegSDKReq
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.DmSegSDKReq} DmSegSDKReq
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DmSegSDKReq.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.DmSegSDKReq();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.pid = reader.int64();
                                        break;
                                    }
                                case 2: {
                                        message.oid = reader.int64();
                                        break;
                                    }
                                case 3: {
                                        message.type = reader.int32();
                                        break;
                                    }
                                case 4: {
                                        message.segmentIndex = reader.int64();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a DmSegSDKReq message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DmSegSDKReq
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.DmSegSDKReq} DmSegSDKReq
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DmSegSDKReq.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a DmSegSDKReq message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.DmSegSDKReq
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DmSegSDKReq.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.pid != null && message.hasOwnProperty("pid"))
                                if (!$util.isInteger(message.pid) && !(message.pid && $util.isInteger(message.pid.low) && $util.isInteger(message.pid.high)))
                                    return "pid: integer|Long expected";
                            if (message.oid != null && message.hasOwnProperty("oid"))
                                if (!$util.isInteger(message.oid) && !(message.oid && $util.isInteger(message.oid.low) && $util.isInteger(message.oid.high)))
                                    return "oid: integer|Long expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                if (!$util.isInteger(message.type))
                                    return "type: integer expected";
                            if (message.segmentIndex != null && message.hasOwnProperty("segmentIndex"))
                                if (!$util.isInteger(message.segmentIndex) && !(message.segmentIndex && $util.isInteger(message.segmentIndex.low) && $util.isInteger(message.segmentIndex.high)))
                                    return "segmentIndex: integer|Long expected";
                            return null;
                        };

                        /**
                         * Creates a DmSegSDKReq message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.DmSegSDKReq
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.DmSegSDKReq} DmSegSDKReq
                         */
                        DmSegSDKReq.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.DmSegSDKReq)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.DmSegSDKReq();
                            if (object.pid != null)
                                if ($util.Long)
                                    (message.pid = $util.Long.fromValue(object.pid)).unsigned = false;
                                else if (typeof object.pid === "string")
                                    message.pid = parseInt(object.pid, 10);
                                else if (typeof object.pid === "number")
                                    message.pid = object.pid;
                                else if (typeof object.pid === "object")
                                    message.pid = new $util.LongBits(object.pid.low >>> 0, object.pid.high >>> 0).toNumber();
                            if (object.oid != null)
                                if ($util.Long)
                                    (message.oid = $util.Long.fromValue(object.oid)).unsigned = false;
                                else if (typeof object.oid === "string")
                                    message.oid = parseInt(object.oid, 10);
                                else if (typeof object.oid === "number")
                                    message.oid = object.oid;
                                else if (typeof object.oid === "object")
                                    message.oid = new $util.LongBits(object.oid.low >>> 0, object.oid.high >>> 0).toNumber();
                            if (object.type != null)
                                message.type = object.type | 0;
                            if (object.segmentIndex != null)
                                if ($util.Long)
                                    (message.segmentIndex = $util.Long.fromValue(object.segmentIndex)).unsigned = false;
                                else if (typeof object.segmentIndex === "string")
                                    message.segmentIndex = parseInt(object.segmentIndex, 10);
                                else if (typeof object.segmentIndex === "number")
                                    message.segmentIndex = object.segmentIndex;
                                else if (typeof object.segmentIndex === "object")
                                    message.segmentIndex = new $util.LongBits(object.segmentIndex.low >>> 0, object.segmentIndex.high >>> 0).toNumber();
                            return message;
                        };

                        /**
                         * Creates a plain object from a DmSegSDKReq message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.DmSegSDKReq
                         * @static
                         * @param {bilibili.community.service.dm.v1.DmSegSDKReq} message DmSegSDKReq
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DmSegSDKReq.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.pid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.pid = options.longs === String ? "0" : 0;
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.oid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.oid = options.longs === String ? "0" : 0;
                                object.type = 0;
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.segmentIndex = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.segmentIndex = options.longs === String ? "0" : 0;
                            }
                            if (message.pid != null && message.hasOwnProperty("pid"))
                                if (typeof message.pid === "number")
                                    object.pid = options.longs === String ? String(message.pid) : message.pid;
                                else
                                    object.pid = options.longs === String ? $util.Long.prototype.toString.call(message.pid) : options.longs === Number ? new $util.LongBits(message.pid.low >>> 0, message.pid.high >>> 0).toNumber() : message.pid;
                            if (message.oid != null && message.hasOwnProperty("oid"))
                                if (typeof message.oid === "number")
                                    object.oid = options.longs === String ? String(message.oid) : message.oid;
                                else
                                    object.oid = options.longs === String ? $util.Long.prototype.toString.call(message.oid) : options.longs === Number ? new $util.LongBits(message.oid.low >>> 0, message.oid.high >>> 0).toNumber() : message.oid;
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = message.type;
                            if (message.segmentIndex != null && message.hasOwnProperty("segmentIndex"))
                                if (typeof message.segmentIndex === "number")
                                    object.segmentIndex = options.longs === String ? String(message.segmentIndex) : message.segmentIndex;
                                else
                                    object.segmentIndex = options.longs === String ? $util.Long.prototype.toString.call(message.segmentIndex) : options.longs === Number ? new $util.LongBits(message.segmentIndex.low >>> 0, message.segmentIndex.high >>> 0).toNumber() : message.segmentIndex;
                            return object;
                        };

                        /**
                         * Converts this DmSegSDKReq to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.DmSegSDKReq
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DmSegSDKReq.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for DmSegSDKReq
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.DmSegSDKReq
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DmSegSDKReq.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.DmSegSDKReq";
                        };

                        return DmSegSDKReq;
                    })();

                    v1.DmViewReply = (function() {

                        /**
                         * Properties of a DmViewReply.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IDmViewReply
                         * @property {boolean|null} [closed] DmViewReply closed
                         * @property {bilibili.community.service.dm.v1.IVideoMask|null} [mask] DmViewReply mask
                         * @property {bilibili.community.service.dm.v1.IVideoSubtitle|null} [subtitle] DmViewReply subtitle
                         * @property {Array.<string>|null} [specialDms] DmViewReply specialDms
                         * @property {bilibili.community.service.dm.v1.IDanmakuFlagConfig|null} [aiFlag] DmViewReply aiFlag
                         * @property {bilibili.community.service.dm.v1.IDanmuPlayerViewConfig|null} [playerConfig] DmViewReply playerConfig
                         * @property {number|null} [sendBoxStyle] DmViewReply sendBoxStyle
                         * @property {boolean|null} [allow] DmViewReply allow
                         * @property {string|null} [checkBox] DmViewReply checkBox
                         * @property {string|null} [checkBoxShowMsg] DmViewReply checkBoxShowMsg
                         * @property {string|null} [textPlaceholder] DmViewReply textPlaceholder
                         * @property {string|null} [inputPlaceholder] DmViewReply inputPlaceholder
                         * @property {Array.<string>|null} [reportFilterContent] DmViewReply reportFilterContent
                         * @property {bilibili.community.service.dm.v1.IExpoReport|null} [expoReport] DmViewReply expoReport
                         * @property {bilibili.community.service.dm.v1.IBuzzwordConfig|null} [buzzwordConfig] DmViewReply buzzwordConfig
                         * @property {Array.<bilibili.community.service.dm.v1.IExpressions>|null} [expressions] DmViewReply expressions
                         * @property {Array.<bilibili.community.service.dm.v1.IPostPanel>|null} [postPanel] DmViewReply postPanel
                         * @property {Array.<string>|null} [activityMeta] DmViewReply activityMeta
                         * @property {Array.<bilibili.community.service.dm.v1.IPostPanelV2>|null} [postPanel2] DmViewReply postPanel2
                         */

                        /**
                         * Constructs a new DmViewReply.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a DmViewReply.
                         * @implements IDmViewReply
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IDmViewReply=} [properties] Properties to set
                         */
                        function DmViewReply(properties) {
                            this.specialDms = [];
                            this.reportFilterContent = [];
                            this.expressions = [];
                            this.postPanel = [];
                            this.activityMeta = [];
                            this.postPanel2 = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * DmViewReply closed.
                         * @member {boolean} closed
                         * @memberof bilibili.community.service.dm.v1.DmViewReply
                         * @instance
                         */
                        DmViewReply.prototype.closed = false;

                        /**
                         * DmViewReply mask.
                         * @member {bilibili.community.service.dm.v1.IVideoMask|null|undefined} mask
                         * @memberof bilibili.community.service.dm.v1.DmViewReply
                         * @instance
                         */
                        DmViewReply.prototype.mask = null;

                        /**
                         * DmViewReply subtitle.
                         * @member {bilibili.community.service.dm.v1.IVideoSubtitle|null|undefined} subtitle
                         * @memberof bilibili.community.service.dm.v1.DmViewReply
                         * @instance
                         */
                        DmViewReply.prototype.subtitle = null;

                        /**
                         * DmViewReply specialDms.
                         * @member {Array.<string>} specialDms
                         * @memberof bilibili.community.service.dm.v1.DmViewReply
                         * @instance
                         */
                        DmViewReply.prototype.specialDms = $util.emptyArray;

                        /**
                         * DmViewReply aiFlag.
                         * @member {bilibili.community.service.dm.v1.IDanmakuFlagConfig|null|undefined} aiFlag
                         * @memberof bilibili.community.service.dm.v1.DmViewReply
                         * @instance
                         */
                        DmViewReply.prototype.aiFlag = null;

                        /**
                         * DmViewReply playerConfig.
                         * @member {bilibili.community.service.dm.v1.IDanmuPlayerViewConfig|null|undefined} playerConfig
                         * @memberof bilibili.community.service.dm.v1.DmViewReply
                         * @instance
                         */
                        DmViewReply.prototype.playerConfig = null;

                        /**
                         * DmViewReply sendBoxStyle.
                         * @member {number} sendBoxStyle
                         * @memberof bilibili.community.service.dm.v1.DmViewReply
                         * @instance
                         */
                        DmViewReply.prototype.sendBoxStyle = 0;

                        /**
                         * DmViewReply allow.
                         * @member {boolean} allow
                         * @memberof bilibili.community.service.dm.v1.DmViewReply
                         * @instance
                         */
                        DmViewReply.prototype.allow = false;

                        /**
                         * DmViewReply checkBox.
                         * @member {string} checkBox
                         * @memberof bilibili.community.service.dm.v1.DmViewReply
                         * @instance
                         */
                        DmViewReply.prototype.checkBox = "";

                        /**
                         * DmViewReply checkBoxShowMsg.
                         * @member {string} checkBoxShowMsg
                         * @memberof bilibili.community.service.dm.v1.DmViewReply
                         * @instance
                         */
                        DmViewReply.prototype.checkBoxShowMsg = "";

                        /**
                         * DmViewReply textPlaceholder.
                         * @member {string} textPlaceholder
                         * @memberof bilibili.community.service.dm.v1.DmViewReply
                         * @instance
                         */
                        DmViewReply.prototype.textPlaceholder = "";

                        /**
                         * DmViewReply inputPlaceholder.
                         * @member {string} inputPlaceholder
                         * @memberof bilibili.community.service.dm.v1.DmViewReply
                         * @instance
                         */
                        DmViewReply.prototype.inputPlaceholder = "";

                        /**
                         * DmViewReply reportFilterContent.
                         * @member {Array.<string>} reportFilterContent
                         * @memberof bilibili.community.service.dm.v1.DmViewReply
                         * @instance
                         */
                        DmViewReply.prototype.reportFilterContent = $util.emptyArray;

                        /**
                         * DmViewReply expoReport.
                         * @member {bilibili.community.service.dm.v1.IExpoReport|null|undefined} expoReport
                         * @memberof bilibili.community.service.dm.v1.DmViewReply
                         * @instance
                         */
                        DmViewReply.prototype.expoReport = null;

                        /**
                         * DmViewReply buzzwordConfig.
                         * @member {bilibili.community.service.dm.v1.IBuzzwordConfig|null|undefined} buzzwordConfig
                         * @memberof bilibili.community.service.dm.v1.DmViewReply
                         * @instance
                         */
                        DmViewReply.prototype.buzzwordConfig = null;

                        /**
                         * DmViewReply expressions.
                         * @member {Array.<bilibili.community.service.dm.v1.IExpressions>} expressions
                         * @memberof bilibili.community.service.dm.v1.DmViewReply
                         * @instance
                         */
                        DmViewReply.prototype.expressions = $util.emptyArray;

                        /**
                         * DmViewReply postPanel.
                         * @member {Array.<bilibili.community.service.dm.v1.IPostPanel>} postPanel
                         * @memberof bilibili.community.service.dm.v1.DmViewReply
                         * @instance
                         */
                        DmViewReply.prototype.postPanel = $util.emptyArray;

                        /**
                         * DmViewReply activityMeta.
                         * @member {Array.<string>} activityMeta
                         * @memberof bilibili.community.service.dm.v1.DmViewReply
                         * @instance
                         */
                        DmViewReply.prototype.activityMeta = $util.emptyArray;

                        /**
                         * DmViewReply postPanel2.
                         * @member {Array.<bilibili.community.service.dm.v1.IPostPanelV2>} postPanel2
                         * @memberof bilibili.community.service.dm.v1.DmViewReply
                         * @instance
                         */
                        DmViewReply.prototype.postPanel2 = $util.emptyArray;

                        /**
                         * Creates a new DmViewReply instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.DmViewReply
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmViewReply=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.DmViewReply} DmViewReply instance
                         */
                        DmViewReply.create = function create(properties) {
                            return new DmViewReply(properties);
                        };

                        /**
                         * Encodes the specified DmViewReply message. Does not implicitly {@link bilibili.community.service.dm.v1.DmViewReply.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.DmViewReply
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmViewReply} message DmViewReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DmViewReply.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.closed != null && Object.hasOwnProperty.call(message, "closed"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.closed);
                            if (message.mask != null && Object.hasOwnProperty.call(message, "mask"))
                                $root.bilibili.community.service.dm.v1.VideoMask.encode(message.mask, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            if (message.subtitle != null && Object.hasOwnProperty.call(message, "subtitle"))
                                $root.bilibili.community.service.dm.v1.VideoSubtitle.encode(message.subtitle, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.specialDms != null && message.specialDms.length)
                                for (let i = 0; i < message.specialDms.length; ++i)
                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.specialDms[i]);
                            if (message.aiFlag != null && Object.hasOwnProperty.call(message, "aiFlag"))
                                $root.bilibili.community.service.dm.v1.DanmakuFlagConfig.encode(message.aiFlag, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.playerConfig != null && Object.hasOwnProperty.call(message, "playerConfig"))
                                $root.bilibili.community.service.dm.v1.DanmuPlayerViewConfig.encode(message.playerConfig, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.sendBoxStyle != null && Object.hasOwnProperty.call(message, "sendBoxStyle"))
                                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.sendBoxStyle);
                            if (message.allow != null && Object.hasOwnProperty.call(message, "allow"))
                                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.allow);
                            if (message.checkBox != null && Object.hasOwnProperty.call(message, "checkBox"))
                                writer.uint32(/* id 9, wireType 2 =*/74).string(message.checkBox);
                            if (message.checkBoxShowMsg != null && Object.hasOwnProperty.call(message, "checkBoxShowMsg"))
                                writer.uint32(/* id 10, wireType 2 =*/82).string(message.checkBoxShowMsg);
                            if (message.textPlaceholder != null && Object.hasOwnProperty.call(message, "textPlaceholder"))
                                writer.uint32(/* id 11, wireType 2 =*/90).string(message.textPlaceholder);
                            if (message.inputPlaceholder != null && Object.hasOwnProperty.call(message, "inputPlaceholder"))
                                writer.uint32(/* id 12, wireType 2 =*/98).string(message.inputPlaceholder);
                            if (message.reportFilterContent != null && message.reportFilterContent.length)
                                for (let i = 0; i < message.reportFilterContent.length; ++i)
                                    writer.uint32(/* id 13, wireType 2 =*/106).string(message.reportFilterContent[i]);
                            if (message.expoReport != null && Object.hasOwnProperty.call(message, "expoReport"))
                                $root.bilibili.community.service.dm.v1.ExpoReport.encode(message.expoReport, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                            if (message.buzzwordConfig != null && Object.hasOwnProperty.call(message, "buzzwordConfig"))
                                $root.bilibili.community.service.dm.v1.BuzzwordConfig.encode(message.buzzwordConfig, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
                            if (message.expressions != null && message.expressions.length)
                                for (let i = 0; i < message.expressions.length; ++i)
                                    $root.bilibili.community.service.dm.v1.Expressions.encode(message.expressions[i], writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
                            if (message.postPanel != null && message.postPanel.length)
                                for (let i = 0; i < message.postPanel.length; ++i)
                                    $root.bilibili.community.service.dm.v1.PostPanel.encode(message.postPanel[i], writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();
                            if (message.activityMeta != null && message.activityMeta.length)
                                for (let i = 0; i < message.activityMeta.length; ++i)
                                    writer.uint32(/* id 18, wireType 2 =*/146).string(message.activityMeta[i]);
                            if (message.postPanel2 != null && message.postPanel2.length)
                                for (let i = 0; i < message.postPanel2.length; ++i)
                                    $root.bilibili.community.service.dm.v1.PostPanelV2.encode(message.postPanel2[i], writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified DmViewReply message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.DmViewReply.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DmViewReply
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmViewReply} message DmViewReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DmViewReply.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a DmViewReply message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.DmViewReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.DmViewReply} DmViewReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DmViewReply.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.DmViewReply();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.closed = reader.bool();
                                        break;
                                    }
                                case 2: {
                                        message.mask = $root.bilibili.community.service.dm.v1.VideoMask.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 3: {
                                        message.subtitle = $root.bilibili.community.service.dm.v1.VideoSubtitle.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 4: {
                                        if (!(message.specialDms && message.specialDms.length))
                                            message.specialDms = [];
                                        message.specialDms.push(reader.string());
                                        break;
                                    }
                                case 5: {
                                        message.aiFlag = $root.bilibili.community.service.dm.v1.DanmakuFlagConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 6: {
                                        message.playerConfig = $root.bilibili.community.service.dm.v1.DanmuPlayerViewConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 7: {
                                        message.sendBoxStyle = reader.int32();
                                        break;
                                    }
                                case 8: {
                                        message.allow = reader.bool();
                                        break;
                                    }
                                case 9: {
                                        message.checkBox = reader.string();
                                        break;
                                    }
                                case 10: {
                                        message.checkBoxShowMsg = reader.string();
                                        break;
                                    }
                                case 11: {
                                        message.textPlaceholder = reader.string();
                                        break;
                                    }
                                case 12: {
                                        message.inputPlaceholder = reader.string();
                                        break;
                                    }
                                case 13: {
                                        if (!(message.reportFilterContent && message.reportFilterContent.length))
                                            message.reportFilterContent = [];
                                        message.reportFilterContent.push(reader.string());
                                        break;
                                    }
                                case 14: {
                                        message.expoReport = $root.bilibili.community.service.dm.v1.ExpoReport.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 15: {
                                        message.buzzwordConfig = $root.bilibili.community.service.dm.v1.BuzzwordConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 16: {
                                        if (!(message.expressions && message.expressions.length))
                                            message.expressions = [];
                                        message.expressions.push($root.bilibili.community.service.dm.v1.Expressions.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 17: {
                                        if (!(message.postPanel && message.postPanel.length))
                                            message.postPanel = [];
                                        message.postPanel.push($root.bilibili.community.service.dm.v1.PostPanel.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 18: {
                                        if (!(message.activityMeta && message.activityMeta.length))
                                            message.activityMeta = [];
                                        message.activityMeta.push(reader.string());
                                        break;
                                    }
                                case 19: {
                                        if (!(message.postPanel2 && message.postPanel2.length))
                                            message.postPanel2 = [];
                                        message.postPanel2.push($root.bilibili.community.service.dm.v1.PostPanelV2.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a DmViewReply message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DmViewReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.DmViewReply} DmViewReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DmViewReply.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a DmViewReply message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.DmViewReply
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DmViewReply.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.closed != null && message.hasOwnProperty("closed"))
                                if (typeof message.closed !== "boolean")
                                    return "closed: boolean expected";
                            if (message.mask != null && message.hasOwnProperty("mask")) {
                                let error = $root.bilibili.community.service.dm.v1.VideoMask.verify(message.mask);
                                if (error)
                                    return "mask." + error;
                            }
                            if (message.subtitle != null && message.hasOwnProperty("subtitle")) {
                                let error = $root.bilibili.community.service.dm.v1.VideoSubtitle.verify(message.subtitle);
                                if (error)
                                    return "subtitle." + error;
                            }
                            if (message.specialDms != null && message.hasOwnProperty("specialDms")) {
                                if (!Array.isArray(message.specialDms))
                                    return "specialDms: array expected";
                                for (let i = 0; i < message.specialDms.length; ++i)
                                    if (!$util.isString(message.specialDms[i]))
                                        return "specialDms: string[] expected";
                            }
                            if (message.aiFlag != null && message.hasOwnProperty("aiFlag")) {
                                let error = $root.bilibili.community.service.dm.v1.DanmakuFlagConfig.verify(message.aiFlag);
                                if (error)
                                    return "aiFlag." + error;
                            }
                            if (message.playerConfig != null && message.hasOwnProperty("playerConfig")) {
                                let error = $root.bilibili.community.service.dm.v1.DanmuPlayerViewConfig.verify(message.playerConfig);
                                if (error)
                                    return "playerConfig." + error;
                            }
                            if (message.sendBoxStyle != null && message.hasOwnProperty("sendBoxStyle"))
                                if (!$util.isInteger(message.sendBoxStyle))
                                    return "sendBoxStyle: integer expected";
                            if (message.allow != null && message.hasOwnProperty("allow"))
                                if (typeof message.allow !== "boolean")
                                    return "allow: boolean expected";
                            if (message.checkBox != null && message.hasOwnProperty("checkBox"))
                                if (!$util.isString(message.checkBox))
                                    return "checkBox: string expected";
                            if (message.checkBoxShowMsg != null && message.hasOwnProperty("checkBoxShowMsg"))
                                if (!$util.isString(message.checkBoxShowMsg))
                                    return "checkBoxShowMsg: string expected";
                            if (message.textPlaceholder != null && message.hasOwnProperty("textPlaceholder"))
                                if (!$util.isString(message.textPlaceholder))
                                    return "textPlaceholder: string expected";
                            if (message.inputPlaceholder != null && message.hasOwnProperty("inputPlaceholder"))
                                if (!$util.isString(message.inputPlaceholder))
                                    return "inputPlaceholder: string expected";
                            if (message.reportFilterContent != null && message.hasOwnProperty("reportFilterContent")) {
                                if (!Array.isArray(message.reportFilterContent))
                                    return "reportFilterContent: array expected";
                                for (let i = 0; i < message.reportFilterContent.length; ++i)
                                    if (!$util.isString(message.reportFilterContent[i]))
                                        return "reportFilterContent: string[] expected";
                            }
                            if (message.expoReport != null && message.hasOwnProperty("expoReport")) {
                                let error = $root.bilibili.community.service.dm.v1.ExpoReport.verify(message.expoReport);
                                if (error)
                                    return "expoReport." + error;
                            }
                            if (message.buzzwordConfig != null && message.hasOwnProperty("buzzwordConfig")) {
                                let error = $root.bilibili.community.service.dm.v1.BuzzwordConfig.verify(message.buzzwordConfig);
                                if (error)
                                    return "buzzwordConfig." + error;
                            }
                            if (message.expressions != null && message.hasOwnProperty("expressions")) {
                                if (!Array.isArray(message.expressions))
                                    return "expressions: array expected";
                                for (let i = 0; i < message.expressions.length; ++i) {
                                    let error = $root.bilibili.community.service.dm.v1.Expressions.verify(message.expressions[i]);
                                    if (error)
                                        return "expressions." + error;
                                }
                            }
                            if (message.postPanel != null && message.hasOwnProperty("postPanel")) {
                                if (!Array.isArray(message.postPanel))
                                    return "postPanel: array expected";
                                for (let i = 0; i < message.postPanel.length; ++i) {
                                    let error = $root.bilibili.community.service.dm.v1.PostPanel.verify(message.postPanel[i]);
                                    if (error)
                                        return "postPanel." + error;
                                }
                            }
                            if (message.activityMeta != null && message.hasOwnProperty("activityMeta")) {
                                if (!Array.isArray(message.activityMeta))
                                    return "activityMeta: array expected";
                                for (let i = 0; i < message.activityMeta.length; ++i)
                                    if (!$util.isString(message.activityMeta[i]))
                                        return "activityMeta: string[] expected";
                            }
                            if (message.postPanel2 != null && message.hasOwnProperty("postPanel2")) {
                                if (!Array.isArray(message.postPanel2))
                                    return "postPanel2: array expected";
                                for (let i = 0; i < message.postPanel2.length; ++i) {
                                    let error = $root.bilibili.community.service.dm.v1.PostPanelV2.verify(message.postPanel2[i]);
                                    if (error)
                                        return "postPanel2." + error;
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates a DmViewReply message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.DmViewReply
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.DmViewReply} DmViewReply
                         */
                        DmViewReply.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.DmViewReply)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.DmViewReply();
                            if (object.closed != null)
                                message.closed = Boolean(object.closed);
                            if (object.mask != null) {
                                if (typeof object.mask !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DmViewReply.mask: object expected");
                                message.mask = $root.bilibili.community.service.dm.v1.VideoMask.fromObject(object.mask);
                            }
                            if (object.subtitle != null) {
                                if (typeof object.subtitle !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DmViewReply.subtitle: object expected");
                                message.subtitle = $root.bilibili.community.service.dm.v1.VideoSubtitle.fromObject(object.subtitle);
                            }
                            if (object.specialDms) {
                                if (!Array.isArray(object.specialDms))
                                    throw TypeError(".bilibili.community.service.dm.v1.DmViewReply.specialDms: array expected");
                                message.specialDms = [];
                                for (let i = 0; i < object.specialDms.length; ++i)
                                    message.specialDms[i] = String(object.specialDms[i]);
                            }
                            if (object.aiFlag != null) {
                                if (typeof object.aiFlag !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DmViewReply.aiFlag: object expected");
                                message.aiFlag = $root.bilibili.community.service.dm.v1.DanmakuFlagConfig.fromObject(object.aiFlag);
                            }
                            if (object.playerConfig != null) {
                                if (typeof object.playerConfig !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DmViewReply.playerConfig: object expected");
                                message.playerConfig = $root.bilibili.community.service.dm.v1.DanmuPlayerViewConfig.fromObject(object.playerConfig);
                            }
                            if (object.sendBoxStyle != null)
                                message.sendBoxStyle = object.sendBoxStyle | 0;
                            if (object.allow != null)
                                message.allow = Boolean(object.allow);
                            if (object.checkBox != null)
                                message.checkBox = String(object.checkBox);
                            if (object.checkBoxShowMsg != null)
                                message.checkBoxShowMsg = String(object.checkBoxShowMsg);
                            if (object.textPlaceholder != null)
                                message.textPlaceholder = String(object.textPlaceholder);
                            if (object.inputPlaceholder != null)
                                message.inputPlaceholder = String(object.inputPlaceholder);
                            if (object.reportFilterContent) {
                                if (!Array.isArray(object.reportFilterContent))
                                    throw TypeError(".bilibili.community.service.dm.v1.DmViewReply.reportFilterContent: array expected");
                                message.reportFilterContent = [];
                                for (let i = 0; i < object.reportFilterContent.length; ++i)
                                    message.reportFilterContent[i] = String(object.reportFilterContent[i]);
                            }
                            if (object.expoReport != null) {
                                if (typeof object.expoReport !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DmViewReply.expoReport: object expected");
                                message.expoReport = $root.bilibili.community.service.dm.v1.ExpoReport.fromObject(object.expoReport);
                            }
                            if (object.buzzwordConfig != null) {
                                if (typeof object.buzzwordConfig !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DmViewReply.buzzwordConfig: object expected");
                                message.buzzwordConfig = $root.bilibili.community.service.dm.v1.BuzzwordConfig.fromObject(object.buzzwordConfig);
                            }
                            if (object.expressions) {
                                if (!Array.isArray(object.expressions))
                                    throw TypeError(".bilibili.community.service.dm.v1.DmViewReply.expressions: array expected");
                                message.expressions = [];
                                for (let i = 0; i < object.expressions.length; ++i) {
                                    if (typeof object.expressions[i] !== "object")
                                        throw TypeError(".bilibili.community.service.dm.v1.DmViewReply.expressions: object expected");
                                    message.expressions[i] = $root.bilibili.community.service.dm.v1.Expressions.fromObject(object.expressions[i]);
                                }
                            }
                            if (object.postPanel) {
                                if (!Array.isArray(object.postPanel))
                                    throw TypeError(".bilibili.community.service.dm.v1.DmViewReply.postPanel: array expected");
                                message.postPanel = [];
                                for (let i = 0; i < object.postPanel.length; ++i) {
                                    if (typeof object.postPanel[i] !== "object")
                                        throw TypeError(".bilibili.community.service.dm.v1.DmViewReply.postPanel: object expected");
                                    message.postPanel[i] = $root.bilibili.community.service.dm.v1.PostPanel.fromObject(object.postPanel[i]);
                                }
                            }
                            if (object.activityMeta) {
                                if (!Array.isArray(object.activityMeta))
                                    throw TypeError(".bilibili.community.service.dm.v1.DmViewReply.activityMeta: array expected");
                                message.activityMeta = [];
                                for (let i = 0; i < object.activityMeta.length; ++i)
                                    message.activityMeta[i] = String(object.activityMeta[i]);
                            }
                            if (object.postPanel2) {
                                if (!Array.isArray(object.postPanel2))
                                    throw TypeError(".bilibili.community.service.dm.v1.DmViewReply.postPanel2: array expected");
                                message.postPanel2 = [];
                                for (let i = 0; i < object.postPanel2.length; ++i) {
                                    if (typeof object.postPanel2[i] !== "object")
                                        throw TypeError(".bilibili.community.service.dm.v1.DmViewReply.postPanel2: object expected");
                                    message.postPanel2[i] = $root.bilibili.community.service.dm.v1.PostPanelV2.fromObject(object.postPanel2[i]);
                                }
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a DmViewReply message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.DmViewReply
                         * @static
                         * @param {bilibili.community.service.dm.v1.DmViewReply} message DmViewReply
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DmViewReply.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults) {
                                object.specialDms = [];
                                object.reportFilterContent = [];
                                object.expressions = [];
                                object.postPanel = [];
                                object.activityMeta = [];
                                object.postPanel2 = [];
                            }
                            if (options.defaults) {
                                object.closed = false;
                                object.mask = null;
                                object.subtitle = null;
                                object.aiFlag = null;
                                object.playerConfig = null;
                                object.sendBoxStyle = 0;
                                object.allow = false;
                                object.checkBox = "";
                                object.checkBoxShowMsg = "";
                                object.textPlaceholder = "";
                                object.inputPlaceholder = "";
                                object.expoReport = null;
                                object.buzzwordConfig = null;
                            }
                            if (message.closed != null && message.hasOwnProperty("closed"))
                                object.closed = message.closed;
                            if (message.mask != null && message.hasOwnProperty("mask"))
                                object.mask = $root.bilibili.community.service.dm.v1.VideoMask.toObject(message.mask, options);
                            if (message.subtitle != null && message.hasOwnProperty("subtitle"))
                                object.subtitle = $root.bilibili.community.service.dm.v1.VideoSubtitle.toObject(message.subtitle, options);
                            if (message.specialDms && message.specialDms.length) {
                                object.specialDms = [];
                                for (let j = 0; j < message.specialDms.length; ++j)
                                    object.specialDms[j] = message.specialDms[j];
                            }
                            if (message.aiFlag != null && message.hasOwnProperty("aiFlag"))
                                object.aiFlag = $root.bilibili.community.service.dm.v1.DanmakuFlagConfig.toObject(message.aiFlag, options);
                            if (message.playerConfig != null && message.hasOwnProperty("playerConfig"))
                                object.playerConfig = $root.bilibili.community.service.dm.v1.DanmuPlayerViewConfig.toObject(message.playerConfig, options);
                            if (message.sendBoxStyle != null && message.hasOwnProperty("sendBoxStyle"))
                                object.sendBoxStyle = message.sendBoxStyle;
                            if (message.allow != null && message.hasOwnProperty("allow"))
                                object.allow = message.allow;
                            if (message.checkBox != null && message.hasOwnProperty("checkBox"))
                                object.checkBox = message.checkBox;
                            if (message.checkBoxShowMsg != null && message.hasOwnProperty("checkBoxShowMsg"))
                                object.checkBoxShowMsg = message.checkBoxShowMsg;
                            if (message.textPlaceholder != null && message.hasOwnProperty("textPlaceholder"))
                                object.textPlaceholder = message.textPlaceholder;
                            if (message.inputPlaceholder != null && message.hasOwnProperty("inputPlaceholder"))
                                object.inputPlaceholder = message.inputPlaceholder;
                            if (message.reportFilterContent && message.reportFilterContent.length) {
                                object.reportFilterContent = [];
                                for (let j = 0; j < message.reportFilterContent.length; ++j)
                                    object.reportFilterContent[j] = message.reportFilterContent[j];
                            }
                            if (message.expoReport != null && message.hasOwnProperty("expoReport"))
                                object.expoReport = $root.bilibili.community.service.dm.v1.ExpoReport.toObject(message.expoReport, options);
                            if (message.buzzwordConfig != null && message.hasOwnProperty("buzzwordConfig"))
                                object.buzzwordConfig = $root.bilibili.community.service.dm.v1.BuzzwordConfig.toObject(message.buzzwordConfig, options);
                            if (message.expressions && message.expressions.length) {
                                object.expressions = [];
                                for (let j = 0; j < message.expressions.length; ++j)
                                    object.expressions[j] = $root.bilibili.community.service.dm.v1.Expressions.toObject(message.expressions[j], options);
                            }
                            if (message.postPanel && message.postPanel.length) {
                                object.postPanel = [];
                                for (let j = 0; j < message.postPanel.length; ++j)
                                    object.postPanel[j] = $root.bilibili.community.service.dm.v1.PostPanel.toObject(message.postPanel[j], options);
                            }
                            if (message.activityMeta && message.activityMeta.length) {
                                object.activityMeta = [];
                                for (let j = 0; j < message.activityMeta.length; ++j)
                                    object.activityMeta[j] = message.activityMeta[j];
                            }
                            if (message.postPanel2 && message.postPanel2.length) {
                                object.postPanel2 = [];
                                for (let j = 0; j < message.postPanel2.length; ++j)
                                    object.postPanel2[j] = $root.bilibili.community.service.dm.v1.PostPanelV2.toObject(message.postPanel2[j], options);
                            }
                            return object;
                        };

                        /**
                         * Converts this DmViewReply to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.DmViewReply
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DmViewReply.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for DmViewReply
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.DmViewReply
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DmViewReply.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.DmViewReply";
                        };

                        return DmViewReply;
                    })();

                    v1.DmViewReq = (function() {

                        /**
                         * Properties of a DmViewReq.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IDmViewReq
                         * @property {number|Long|null} [pid] DmViewReq pid
                         * @property {number|Long|null} [oid] DmViewReq oid
                         * @property {number|null} [type] DmViewReq type
                         * @property {string|null} [spmid] DmViewReq spmid
                         * @property {number|null} [isHardBoot] DmViewReq isHardBoot
                         */

                        /**
                         * Constructs a new DmViewReq.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a DmViewReq.
                         * @implements IDmViewReq
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IDmViewReq=} [properties] Properties to set
                         */
                        function DmViewReq(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * DmViewReq pid.
                         * @member {number|Long} pid
                         * @memberof bilibili.community.service.dm.v1.DmViewReq
                         * @instance
                         */
                        DmViewReq.prototype.pid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * DmViewReq oid.
                         * @member {number|Long} oid
                         * @memberof bilibili.community.service.dm.v1.DmViewReq
                         * @instance
                         */
                        DmViewReq.prototype.oid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * DmViewReq type.
                         * @member {number} type
                         * @memberof bilibili.community.service.dm.v1.DmViewReq
                         * @instance
                         */
                        DmViewReq.prototype.type = 0;

                        /**
                         * DmViewReq spmid.
                         * @member {string} spmid
                         * @memberof bilibili.community.service.dm.v1.DmViewReq
                         * @instance
                         */
                        DmViewReq.prototype.spmid = "";

                        /**
                         * DmViewReq isHardBoot.
                         * @member {number} isHardBoot
                         * @memberof bilibili.community.service.dm.v1.DmViewReq
                         * @instance
                         */
                        DmViewReq.prototype.isHardBoot = 0;

                        /**
                         * Creates a new DmViewReq instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.DmViewReq
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmViewReq=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.DmViewReq} DmViewReq instance
                         */
                        DmViewReq.create = function create(properties) {
                            return new DmViewReq(properties);
                        };

                        /**
                         * Encodes the specified DmViewReq message. Does not implicitly {@link bilibili.community.service.dm.v1.DmViewReq.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.DmViewReq
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmViewReq} message DmViewReq message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DmViewReq.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.pid != null && Object.hasOwnProperty.call(message, "pid"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.pid);
                            if (message.oid != null && Object.hasOwnProperty.call(message, "oid"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.oid);
                            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.type);
                            if (message.spmid != null && Object.hasOwnProperty.call(message, "spmid"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.spmid);
                            if (message.isHardBoot != null && Object.hasOwnProperty.call(message, "isHardBoot"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.isHardBoot);
                            return writer;
                        };

                        /**
                         * Encodes the specified DmViewReq message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.DmViewReq.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DmViewReq
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmViewReq} message DmViewReq message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DmViewReq.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a DmViewReq message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.DmViewReq
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.DmViewReq} DmViewReq
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DmViewReq.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.DmViewReq();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.pid = reader.int64();
                                        break;
                                    }
                                case 2: {
                                        message.oid = reader.int64();
                                        break;
                                    }
                                case 3: {
                                        message.type = reader.int32();
                                        break;
                                    }
                                case 4: {
                                        message.spmid = reader.string();
                                        break;
                                    }
                                case 5: {
                                        message.isHardBoot = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a DmViewReq message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DmViewReq
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.DmViewReq} DmViewReq
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DmViewReq.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a DmViewReq message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.DmViewReq
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DmViewReq.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.pid != null && message.hasOwnProperty("pid"))
                                if (!$util.isInteger(message.pid) && !(message.pid && $util.isInteger(message.pid.low) && $util.isInteger(message.pid.high)))
                                    return "pid: integer|Long expected";
                            if (message.oid != null && message.hasOwnProperty("oid"))
                                if (!$util.isInteger(message.oid) && !(message.oid && $util.isInteger(message.oid.low) && $util.isInteger(message.oid.high)))
                                    return "oid: integer|Long expected";
                            if (message.type != null && message.hasOwnProperty("type"))
                                if (!$util.isInteger(message.type))
                                    return "type: integer expected";
                            if (message.spmid != null && message.hasOwnProperty("spmid"))
                                if (!$util.isString(message.spmid))
                                    return "spmid: string expected";
                            if (message.isHardBoot != null && message.hasOwnProperty("isHardBoot"))
                                if (!$util.isInteger(message.isHardBoot))
                                    return "isHardBoot: integer expected";
                            return null;
                        };

                        /**
                         * Creates a DmViewReq message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.DmViewReq
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.DmViewReq} DmViewReq
                         */
                        DmViewReq.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.DmViewReq)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.DmViewReq();
                            if (object.pid != null)
                                if ($util.Long)
                                    (message.pid = $util.Long.fromValue(object.pid)).unsigned = false;
                                else if (typeof object.pid === "string")
                                    message.pid = parseInt(object.pid, 10);
                                else if (typeof object.pid === "number")
                                    message.pid = object.pid;
                                else if (typeof object.pid === "object")
                                    message.pid = new $util.LongBits(object.pid.low >>> 0, object.pid.high >>> 0).toNumber();
                            if (object.oid != null)
                                if ($util.Long)
                                    (message.oid = $util.Long.fromValue(object.oid)).unsigned = false;
                                else if (typeof object.oid === "string")
                                    message.oid = parseInt(object.oid, 10);
                                else if (typeof object.oid === "number")
                                    message.oid = object.oid;
                                else if (typeof object.oid === "object")
                                    message.oid = new $util.LongBits(object.oid.low >>> 0, object.oid.high >>> 0).toNumber();
                            if (object.type != null)
                                message.type = object.type | 0;
                            if (object.spmid != null)
                                message.spmid = String(object.spmid);
                            if (object.isHardBoot != null)
                                message.isHardBoot = object.isHardBoot | 0;
                            return message;
                        };

                        /**
                         * Creates a plain object from a DmViewReq message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.DmViewReq
                         * @static
                         * @param {bilibili.community.service.dm.v1.DmViewReq} message DmViewReq
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DmViewReq.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.pid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.pid = options.longs === String ? "0" : 0;
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.oid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.oid = options.longs === String ? "0" : 0;
                                object.type = 0;
                                object.spmid = "";
                                object.isHardBoot = 0;
                            }
                            if (message.pid != null && message.hasOwnProperty("pid"))
                                if (typeof message.pid === "number")
                                    object.pid = options.longs === String ? String(message.pid) : message.pid;
                                else
                                    object.pid = options.longs === String ? $util.Long.prototype.toString.call(message.pid) : options.longs === Number ? new $util.LongBits(message.pid.low >>> 0, message.pid.high >>> 0).toNumber() : message.pid;
                            if (message.oid != null && message.hasOwnProperty("oid"))
                                if (typeof message.oid === "number")
                                    object.oid = options.longs === String ? String(message.oid) : message.oid;
                                else
                                    object.oid = options.longs === String ? $util.Long.prototype.toString.call(message.oid) : options.longs === Number ? new $util.LongBits(message.oid.low >>> 0, message.oid.high >>> 0).toNumber() : message.oid;
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = message.type;
                            if (message.spmid != null && message.hasOwnProperty("spmid"))
                                object.spmid = message.spmid;
                            if (message.isHardBoot != null && message.hasOwnProperty("isHardBoot"))
                                object.isHardBoot = message.isHardBoot;
                            return object;
                        };

                        /**
                         * Converts this DmViewReq to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.DmViewReq
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DmViewReq.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for DmViewReq
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.DmViewReq
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DmViewReq.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.DmViewReq";
                        };

                        return DmViewReq;
                    })();

                    v1.DmWebViewReply = (function() {

                        /**
                         * Properties of a DmWebViewReply.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IDmWebViewReply
                         * @property {number|null} [state] DmWebViewReply state
                         * @property {string|null} [text] DmWebViewReply text
                         * @property {string|null} [textSide] DmWebViewReply textSide
                         * @property {bilibili.community.service.dm.v1.IDmSegConfig|null} [dmSge] DmWebViewReply dmSge
                         * @property {bilibili.community.service.dm.v1.IDanmakuFlagConfig|null} [flag] DmWebViewReply flag
                         * @property {Array.<string>|null} [specialDms] DmWebViewReply specialDms
                         * @property {boolean|null} [checkBox] DmWebViewReply checkBox
                         * @property {number|Long|null} [count] DmWebViewReply count
                         * @property {Array.<bilibili.community.service.dm.v1.ICommandDm>|null} [commandDms] DmWebViewReply commandDms
                         * @property {bilibili.community.service.dm.v1.IDanmuWebPlayerConfig|null} [playerConfig] DmWebViewReply playerConfig
                         * @property {Array.<string>|null} [reportFilterContent] DmWebViewReply reportFilterContent
                         * @property {Array.<bilibili.community.service.dm.v1.IExpressions>|null} [expressions] DmWebViewReply expressions
                         * @property {Array.<bilibili.community.service.dm.v1.IPostPanel>|null} [postPanel] DmWebViewReply postPanel
                         * @property {Array.<string>|null} [activityMeta] DmWebViewReply activityMeta
                         */

                        /**
                         * Constructs a new DmWebViewReply.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a DmWebViewReply.
                         * @implements IDmWebViewReply
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IDmWebViewReply=} [properties] Properties to set
                         */
                        function DmWebViewReply(properties) {
                            this.specialDms = [];
                            this.commandDms = [];
                            this.reportFilterContent = [];
                            this.expressions = [];
                            this.postPanel = [];
                            this.activityMeta = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * DmWebViewReply state.
                         * @member {number} state
                         * @memberof bilibili.community.service.dm.v1.DmWebViewReply
                         * @instance
                         */
                        DmWebViewReply.prototype.state = 0;

                        /**
                         * DmWebViewReply text.
                         * @member {string} text
                         * @memberof bilibili.community.service.dm.v1.DmWebViewReply
                         * @instance
                         */
                        DmWebViewReply.prototype.text = "";

                        /**
                         * DmWebViewReply textSide.
                         * @member {string} textSide
                         * @memberof bilibili.community.service.dm.v1.DmWebViewReply
                         * @instance
                         */
                        DmWebViewReply.prototype.textSide = "";

                        /**
                         * DmWebViewReply dmSge.
                         * @member {bilibili.community.service.dm.v1.IDmSegConfig|null|undefined} dmSge
                         * @memberof bilibili.community.service.dm.v1.DmWebViewReply
                         * @instance
                         */
                        DmWebViewReply.prototype.dmSge = null;

                        /**
                         * DmWebViewReply flag.
                         * @member {bilibili.community.service.dm.v1.IDanmakuFlagConfig|null|undefined} flag
                         * @memberof bilibili.community.service.dm.v1.DmWebViewReply
                         * @instance
                         */
                        DmWebViewReply.prototype.flag = null;

                        /**
                         * DmWebViewReply specialDms.
                         * @member {Array.<string>} specialDms
                         * @memberof bilibili.community.service.dm.v1.DmWebViewReply
                         * @instance
                         */
                        DmWebViewReply.prototype.specialDms = $util.emptyArray;

                        /**
                         * DmWebViewReply checkBox.
                         * @member {boolean} checkBox
                         * @memberof bilibili.community.service.dm.v1.DmWebViewReply
                         * @instance
                         */
                        DmWebViewReply.prototype.checkBox = false;

                        /**
                         * DmWebViewReply count.
                         * @member {number|Long} count
                         * @memberof bilibili.community.service.dm.v1.DmWebViewReply
                         * @instance
                         */
                        DmWebViewReply.prototype.count = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * DmWebViewReply commandDms.
                         * @member {Array.<bilibili.community.service.dm.v1.ICommandDm>} commandDms
                         * @memberof bilibili.community.service.dm.v1.DmWebViewReply
                         * @instance
                         */
                        DmWebViewReply.prototype.commandDms = $util.emptyArray;

                        /**
                         * DmWebViewReply playerConfig.
                         * @member {bilibili.community.service.dm.v1.IDanmuWebPlayerConfig|null|undefined} playerConfig
                         * @memberof bilibili.community.service.dm.v1.DmWebViewReply
                         * @instance
                         */
                        DmWebViewReply.prototype.playerConfig = null;

                        /**
                         * DmWebViewReply reportFilterContent.
                         * @member {Array.<string>} reportFilterContent
                         * @memberof bilibili.community.service.dm.v1.DmWebViewReply
                         * @instance
                         */
                        DmWebViewReply.prototype.reportFilterContent = $util.emptyArray;

                        /**
                         * DmWebViewReply expressions.
                         * @member {Array.<bilibili.community.service.dm.v1.IExpressions>} expressions
                         * @memberof bilibili.community.service.dm.v1.DmWebViewReply
                         * @instance
                         */
                        DmWebViewReply.prototype.expressions = $util.emptyArray;

                        /**
                         * DmWebViewReply postPanel.
                         * @member {Array.<bilibili.community.service.dm.v1.IPostPanel>} postPanel
                         * @memberof bilibili.community.service.dm.v1.DmWebViewReply
                         * @instance
                         */
                        DmWebViewReply.prototype.postPanel = $util.emptyArray;

                        /**
                         * DmWebViewReply activityMeta.
                         * @member {Array.<string>} activityMeta
                         * @memberof bilibili.community.service.dm.v1.DmWebViewReply
                         * @instance
                         */
                        DmWebViewReply.prototype.activityMeta = $util.emptyArray;

                        /**
                         * Creates a new DmWebViewReply instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.DmWebViewReply
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmWebViewReply=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.DmWebViewReply} DmWebViewReply instance
                         */
                        DmWebViewReply.create = function create(properties) {
                            return new DmWebViewReply(properties);
                        };

                        /**
                         * Encodes the specified DmWebViewReply message. Does not implicitly {@link bilibili.community.service.dm.v1.DmWebViewReply.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.DmWebViewReply
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmWebViewReply} message DmWebViewReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DmWebViewReply.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.state);
                            if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.text);
                            if (message.textSide != null && Object.hasOwnProperty.call(message, "textSide"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.textSide);
                            if (message.dmSge != null && Object.hasOwnProperty.call(message, "dmSge"))
                                $root.bilibili.community.service.dm.v1.DmSegConfig.encode(message.dmSge, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.flag != null && Object.hasOwnProperty.call(message, "flag"))
                                $root.bilibili.community.service.dm.v1.DanmakuFlagConfig.encode(message.flag, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.specialDms != null && message.specialDms.length)
                                for (let i = 0; i < message.specialDms.length; ++i)
                                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.specialDms[i]);
                            if (message.checkBox != null && Object.hasOwnProperty.call(message, "checkBox"))
                                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.checkBox);
                            if (message.count != null && Object.hasOwnProperty.call(message, "count"))
                                writer.uint32(/* id 8, wireType 0 =*/64).int64(message.count);
                            if (message.commandDms != null && message.commandDms.length)
                                for (let i = 0; i < message.commandDms.length; ++i)
                                    $root.bilibili.community.service.dm.v1.CommandDm.encode(message.commandDms[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                            if (message.playerConfig != null && Object.hasOwnProperty.call(message, "playerConfig"))
                                $root.bilibili.community.service.dm.v1.DanmuWebPlayerConfig.encode(message.playerConfig, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                            if (message.reportFilterContent != null && message.reportFilterContent.length)
                                for (let i = 0; i < message.reportFilterContent.length; ++i)
                                    writer.uint32(/* id 11, wireType 2 =*/90).string(message.reportFilterContent[i]);
                            if (message.expressions != null && message.expressions.length)
                                for (let i = 0; i < message.expressions.length; ++i)
                                    $root.bilibili.community.service.dm.v1.Expressions.encode(message.expressions[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                            if (message.postPanel != null && message.postPanel.length)
                                for (let i = 0; i < message.postPanel.length; ++i)
                                    $root.bilibili.community.service.dm.v1.PostPanel.encode(message.postPanel[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                            if (message.activityMeta != null && message.activityMeta.length)
                                for (let i = 0; i < message.activityMeta.length; ++i)
                                    writer.uint32(/* id 14, wireType 2 =*/114).string(message.activityMeta[i]);
                            return writer;
                        };

                        /**
                         * Encodes the specified DmWebViewReply message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.DmWebViewReply.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DmWebViewReply
                         * @static
                         * @param {bilibili.community.service.dm.v1.IDmWebViewReply} message DmWebViewReply message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DmWebViewReply.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a DmWebViewReply message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.DmWebViewReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.DmWebViewReply} DmWebViewReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DmWebViewReply.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.DmWebViewReply();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.state = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.text = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.textSide = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.dmSge = $root.bilibili.community.service.dm.v1.DmSegConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 5: {
                                        message.flag = $root.bilibili.community.service.dm.v1.DanmakuFlagConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 6: {
                                        if (!(message.specialDms && message.specialDms.length))
                                            message.specialDms = [];
                                        message.specialDms.push(reader.string());
                                        break;
                                    }
                                case 7: {
                                        message.checkBox = reader.bool();
                                        break;
                                    }
                                case 8: {
                                        message.count = reader.int64();
                                        break;
                                    }
                                case 9: {
                                        if (!(message.commandDms && message.commandDms.length))
                                            message.commandDms = [];
                                        message.commandDms.push($root.bilibili.community.service.dm.v1.CommandDm.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 10: {
                                        message.playerConfig = $root.bilibili.community.service.dm.v1.DanmuWebPlayerConfig.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 11: {
                                        if (!(message.reportFilterContent && message.reportFilterContent.length))
                                            message.reportFilterContent = [];
                                        message.reportFilterContent.push(reader.string());
                                        break;
                                    }
                                case 12: {
                                        if (!(message.expressions && message.expressions.length))
                                            message.expressions = [];
                                        message.expressions.push($root.bilibili.community.service.dm.v1.Expressions.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 13: {
                                        if (!(message.postPanel && message.postPanel.length))
                                            message.postPanel = [];
                                        message.postPanel.push($root.bilibili.community.service.dm.v1.PostPanel.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 14: {
                                        if (!(message.activityMeta && message.activityMeta.length))
                                            message.activityMeta = [];
                                        message.activityMeta.push(reader.string());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a DmWebViewReply message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.DmWebViewReply
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.DmWebViewReply} DmWebViewReply
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DmWebViewReply.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a DmWebViewReply message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.DmWebViewReply
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DmWebViewReply.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.state != null && message.hasOwnProperty("state"))
                                if (!$util.isInteger(message.state))
                                    return "state: integer expected";
                            if (message.text != null && message.hasOwnProperty("text"))
                                if (!$util.isString(message.text))
                                    return "text: string expected";
                            if (message.textSide != null && message.hasOwnProperty("textSide"))
                                if (!$util.isString(message.textSide))
                                    return "textSide: string expected";
                            if (message.dmSge != null && message.hasOwnProperty("dmSge")) {
                                let error = $root.bilibili.community.service.dm.v1.DmSegConfig.verify(message.dmSge);
                                if (error)
                                    return "dmSge." + error;
                            }
                            if (message.flag != null && message.hasOwnProperty("flag")) {
                                let error = $root.bilibili.community.service.dm.v1.DanmakuFlagConfig.verify(message.flag);
                                if (error)
                                    return "flag." + error;
                            }
                            if (message.specialDms != null && message.hasOwnProperty("specialDms")) {
                                if (!Array.isArray(message.specialDms))
                                    return "specialDms: array expected";
                                for (let i = 0; i < message.specialDms.length; ++i)
                                    if (!$util.isString(message.specialDms[i]))
                                        return "specialDms: string[] expected";
                            }
                            if (message.checkBox != null && message.hasOwnProperty("checkBox"))
                                if (typeof message.checkBox !== "boolean")
                                    return "checkBox: boolean expected";
                            if (message.count != null && message.hasOwnProperty("count"))
                                if (!$util.isInteger(message.count) && !(message.count && $util.isInteger(message.count.low) && $util.isInteger(message.count.high)))
                                    return "count: integer|Long expected";
                            if (message.commandDms != null && message.hasOwnProperty("commandDms")) {
                                if (!Array.isArray(message.commandDms))
                                    return "commandDms: array expected";
                                for (let i = 0; i < message.commandDms.length; ++i) {
                                    let error = $root.bilibili.community.service.dm.v1.CommandDm.verify(message.commandDms[i]);
                                    if (error)
                                        return "commandDms." + error;
                                }
                            }
                            if (message.playerConfig != null && message.hasOwnProperty("playerConfig")) {
                                let error = $root.bilibili.community.service.dm.v1.DanmuWebPlayerConfig.verify(message.playerConfig);
                                if (error)
                                    return "playerConfig." + error;
                            }
                            if (message.reportFilterContent != null && message.hasOwnProperty("reportFilterContent")) {
                                if (!Array.isArray(message.reportFilterContent))
                                    return "reportFilterContent: array expected";
                                for (let i = 0; i < message.reportFilterContent.length; ++i)
                                    if (!$util.isString(message.reportFilterContent[i]))
                                        return "reportFilterContent: string[] expected";
                            }
                            if (message.expressions != null && message.hasOwnProperty("expressions")) {
                                if (!Array.isArray(message.expressions))
                                    return "expressions: array expected";
                                for (let i = 0; i < message.expressions.length; ++i) {
                                    let error = $root.bilibili.community.service.dm.v1.Expressions.verify(message.expressions[i]);
                                    if (error)
                                        return "expressions." + error;
                                }
                            }
                            if (message.postPanel != null && message.hasOwnProperty("postPanel")) {
                                if (!Array.isArray(message.postPanel))
                                    return "postPanel: array expected";
                                for (let i = 0; i < message.postPanel.length; ++i) {
                                    let error = $root.bilibili.community.service.dm.v1.PostPanel.verify(message.postPanel[i]);
                                    if (error)
                                        return "postPanel." + error;
                                }
                            }
                            if (message.activityMeta != null && message.hasOwnProperty("activityMeta")) {
                                if (!Array.isArray(message.activityMeta))
                                    return "activityMeta: array expected";
                                for (let i = 0; i < message.activityMeta.length; ++i)
                                    if (!$util.isString(message.activityMeta[i]))
                                        return "activityMeta: string[] expected";
                            }
                            return null;
                        };

                        /**
                         * Creates a DmWebViewReply message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.DmWebViewReply
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.DmWebViewReply} DmWebViewReply
                         */
                        DmWebViewReply.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.DmWebViewReply)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.DmWebViewReply();
                            if (object.state != null)
                                message.state = object.state | 0;
                            if (object.text != null)
                                message.text = String(object.text);
                            if (object.textSide != null)
                                message.textSide = String(object.textSide);
                            if (object.dmSge != null) {
                                if (typeof object.dmSge !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DmWebViewReply.dmSge: object expected");
                                message.dmSge = $root.bilibili.community.service.dm.v1.DmSegConfig.fromObject(object.dmSge);
                            }
                            if (object.flag != null) {
                                if (typeof object.flag !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DmWebViewReply.flag: object expected");
                                message.flag = $root.bilibili.community.service.dm.v1.DanmakuFlagConfig.fromObject(object.flag);
                            }
                            if (object.specialDms) {
                                if (!Array.isArray(object.specialDms))
                                    throw TypeError(".bilibili.community.service.dm.v1.DmWebViewReply.specialDms: array expected");
                                message.specialDms = [];
                                for (let i = 0; i < object.specialDms.length; ++i)
                                    message.specialDms[i] = String(object.specialDms[i]);
                            }
                            if (object.checkBox != null)
                                message.checkBox = Boolean(object.checkBox);
                            if (object.count != null)
                                if ($util.Long)
                                    (message.count = $util.Long.fromValue(object.count)).unsigned = false;
                                else if (typeof object.count === "string")
                                    message.count = parseInt(object.count, 10);
                                else if (typeof object.count === "number")
                                    message.count = object.count;
                                else if (typeof object.count === "object")
                                    message.count = new $util.LongBits(object.count.low >>> 0, object.count.high >>> 0).toNumber();
                            if (object.commandDms) {
                                if (!Array.isArray(object.commandDms))
                                    throw TypeError(".bilibili.community.service.dm.v1.DmWebViewReply.commandDms: array expected");
                                message.commandDms = [];
                                for (let i = 0; i < object.commandDms.length; ++i) {
                                    if (typeof object.commandDms[i] !== "object")
                                        throw TypeError(".bilibili.community.service.dm.v1.DmWebViewReply.commandDms: object expected");
                                    message.commandDms[i] = $root.bilibili.community.service.dm.v1.CommandDm.fromObject(object.commandDms[i]);
                                }
                            }
                            if (object.playerConfig != null) {
                                if (typeof object.playerConfig !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.DmWebViewReply.playerConfig: object expected");
                                message.playerConfig = $root.bilibili.community.service.dm.v1.DanmuWebPlayerConfig.fromObject(object.playerConfig);
                            }
                            if (object.reportFilterContent) {
                                if (!Array.isArray(object.reportFilterContent))
                                    throw TypeError(".bilibili.community.service.dm.v1.DmWebViewReply.reportFilterContent: array expected");
                                message.reportFilterContent = [];
                                for (let i = 0; i < object.reportFilterContent.length; ++i)
                                    message.reportFilterContent[i] = String(object.reportFilterContent[i]);
                            }
                            if (object.expressions) {
                                if (!Array.isArray(object.expressions))
                                    throw TypeError(".bilibili.community.service.dm.v1.DmWebViewReply.expressions: array expected");
                                message.expressions = [];
                                for (let i = 0; i < object.expressions.length; ++i) {
                                    if (typeof object.expressions[i] !== "object")
                                        throw TypeError(".bilibili.community.service.dm.v1.DmWebViewReply.expressions: object expected");
                                    message.expressions[i] = $root.bilibili.community.service.dm.v1.Expressions.fromObject(object.expressions[i]);
                                }
                            }
                            if (object.postPanel) {
                                if (!Array.isArray(object.postPanel))
                                    throw TypeError(".bilibili.community.service.dm.v1.DmWebViewReply.postPanel: array expected");
                                message.postPanel = [];
                                for (let i = 0; i < object.postPanel.length; ++i) {
                                    if (typeof object.postPanel[i] !== "object")
                                        throw TypeError(".bilibili.community.service.dm.v1.DmWebViewReply.postPanel: object expected");
                                    message.postPanel[i] = $root.bilibili.community.service.dm.v1.PostPanel.fromObject(object.postPanel[i]);
                                }
                            }
                            if (object.activityMeta) {
                                if (!Array.isArray(object.activityMeta))
                                    throw TypeError(".bilibili.community.service.dm.v1.DmWebViewReply.activityMeta: array expected");
                                message.activityMeta = [];
                                for (let i = 0; i < object.activityMeta.length; ++i)
                                    message.activityMeta[i] = String(object.activityMeta[i]);
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a DmWebViewReply message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.DmWebViewReply
                         * @static
                         * @param {bilibili.community.service.dm.v1.DmWebViewReply} message DmWebViewReply
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DmWebViewReply.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults) {
                                object.specialDms = [];
                                object.commandDms = [];
                                object.reportFilterContent = [];
                                object.expressions = [];
                                object.postPanel = [];
                                object.activityMeta = [];
                            }
                            if (options.defaults) {
                                object.state = 0;
                                object.text = "";
                                object.textSide = "";
                                object.dmSge = null;
                                object.flag = null;
                                object.checkBox = false;
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.count = options.longs === String ? "0" : 0;
                                object.playerConfig = null;
                            }
                            if (message.state != null && message.hasOwnProperty("state"))
                                object.state = message.state;
                            if (message.text != null && message.hasOwnProperty("text"))
                                object.text = message.text;
                            if (message.textSide != null && message.hasOwnProperty("textSide"))
                                object.textSide = message.textSide;
                            if (message.dmSge != null && message.hasOwnProperty("dmSge"))
                                object.dmSge = $root.bilibili.community.service.dm.v1.DmSegConfig.toObject(message.dmSge, options);
                            if (message.flag != null && message.hasOwnProperty("flag"))
                                object.flag = $root.bilibili.community.service.dm.v1.DanmakuFlagConfig.toObject(message.flag, options);
                            if (message.specialDms && message.specialDms.length) {
                                object.specialDms = [];
                                for (let j = 0; j < message.specialDms.length; ++j)
                                    object.specialDms[j] = message.specialDms[j];
                            }
                            if (message.checkBox != null && message.hasOwnProperty("checkBox"))
                                object.checkBox = message.checkBox;
                            if (message.count != null && message.hasOwnProperty("count"))
                                if (typeof message.count === "number")
                                    object.count = options.longs === String ? String(message.count) : message.count;
                                else
                                    object.count = options.longs === String ? $util.Long.prototype.toString.call(message.count) : options.longs === Number ? new $util.LongBits(message.count.low >>> 0, message.count.high >>> 0).toNumber() : message.count;
                            if (message.commandDms && message.commandDms.length) {
                                object.commandDms = [];
                                for (let j = 0; j < message.commandDms.length; ++j)
                                    object.commandDms[j] = $root.bilibili.community.service.dm.v1.CommandDm.toObject(message.commandDms[j], options);
                            }
                            if (message.playerConfig != null && message.hasOwnProperty("playerConfig"))
                                object.playerConfig = $root.bilibili.community.service.dm.v1.DanmuWebPlayerConfig.toObject(message.playerConfig, options);
                            if (message.reportFilterContent && message.reportFilterContent.length) {
                                object.reportFilterContent = [];
                                for (let j = 0; j < message.reportFilterContent.length; ++j)
                                    object.reportFilterContent[j] = message.reportFilterContent[j];
                            }
                            if (message.expressions && message.expressions.length) {
                                object.expressions = [];
                                for (let j = 0; j < message.expressions.length; ++j)
                                    object.expressions[j] = $root.bilibili.community.service.dm.v1.Expressions.toObject(message.expressions[j], options);
                            }
                            if (message.postPanel && message.postPanel.length) {
                                object.postPanel = [];
                                for (let j = 0; j < message.postPanel.length; ++j)
                                    object.postPanel[j] = $root.bilibili.community.service.dm.v1.PostPanel.toObject(message.postPanel[j], options);
                            }
                            if (message.activityMeta && message.activityMeta.length) {
                                object.activityMeta = [];
                                for (let j = 0; j < message.activityMeta.length; ++j)
                                    object.activityMeta[j] = message.activityMeta[j];
                            }
                            return object;
                        };

                        /**
                         * Converts this DmWebViewReply to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.DmWebViewReply
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DmWebViewReply.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for DmWebViewReply
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.DmWebViewReply
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        DmWebViewReply.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.DmWebViewReply";
                        };

                        return DmWebViewReply;
                    })();

                    v1.ExpoReport = (function() {

                        /**
                         * Properties of an ExpoReport.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IExpoReport
                         * @property {boolean|null} [shouldReportAtEnd] ExpoReport shouldReportAtEnd
                         */

                        /**
                         * Constructs a new ExpoReport.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents an ExpoReport.
                         * @implements IExpoReport
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IExpoReport=} [properties] Properties to set
                         */
                        function ExpoReport(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * ExpoReport shouldReportAtEnd.
                         * @member {boolean} shouldReportAtEnd
                         * @memberof bilibili.community.service.dm.v1.ExpoReport
                         * @instance
                         */
                        ExpoReport.prototype.shouldReportAtEnd = false;

                        /**
                         * Creates a new ExpoReport instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.ExpoReport
                         * @static
                         * @param {bilibili.community.service.dm.v1.IExpoReport=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.ExpoReport} ExpoReport instance
                         */
                        ExpoReport.create = function create(properties) {
                            return new ExpoReport(properties);
                        };

                        /**
                         * Encodes the specified ExpoReport message. Does not implicitly {@link bilibili.community.service.dm.v1.ExpoReport.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.ExpoReport
                         * @static
                         * @param {bilibili.community.service.dm.v1.IExpoReport} message ExpoReport message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExpoReport.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.shouldReportAtEnd != null && Object.hasOwnProperty.call(message, "shouldReportAtEnd"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.shouldReportAtEnd);
                            return writer;
                        };

                        /**
                         * Encodes the specified ExpoReport message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.ExpoReport.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.ExpoReport
                         * @static
                         * @param {bilibili.community.service.dm.v1.IExpoReport} message ExpoReport message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ExpoReport.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an ExpoReport message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.ExpoReport
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.ExpoReport} ExpoReport
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExpoReport.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.ExpoReport();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.shouldReportAtEnd = reader.bool();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an ExpoReport message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.ExpoReport
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.ExpoReport} ExpoReport
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ExpoReport.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an ExpoReport message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.ExpoReport
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ExpoReport.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.shouldReportAtEnd != null && message.hasOwnProperty("shouldReportAtEnd"))
                                if (typeof message.shouldReportAtEnd !== "boolean")
                                    return "shouldReportAtEnd: boolean expected";
                            return null;
                        };

                        /**
                         * Creates an ExpoReport message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.ExpoReport
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.ExpoReport} ExpoReport
                         */
                        ExpoReport.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.ExpoReport)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.ExpoReport();
                            if (object.shouldReportAtEnd != null)
                                message.shouldReportAtEnd = Boolean(object.shouldReportAtEnd);
                            return message;
                        };

                        /**
                         * Creates a plain object from an ExpoReport message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.ExpoReport
                         * @static
                         * @param {bilibili.community.service.dm.v1.ExpoReport} message ExpoReport
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ExpoReport.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults)
                                object.shouldReportAtEnd = false;
                            if (message.shouldReportAtEnd != null && message.hasOwnProperty("shouldReportAtEnd"))
                                object.shouldReportAtEnd = message.shouldReportAtEnd;
                            return object;
                        };

                        /**
                         * Converts this ExpoReport to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.ExpoReport
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ExpoReport.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for ExpoReport
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.ExpoReport
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ExpoReport.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.ExpoReport";
                        };

                        return ExpoReport;
                    })();

                    /**
                     * ExposureType enum.
                     * @name bilibili.community.service.dm.v1.ExposureType
                     * @enum {number}
                     * @property {number} ExposureTypeNone=0 ExposureTypeNone value
                     * @property {number} ExposureTypeDMSend=1 ExposureTypeDMSend value
                     */
                    v1.ExposureType = (function() {
                        const valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "ExposureTypeNone"] = 0;
                        values[valuesById[1] = "ExposureTypeDMSend"] = 1;
                        return values;
                    })();

                    v1.Expression = (function() {

                        /**
                         * Properties of an Expression.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IExpression
                         * @property {Array.<string>|null} [keyword] Expression keyword
                         * @property {string|null} [url] Expression url
                         * @property {Array.<bilibili.community.service.dm.v1.IPeriod>|null} [period] Expression period
                         */

                        /**
                         * Constructs a new Expression.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents an Expression.
                         * @implements IExpression
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IExpression=} [properties] Properties to set
                         */
                        function Expression(properties) {
                            this.keyword = [];
                            this.period = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Expression keyword.
                         * @member {Array.<string>} keyword
                         * @memberof bilibili.community.service.dm.v1.Expression
                         * @instance
                         */
                        Expression.prototype.keyword = $util.emptyArray;

                        /**
                         * Expression url.
                         * @member {string} url
                         * @memberof bilibili.community.service.dm.v1.Expression
                         * @instance
                         */
                        Expression.prototype.url = "";

                        /**
                         * Expression period.
                         * @member {Array.<bilibili.community.service.dm.v1.IPeriod>} period
                         * @memberof bilibili.community.service.dm.v1.Expression
                         * @instance
                         */
                        Expression.prototype.period = $util.emptyArray;

                        /**
                         * Creates a new Expression instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.Expression
                         * @static
                         * @param {bilibili.community.service.dm.v1.IExpression=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.Expression} Expression instance
                         */
                        Expression.create = function create(properties) {
                            return new Expression(properties);
                        };

                        /**
                         * Encodes the specified Expression message. Does not implicitly {@link bilibili.community.service.dm.v1.Expression.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.Expression
                         * @static
                         * @param {bilibili.community.service.dm.v1.IExpression} message Expression message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Expression.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.keyword != null && message.keyword.length)
                                for (let i = 0; i < message.keyword.length; ++i)
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.keyword[i]);
                            if (message.url != null && Object.hasOwnProperty.call(message, "url"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.url);
                            if (message.period != null && message.period.length)
                                for (let i = 0; i < message.period.length; ++i)
                                    $root.bilibili.community.service.dm.v1.Period.encode(message.period[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified Expression message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.Expression.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.Expression
                         * @static
                         * @param {bilibili.community.service.dm.v1.IExpression} message Expression message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Expression.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an Expression message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.Expression
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.Expression} Expression
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Expression.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.Expression();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.keyword && message.keyword.length))
                                            message.keyword = [];
                                        message.keyword.push(reader.string());
                                        break;
                                    }
                                case 2: {
                                        message.url = reader.string();
                                        break;
                                    }
                                case 3: {
                                        if (!(message.period && message.period.length))
                                            message.period = [];
                                        message.period.push($root.bilibili.community.service.dm.v1.Period.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an Expression message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.Expression
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.Expression} Expression
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Expression.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an Expression message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.Expression
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Expression.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.keyword != null && message.hasOwnProperty("keyword")) {
                                if (!Array.isArray(message.keyword))
                                    return "keyword: array expected";
                                for (let i = 0; i < message.keyword.length; ++i)
                                    if (!$util.isString(message.keyword[i]))
                                        return "keyword: string[] expected";
                            }
                            if (message.url != null && message.hasOwnProperty("url"))
                                if (!$util.isString(message.url))
                                    return "url: string expected";
                            if (message.period != null && message.hasOwnProperty("period")) {
                                if (!Array.isArray(message.period))
                                    return "period: array expected";
                                for (let i = 0; i < message.period.length; ++i) {
                                    let error = $root.bilibili.community.service.dm.v1.Period.verify(message.period[i]);
                                    if (error)
                                        return "period." + error;
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates an Expression message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.Expression
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.Expression} Expression
                         */
                        Expression.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.Expression)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.Expression();
                            if (object.keyword) {
                                if (!Array.isArray(object.keyword))
                                    throw TypeError(".bilibili.community.service.dm.v1.Expression.keyword: array expected");
                                message.keyword = [];
                                for (let i = 0; i < object.keyword.length; ++i)
                                    message.keyword[i] = String(object.keyword[i]);
                            }
                            if (object.url != null)
                                message.url = String(object.url);
                            if (object.period) {
                                if (!Array.isArray(object.period))
                                    throw TypeError(".bilibili.community.service.dm.v1.Expression.period: array expected");
                                message.period = [];
                                for (let i = 0; i < object.period.length; ++i) {
                                    if (typeof object.period[i] !== "object")
                                        throw TypeError(".bilibili.community.service.dm.v1.Expression.period: object expected");
                                    message.period[i] = $root.bilibili.community.service.dm.v1.Period.fromObject(object.period[i]);
                                }
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from an Expression message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.Expression
                         * @static
                         * @param {bilibili.community.service.dm.v1.Expression} message Expression
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Expression.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults) {
                                object.keyword = [];
                                object.period = [];
                            }
                            if (options.defaults)
                                object.url = "";
                            if (message.keyword && message.keyword.length) {
                                object.keyword = [];
                                for (let j = 0; j < message.keyword.length; ++j)
                                    object.keyword[j] = message.keyword[j];
                            }
                            if (message.url != null && message.hasOwnProperty("url"))
                                object.url = message.url;
                            if (message.period && message.period.length) {
                                object.period = [];
                                for (let j = 0; j < message.period.length; ++j)
                                    object.period[j] = $root.bilibili.community.service.dm.v1.Period.toObject(message.period[j], options);
                            }
                            return object;
                        };

                        /**
                         * Converts this Expression to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.Expression
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Expression.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for Expression
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.Expression
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Expression.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.Expression";
                        };

                        return Expression;
                    })();

                    v1.Expressions = (function() {

                        /**
                         * Properties of an Expressions.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IExpressions
                         * @property {Array.<bilibili.community.service.dm.v1.IExpression>|null} [data] Expressions data
                         */

                        /**
                         * Constructs a new Expressions.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents an Expressions.
                         * @implements IExpressions
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IExpressions=} [properties] Properties to set
                         */
                        function Expressions(properties) {
                            this.data = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Expressions data.
                         * @member {Array.<bilibili.community.service.dm.v1.IExpression>} data
                         * @memberof bilibili.community.service.dm.v1.Expressions
                         * @instance
                         */
                        Expressions.prototype.data = $util.emptyArray;

                        /**
                         * Creates a new Expressions instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.Expressions
                         * @static
                         * @param {bilibili.community.service.dm.v1.IExpressions=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.Expressions} Expressions instance
                         */
                        Expressions.create = function create(properties) {
                            return new Expressions(properties);
                        };

                        /**
                         * Encodes the specified Expressions message. Does not implicitly {@link bilibili.community.service.dm.v1.Expressions.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.Expressions
                         * @static
                         * @param {bilibili.community.service.dm.v1.IExpressions} message Expressions message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Expressions.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.data != null && message.data.length)
                                for (let i = 0; i < message.data.length; ++i)
                                    $root.bilibili.community.service.dm.v1.Expression.encode(message.data[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified Expressions message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.Expressions.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.Expressions
                         * @static
                         * @param {bilibili.community.service.dm.v1.IExpressions} message Expressions message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Expressions.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an Expressions message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.Expressions
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.Expressions} Expressions
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Expressions.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.Expressions();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.data && message.data.length))
                                            message.data = [];
                                        message.data.push($root.bilibili.community.service.dm.v1.Expression.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an Expressions message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.Expressions
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.Expressions} Expressions
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Expressions.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an Expressions message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.Expressions
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Expressions.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.data != null && message.hasOwnProperty("data")) {
                                if (!Array.isArray(message.data))
                                    return "data: array expected";
                                for (let i = 0; i < message.data.length; ++i) {
                                    let error = $root.bilibili.community.service.dm.v1.Expression.verify(message.data[i]);
                                    if (error)
                                        return "data." + error;
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates an Expressions message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.Expressions
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.Expressions} Expressions
                         */
                        Expressions.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.Expressions)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.Expressions();
                            if (object.data) {
                                if (!Array.isArray(object.data))
                                    throw TypeError(".bilibili.community.service.dm.v1.Expressions.data: array expected");
                                message.data = [];
                                for (let i = 0; i < object.data.length; ++i) {
                                    if (typeof object.data[i] !== "object")
                                        throw TypeError(".bilibili.community.service.dm.v1.Expressions.data: object expected");
                                    message.data[i] = $root.bilibili.community.service.dm.v1.Expression.fromObject(object.data[i]);
                                }
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from an Expressions message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.Expressions
                         * @static
                         * @param {bilibili.community.service.dm.v1.Expressions} message Expressions
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Expressions.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults)
                                object.data = [];
                            if (message.data && message.data.length) {
                                object.data = [];
                                for (let j = 0; j < message.data.length; ++j)
                                    object.data[j] = $root.bilibili.community.service.dm.v1.Expression.toObject(message.data[j], options);
                            }
                            return object;
                        };

                        /**
                         * Converts this Expressions to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.Expressions
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Expressions.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for Expressions
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.Expressions
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Expressions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.Expressions";
                        };

                        return Expressions;
                    })();

                    v1.InlinePlayerDanmakuSwitch = (function() {

                        /**
                         * Properties of an InlinePlayerDanmakuSwitch.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IInlinePlayerDanmakuSwitch
                         * @property {boolean|null} [value] InlinePlayerDanmakuSwitch value
                         */

                        /**
                         * Constructs a new InlinePlayerDanmakuSwitch.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents an InlinePlayerDanmakuSwitch.
                         * @implements IInlinePlayerDanmakuSwitch
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IInlinePlayerDanmakuSwitch=} [properties] Properties to set
                         */
                        function InlinePlayerDanmakuSwitch(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * InlinePlayerDanmakuSwitch value.
                         * @member {boolean} value
                         * @memberof bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch
                         * @instance
                         */
                        InlinePlayerDanmakuSwitch.prototype.value = false;

                        /**
                         * Creates a new InlinePlayerDanmakuSwitch instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch
                         * @static
                         * @param {bilibili.community.service.dm.v1.IInlinePlayerDanmakuSwitch=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch} InlinePlayerDanmakuSwitch instance
                         */
                        InlinePlayerDanmakuSwitch.create = function create(properties) {
                            return new InlinePlayerDanmakuSwitch(properties);
                        };

                        /**
                         * Encodes the specified InlinePlayerDanmakuSwitch message. Does not implicitly {@link bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch
                         * @static
                         * @param {bilibili.community.service.dm.v1.IInlinePlayerDanmakuSwitch} message InlinePlayerDanmakuSwitch message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        InlinePlayerDanmakuSwitch.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.value);
                            return writer;
                        };

                        /**
                         * Encodes the specified InlinePlayerDanmakuSwitch message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch
                         * @static
                         * @param {bilibili.community.service.dm.v1.IInlinePlayerDanmakuSwitch} message InlinePlayerDanmakuSwitch message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        InlinePlayerDanmakuSwitch.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes an InlinePlayerDanmakuSwitch message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch} InlinePlayerDanmakuSwitch
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        InlinePlayerDanmakuSwitch.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.value = reader.bool();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes an InlinePlayerDanmakuSwitch message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch} InlinePlayerDanmakuSwitch
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        InlinePlayerDanmakuSwitch.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies an InlinePlayerDanmakuSwitch message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        InlinePlayerDanmakuSwitch.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (typeof message.value !== "boolean")
                                    return "value: boolean expected";
                            return null;
                        };

                        /**
                         * Creates an InlinePlayerDanmakuSwitch message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch} InlinePlayerDanmakuSwitch
                         */
                        InlinePlayerDanmakuSwitch.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch();
                            if (object.value != null)
                                message.value = Boolean(object.value);
                            return message;
                        };

                        /**
                         * Creates a plain object from an InlinePlayerDanmakuSwitch message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch
                         * @static
                         * @param {bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch} message InlinePlayerDanmakuSwitch
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        InlinePlayerDanmakuSwitch.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults)
                                object.value = false;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = message.value;
                            return object;
                        };

                        /**
                         * Converts this InlinePlayerDanmakuSwitch to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        InlinePlayerDanmakuSwitch.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for InlinePlayerDanmakuSwitch
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        InlinePlayerDanmakuSwitch.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.InlinePlayerDanmakuSwitch";
                        };

                        return InlinePlayerDanmakuSwitch;
                    })();

                    v1.Label = (function() {

                        /**
                         * Properties of a Label.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface ILabel
                         * @property {string|null} [title] Label title
                         * @property {Array.<string>|null} [content] Label content
                         */

                        /**
                         * Constructs a new Label.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a Label.
                         * @implements ILabel
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.ILabel=} [properties] Properties to set
                         */
                        function Label(properties) {
                            this.content = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Label title.
                         * @member {string} title
                         * @memberof bilibili.community.service.dm.v1.Label
                         * @instance
                         */
                        Label.prototype.title = "";

                        /**
                         * Label content.
                         * @member {Array.<string>} content
                         * @memberof bilibili.community.service.dm.v1.Label
                         * @instance
                         */
                        Label.prototype.content = $util.emptyArray;

                        /**
                         * Creates a new Label instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.Label
                         * @static
                         * @param {bilibili.community.service.dm.v1.ILabel=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.Label} Label instance
                         */
                        Label.create = function create(properties) {
                            return new Label(properties);
                        };

                        /**
                         * Encodes the specified Label message. Does not implicitly {@link bilibili.community.service.dm.v1.Label.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.Label
                         * @static
                         * @param {bilibili.community.service.dm.v1.ILabel} message Label message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Label.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                            if (message.content != null && message.content.length)
                                for (let i = 0; i < message.content.length; ++i)
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.content[i]);
                            return writer;
                        };

                        /**
                         * Encodes the specified Label message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.Label.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.Label
                         * @static
                         * @param {bilibili.community.service.dm.v1.ILabel} message Label message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Label.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Label message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.Label
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.Label} Label
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Label.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.Label();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.title = reader.string();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.content && message.content.length))
                                            message.content = [];
                                        message.content.push(reader.string());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Label message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.Label
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.Label} Label
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Label.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Label message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.Label
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Label.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.title != null && message.hasOwnProperty("title"))
                                if (!$util.isString(message.title))
                                    return "title: string expected";
                            if (message.content != null && message.hasOwnProperty("content")) {
                                if (!Array.isArray(message.content))
                                    return "content: array expected";
                                for (let i = 0; i < message.content.length; ++i)
                                    if (!$util.isString(message.content[i]))
                                        return "content: string[] expected";
                            }
                            return null;
                        };

                        /**
                         * Creates a Label message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.Label
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.Label} Label
                         */
                        Label.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.Label)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.Label();
                            if (object.title != null)
                                message.title = String(object.title);
                            if (object.content) {
                                if (!Array.isArray(object.content))
                                    throw TypeError(".bilibili.community.service.dm.v1.Label.content: array expected");
                                message.content = [];
                                for (let i = 0; i < object.content.length; ++i)
                                    message.content[i] = String(object.content[i]);
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a Label message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.Label
                         * @static
                         * @param {bilibili.community.service.dm.v1.Label} message Label
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Label.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults)
                                object.content = [];
                            if (options.defaults)
                                object.title = "";
                            if (message.title != null && message.hasOwnProperty("title"))
                                object.title = message.title;
                            if (message.content && message.content.length) {
                                object.content = [];
                                for (let j = 0; j < message.content.length; ++j)
                                    object.content[j] = message.content[j];
                            }
                            return object;
                        };

                        /**
                         * Converts this Label to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.Label
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Label.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for Label
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.Label
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Label.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.Label";
                        };

                        return Label;
                    })();

                    v1.LabelV2 = (function() {

                        /**
                         * Properties of a LabelV2.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface ILabelV2
                         * @property {string|null} [title] LabelV2 title
                         * @property {Array.<string>|null} [content] LabelV2 content
                         * @property {boolean|null} [exposureOnce] LabelV2 exposureOnce
                         * @property {number|null} [exposureType] LabelV2 exposureType
                         */

                        /**
                         * Constructs a new LabelV2.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a LabelV2.
                         * @implements ILabelV2
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.ILabelV2=} [properties] Properties to set
                         */
                        function LabelV2(properties) {
                            this.content = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * LabelV2 title.
                         * @member {string} title
                         * @memberof bilibili.community.service.dm.v1.LabelV2
                         * @instance
                         */
                        LabelV2.prototype.title = "";

                        /**
                         * LabelV2 content.
                         * @member {Array.<string>} content
                         * @memberof bilibili.community.service.dm.v1.LabelV2
                         * @instance
                         */
                        LabelV2.prototype.content = $util.emptyArray;

                        /**
                         * LabelV2 exposureOnce.
                         * @member {boolean} exposureOnce
                         * @memberof bilibili.community.service.dm.v1.LabelV2
                         * @instance
                         */
                        LabelV2.prototype.exposureOnce = false;

                        /**
                         * LabelV2 exposureType.
                         * @member {number} exposureType
                         * @memberof bilibili.community.service.dm.v1.LabelV2
                         * @instance
                         */
                        LabelV2.prototype.exposureType = 0;

                        /**
                         * Creates a new LabelV2 instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.LabelV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.ILabelV2=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.LabelV2} LabelV2 instance
                         */
                        LabelV2.create = function create(properties) {
                            return new LabelV2(properties);
                        };

                        /**
                         * Encodes the specified LabelV2 message. Does not implicitly {@link bilibili.community.service.dm.v1.LabelV2.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.LabelV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.ILabelV2} message LabelV2 message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelV2.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                            if (message.content != null && message.content.length)
                                for (let i = 0; i < message.content.length; ++i)
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.content[i]);
                            if (message.exposureOnce != null && Object.hasOwnProperty.call(message, "exposureOnce"))
                                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.exposureOnce);
                            if (message.exposureType != null && Object.hasOwnProperty.call(message, "exposureType"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.exposureType);
                            return writer;
                        };

                        /**
                         * Encodes the specified LabelV2 message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.LabelV2.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.LabelV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.ILabelV2} message LabelV2 message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        LabelV2.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a LabelV2 message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.LabelV2
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.LabelV2} LabelV2
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelV2.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.LabelV2();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.title = reader.string();
                                        break;
                                    }
                                case 2: {
                                        if (!(message.content && message.content.length))
                                            message.content = [];
                                        message.content.push(reader.string());
                                        break;
                                    }
                                case 3: {
                                        message.exposureOnce = reader.bool();
                                        break;
                                    }
                                case 4: {
                                        message.exposureType = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a LabelV2 message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.LabelV2
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.LabelV2} LabelV2
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        LabelV2.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a LabelV2 message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.LabelV2
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        LabelV2.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.title != null && message.hasOwnProperty("title"))
                                if (!$util.isString(message.title))
                                    return "title: string expected";
                            if (message.content != null && message.hasOwnProperty("content")) {
                                if (!Array.isArray(message.content))
                                    return "content: array expected";
                                for (let i = 0; i < message.content.length; ++i)
                                    if (!$util.isString(message.content[i]))
                                        return "content: string[] expected";
                            }
                            if (message.exposureOnce != null && message.hasOwnProperty("exposureOnce"))
                                if (typeof message.exposureOnce !== "boolean")
                                    return "exposureOnce: boolean expected";
                            if (message.exposureType != null && message.hasOwnProperty("exposureType"))
                                if (!$util.isInteger(message.exposureType))
                                    return "exposureType: integer expected";
                            return null;
                        };

                        /**
                         * Creates a LabelV2 message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.LabelV2
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.LabelV2} LabelV2
                         */
                        LabelV2.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.LabelV2)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.LabelV2();
                            if (object.title != null)
                                message.title = String(object.title);
                            if (object.content) {
                                if (!Array.isArray(object.content))
                                    throw TypeError(".bilibili.community.service.dm.v1.LabelV2.content: array expected");
                                message.content = [];
                                for (let i = 0; i < object.content.length; ++i)
                                    message.content[i] = String(object.content[i]);
                            }
                            if (object.exposureOnce != null)
                                message.exposureOnce = Boolean(object.exposureOnce);
                            if (object.exposureType != null)
                                message.exposureType = object.exposureType | 0;
                            return message;
                        };

                        /**
                         * Creates a plain object from a LabelV2 message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.LabelV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.LabelV2} message LabelV2
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        LabelV2.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults)
                                object.content = [];
                            if (options.defaults) {
                                object.title = "";
                                object.exposureOnce = false;
                                object.exposureType = 0;
                            }
                            if (message.title != null && message.hasOwnProperty("title"))
                                object.title = message.title;
                            if (message.content && message.content.length) {
                                object.content = [];
                                for (let j = 0; j < message.content.length; ++j)
                                    object.content[j] = message.content[j];
                            }
                            if (message.exposureOnce != null && message.hasOwnProperty("exposureOnce"))
                                object.exposureOnce = message.exposureOnce;
                            if (message.exposureType != null && message.hasOwnProperty("exposureType"))
                                object.exposureType = message.exposureType;
                            return object;
                        };

                        /**
                         * Converts this LabelV2 to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.LabelV2
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        LabelV2.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for LabelV2
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.LabelV2
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        LabelV2.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.LabelV2";
                        };

                        return LabelV2;
                    })();

                    v1.Period = (function() {

                        /**
                         * Properties of a Period.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IPeriod
                         * @property {number|Long|null} [start] Period start
                         * @property {number|Long|null} [end] Period end
                         */

                        /**
                         * Constructs a new Period.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a Period.
                         * @implements IPeriod
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IPeriod=} [properties] Properties to set
                         */
                        function Period(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Period start.
                         * @member {number|Long} start
                         * @memberof bilibili.community.service.dm.v1.Period
                         * @instance
                         */
                        Period.prototype.start = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * Period end.
                         * @member {number|Long} end
                         * @memberof bilibili.community.service.dm.v1.Period
                         * @instance
                         */
                        Period.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * Creates a new Period instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.Period
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPeriod=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.Period} Period instance
                         */
                        Period.create = function create(properties) {
                            return new Period(properties);
                        };

                        /**
                         * Encodes the specified Period message. Does not implicitly {@link bilibili.community.service.dm.v1.Period.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.Period
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPeriod} message Period message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Period.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.start);
                            if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);
                            return writer;
                        };

                        /**
                         * Encodes the specified Period message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.Period.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.Period
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPeriod} message Period message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Period.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Period message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.Period
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.Period} Period
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Period.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.Period();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.start = reader.int64();
                                        break;
                                    }
                                case 2: {
                                        message.end = reader.int64();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Period message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.Period
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.Period} Period
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Period.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Period message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.Period
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Period.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.start != null && message.hasOwnProperty("start"))
                                if (!$util.isInteger(message.start) && !(message.start && $util.isInteger(message.start.low) && $util.isInteger(message.start.high)))
                                    return "start: integer|Long expected";
                            if (message.end != null && message.hasOwnProperty("end"))
                                if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))
                                    return "end: integer|Long expected";
                            return null;
                        };

                        /**
                         * Creates a Period message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.Period
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.Period} Period
                         */
                        Period.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.Period)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.Period();
                            if (object.start != null)
                                if ($util.Long)
                                    (message.start = $util.Long.fromValue(object.start)).unsigned = false;
                                else if (typeof object.start === "string")
                                    message.start = parseInt(object.start, 10);
                                else if (typeof object.start === "number")
                                    message.start = object.start;
                                else if (typeof object.start === "object")
                                    message.start = new $util.LongBits(object.start.low >>> 0, object.start.high >>> 0).toNumber();
                            if (object.end != null)
                                if ($util.Long)
                                    (message.end = $util.Long.fromValue(object.end)).unsigned = false;
                                else if (typeof object.end === "string")
                                    message.end = parseInt(object.end, 10);
                                else if (typeof object.end === "number")
                                    message.end = object.end;
                                else if (typeof object.end === "object")
                                    message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();
                            return message;
                        };

                        /**
                         * Creates a plain object from a Period message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.Period
                         * @static
                         * @param {bilibili.community.service.dm.v1.Period} message Period
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Period.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.start = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.start = options.longs === String ? "0" : 0;
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.end = options.longs === String ? "0" : 0;
                            }
                            if (message.start != null && message.hasOwnProperty("start"))
                                if (typeof message.start === "number")
                                    object.start = options.longs === String ? String(message.start) : message.start;
                                else
                                    object.start = options.longs === String ? $util.Long.prototype.toString.call(message.start) : options.longs === Number ? new $util.LongBits(message.start.low >>> 0, message.start.high >>> 0).toNumber() : message.start;
                            if (message.end != null && message.hasOwnProperty("end"))
                                if (typeof message.end === "number")
                                    object.end = options.longs === String ? String(message.end) : message.end;
                                else
                                    object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;
                            return object;
                        };

                        /**
                         * Converts this Period to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.Period
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Period.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for Period
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.Period
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Period.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.Period";
                        };

                        return Period;
                    })();

                    v1.PlayerDanmakuAiRecommendedLevel = (function() {

                        /**
                         * Properties of a PlayerDanmakuAiRecommendedLevel.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IPlayerDanmakuAiRecommendedLevel
                         * @property {boolean|null} [value] PlayerDanmakuAiRecommendedLevel value
                         */

                        /**
                         * Constructs a new PlayerDanmakuAiRecommendedLevel.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a PlayerDanmakuAiRecommendedLevel.
                         * @implements IPlayerDanmakuAiRecommendedLevel
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuAiRecommendedLevel=} [properties] Properties to set
                         */
                        function PlayerDanmakuAiRecommendedLevel(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * PlayerDanmakuAiRecommendedLevel value.
                         * @member {boolean} value
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel
                         * @instance
                         */
                        PlayerDanmakuAiRecommendedLevel.prototype.value = false;

                        /**
                         * Creates a new PlayerDanmakuAiRecommendedLevel instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuAiRecommendedLevel=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel} PlayerDanmakuAiRecommendedLevel instance
                         */
                        PlayerDanmakuAiRecommendedLevel.create = function create(properties) {
                            return new PlayerDanmakuAiRecommendedLevel(properties);
                        };

                        /**
                         * Encodes the specified PlayerDanmakuAiRecommendedLevel message. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuAiRecommendedLevel} message PlayerDanmakuAiRecommendedLevel message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuAiRecommendedLevel.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.value);
                            return writer;
                        };

                        /**
                         * Encodes the specified PlayerDanmakuAiRecommendedLevel message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuAiRecommendedLevel} message PlayerDanmakuAiRecommendedLevel message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuAiRecommendedLevel.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a PlayerDanmakuAiRecommendedLevel message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel} PlayerDanmakuAiRecommendedLevel
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuAiRecommendedLevel.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.value = reader.bool();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a PlayerDanmakuAiRecommendedLevel message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel} PlayerDanmakuAiRecommendedLevel
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuAiRecommendedLevel.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a PlayerDanmakuAiRecommendedLevel message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PlayerDanmakuAiRecommendedLevel.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (typeof message.value !== "boolean")
                                    return "value: boolean expected";
                            return null;
                        };

                        /**
                         * Creates a PlayerDanmakuAiRecommendedLevel message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel} PlayerDanmakuAiRecommendedLevel
                         */
                        PlayerDanmakuAiRecommendedLevel.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel();
                            if (object.value != null)
                                message.value = Boolean(object.value);
                            return message;
                        };

                        /**
                         * Creates a plain object from a PlayerDanmakuAiRecommendedLevel message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel
                         * @static
                         * @param {bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel} message PlayerDanmakuAiRecommendedLevel
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PlayerDanmakuAiRecommendedLevel.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults)
                                object.value = false;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = message.value;
                            return object;
                        };

                        /**
                         * Converts this PlayerDanmakuAiRecommendedLevel to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PlayerDanmakuAiRecommendedLevel.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for PlayerDanmakuAiRecommendedLevel
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        PlayerDanmakuAiRecommendedLevel.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevel";
                        };

                        return PlayerDanmakuAiRecommendedLevel;
                    })();

                    v1.PlayerDanmakuAiRecommendedLevelV2 = (function() {

                        /**
                         * Properties of a PlayerDanmakuAiRecommendedLevelV2.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IPlayerDanmakuAiRecommendedLevelV2
                         * @property {number|null} [value] PlayerDanmakuAiRecommendedLevelV2 value
                         */

                        /**
                         * Constructs a new PlayerDanmakuAiRecommendedLevelV2.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a PlayerDanmakuAiRecommendedLevelV2.
                         * @implements IPlayerDanmakuAiRecommendedLevelV2
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuAiRecommendedLevelV2=} [properties] Properties to set
                         */
                        function PlayerDanmakuAiRecommendedLevelV2(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * PlayerDanmakuAiRecommendedLevelV2 value.
                         * @member {number} value
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevelV2
                         * @instance
                         */
                        PlayerDanmakuAiRecommendedLevelV2.prototype.value = 0;

                        /**
                         * Creates a new PlayerDanmakuAiRecommendedLevelV2 instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevelV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuAiRecommendedLevelV2=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevelV2} PlayerDanmakuAiRecommendedLevelV2 instance
                         */
                        PlayerDanmakuAiRecommendedLevelV2.create = function create(properties) {
                            return new PlayerDanmakuAiRecommendedLevelV2(properties);
                        };

                        /**
                         * Encodes the specified PlayerDanmakuAiRecommendedLevelV2 message. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevelV2.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevelV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuAiRecommendedLevelV2} message PlayerDanmakuAiRecommendedLevelV2 message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuAiRecommendedLevelV2.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
                            return writer;
                        };

                        /**
                         * Encodes the specified PlayerDanmakuAiRecommendedLevelV2 message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevelV2.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevelV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuAiRecommendedLevelV2} message PlayerDanmakuAiRecommendedLevelV2 message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuAiRecommendedLevelV2.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a PlayerDanmakuAiRecommendedLevelV2 message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevelV2
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevelV2} PlayerDanmakuAiRecommendedLevelV2
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuAiRecommendedLevelV2.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevelV2();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.value = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a PlayerDanmakuAiRecommendedLevelV2 message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevelV2
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevelV2} PlayerDanmakuAiRecommendedLevelV2
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuAiRecommendedLevelV2.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a PlayerDanmakuAiRecommendedLevelV2 message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevelV2
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PlayerDanmakuAiRecommendedLevelV2.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (!$util.isInteger(message.value))
                                    return "value: integer expected";
                            return null;
                        };

                        /**
                         * Creates a PlayerDanmakuAiRecommendedLevelV2 message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevelV2
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevelV2} PlayerDanmakuAiRecommendedLevelV2
                         */
                        PlayerDanmakuAiRecommendedLevelV2.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevelV2)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevelV2();
                            if (object.value != null)
                                message.value = object.value | 0;
                            return message;
                        };

                        /**
                         * Creates a plain object from a PlayerDanmakuAiRecommendedLevelV2 message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevelV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevelV2} message PlayerDanmakuAiRecommendedLevelV2
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PlayerDanmakuAiRecommendedLevelV2.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults)
                                object.value = 0;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = message.value;
                            return object;
                        };

                        /**
                         * Converts this PlayerDanmakuAiRecommendedLevelV2 to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevelV2
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PlayerDanmakuAiRecommendedLevelV2.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for PlayerDanmakuAiRecommendedLevelV2
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevelV2
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        PlayerDanmakuAiRecommendedLevelV2.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedLevelV2";
                        };

                        return PlayerDanmakuAiRecommendedLevelV2;
                    })();

                    v1.PlayerDanmakuAiRecommendedSwitch = (function() {

                        /**
                         * Properties of a PlayerDanmakuAiRecommendedSwitch.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IPlayerDanmakuAiRecommendedSwitch
                         * @property {boolean|null} [value] PlayerDanmakuAiRecommendedSwitch value
                         */

                        /**
                         * Constructs a new PlayerDanmakuAiRecommendedSwitch.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a PlayerDanmakuAiRecommendedSwitch.
                         * @implements IPlayerDanmakuAiRecommendedSwitch
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuAiRecommendedSwitch=} [properties] Properties to set
                         */
                        function PlayerDanmakuAiRecommendedSwitch(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * PlayerDanmakuAiRecommendedSwitch value.
                         * @member {boolean} value
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch
                         * @instance
                         */
                        PlayerDanmakuAiRecommendedSwitch.prototype.value = false;

                        /**
                         * Creates a new PlayerDanmakuAiRecommendedSwitch instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuAiRecommendedSwitch=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch} PlayerDanmakuAiRecommendedSwitch instance
                         */
                        PlayerDanmakuAiRecommendedSwitch.create = function create(properties) {
                            return new PlayerDanmakuAiRecommendedSwitch(properties);
                        };

                        /**
                         * Encodes the specified PlayerDanmakuAiRecommendedSwitch message. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuAiRecommendedSwitch} message PlayerDanmakuAiRecommendedSwitch message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuAiRecommendedSwitch.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.value);
                            return writer;
                        };

                        /**
                         * Encodes the specified PlayerDanmakuAiRecommendedSwitch message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuAiRecommendedSwitch} message PlayerDanmakuAiRecommendedSwitch message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuAiRecommendedSwitch.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a PlayerDanmakuAiRecommendedSwitch message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch} PlayerDanmakuAiRecommendedSwitch
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuAiRecommendedSwitch.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.value = reader.bool();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a PlayerDanmakuAiRecommendedSwitch message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch} PlayerDanmakuAiRecommendedSwitch
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuAiRecommendedSwitch.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a PlayerDanmakuAiRecommendedSwitch message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PlayerDanmakuAiRecommendedSwitch.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (typeof message.value !== "boolean")
                                    return "value: boolean expected";
                            return null;
                        };

                        /**
                         * Creates a PlayerDanmakuAiRecommendedSwitch message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch} PlayerDanmakuAiRecommendedSwitch
                         */
                        PlayerDanmakuAiRecommendedSwitch.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch();
                            if (object.value != null)
                                message.value = Boolean(object.value);
                            return message;
                        };

                        /**
                         * Creates a plain object from a PlayerDanmakuAiRecommendedSwitch message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch
                         * @static
                         * @param {bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch} message PlayerDanmakuAiRecommendedSwitch
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PlayerDanmakuAiRecommendedSwitch.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults)
                                object.value = false;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = message.value;
                            return object;
                        };

                        /**
                         * Converts this PlayerDanmakuAiRecommendedSwitch to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PlayerDanmakuAiRecommendedSwitch.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for PlayerDanmakuAiRecommendedSwitch
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        PlayerDanmakuAiRecommendedSwitch.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.PlayerDanmakuAiRecommendedSwitch";
                        };

                        return PlayerDanmakuAiRecommendedSwitch;
                    })();

                    v1.PlayerDanmakuBlockbottom = (function() {

                        /**
                         * Properties of a PlayerDanmakuBlockbottom.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IPlayerDanmakuBlockbottom
                         * @property {boolean|null} [value] PlayerDanmakuBlockbottom value
                         */

                        /**
                         * Constructs a new PlayerDanmakuBlockbottom.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a PlayerDanmakuBlockbottom.
                         * @implements IPlayerDanmakuBlockbottom
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuBlockbottom=} [properties] Properties to set
                         */
                        function PlayerDanmakuBlockbottom(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * PlayerDanmakuBlockbottom value.
                         * @member {boolean} value
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom
                         * @instance
                         */
                        PlayerDanmakuBlockbottom.prototype.value = false;

                        /**
                         * Creates a new PlayerDanmakuBlockbottom instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuBlockbottom=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom} PlayerDanmakuBlockbottom instance
                         */
                        PlayerDanmakuBlockbottom.create = function create(properties) {
                            return new PlayerDanmakuBlockbottom(properties);
                        };

                        /**
                         * Encodes the specified PlayerDanmakuBlockbottom message. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuBlockbottom} message PlayerDanmakuBlockbottom message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuBlockbottom.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.value);
                            return writer;
                        };

                        /**
                         * Encodes the specified PlayerDanmakuBlockbottom message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuBlockbottom} message PlayerDanmakuBlockbottom message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuBlockbottom.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a PlayerDanmakuBlockbottom message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom} PlayerDanmakuBlockbottom
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuBlockbottom.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.value = reader.bool();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a PlayerDanmakuBlockbottom message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom} PlayerDanmakuBlockbottom
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuBlockbottom.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a PlayerDanmakuBlockbottom message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PlayerDanmakuBlockbottom.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (typeof message.value !== "boolean")
                                    return "value: boolean expected";
                            return null;
                        };

                        /**
                         * Creates a PlayerDanmakuBlockbottom message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom} PlayerDanmakuBlockbottom
                         */
                        PlayerDanmakuBlockbottom.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom();
                            if (object.value != null)
                                message.value = Boolean(object.value);
                            return message;
                        };

                        /**
                         * Creates a plain object from a PlayerDanmakuBlockbottom message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom
                         * @static
                         * @param {bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom} message PlayerDanmakuBlockbottom
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PlayerDanmakuBlockbottom.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults)
                                object.value = false;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = message.value;
                            return object;
                        };

                        /**
                         * Converts this PlayerDanmakuBlockbottom to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PlayerDanmakuBlockbottom.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for PlayerDanmakuBlockbottom
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        PlayerDanmakuBlockbottom.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.PlayerDanmakuBlockbottom";
                        };

                        return PlayerDanmakuBlockbottom;
                    })();

                    v1.PlayerDanmakuBlockcolorful = (function() {

                        /**
                         * Properties of a PlayerDanmakuBlockcolorful.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IPlayerDanmakuBlockcolorful
                         * @property {boolean|null} [value] PlayerDanmakuBlockcolorful value
                         */

                        /**
                         * Constructs a new PlayerDanmakuBlockcolorful.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a PlayerDanmakuBlockcolorful.
                         * @implements IPlayerDanmakuBlockcolorful
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuBlockcolorful=} [properties] Properties to set
                         */
                        function PlayerDanmakuBlockcolorful(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * PlayerDanmakuBlockcolorful value.
                         * @member {boolean} value
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful
                         * @instance
                         */
                        PlayerDanmakuBlockcolorful.prototype.value = false;

                        /**
                         * Creates a new PlayerDanmakuBlockcolorful instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuBlockcolorful=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful} PlayerDanmakuBlockcolorful instance
                         */
                        PlayerDanmakuBlockcolorful.create = function create(properties) {
                            return new PlayerDanmakuBlockcolorful(properties);
                        };

                        /**
                         * Encodes the specified PlayerDanmakuBlockcolorful message. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuBlockcolorful} message PlayerDanmakuBlockcolorful message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuBlockcolorful.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.value);
                            return writer;
                        };

                        /**
                         * Encodes the specified PlayerDanmakuBlockcolorful message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuBlockcolorful} message PlayerDanmakuBlockcolorful message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuBlockcolorful.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a PlayerDanmakuBlockcolorful message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful} PlayerDanmakuBlockcolorful
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuBlockcolorful.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.value = reader.bool();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a PlayerDanmakuBlockcolorful message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful} PlayerDanmakuBlockcolorful
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuBlockcolorful.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a PlayerDanmakuBlockcolorful message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PlayerDanmakuBlockcolorful.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (typeof message.value !== "boolean")
                                    return "value: boolean expected";
                            return null;
                        };

                        /**
                         * Creates a PlayerDanmakuBlockcolorful message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful} PlayerDanmakuBlockcolorful
                         */
                        PlayerDanmakuBlockcolorful.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful();
                            if (object.value != null)
                                message.value = Boolean(object.value);
                            return message;
                        };

                        /**
                         * Creates a plain object from a PlayerDanmakuBlockcolorful message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful
                         * @static
                         * @param {bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful} message PlayerDanmakuBlockcolorful
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PlayerDanmakuBlockcolorful.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults)
                                object.value = false;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = message.value;
                            return object;
                        };

                        /**
                         * Converts this PlayerDanmakuBlockcolorful to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PlayerDanmakuBlockcolorful.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for PlayerDanmakuBlockcolorful
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        PlayerDanmakuBlockcolorful.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.PlayerDanmakuBlockcolorful";
                        };

                        return PlayerDanmakuBlockcolorful;
                    })();

                    v1.PlayerDanmakuBlockrepeat = (function() {

                        /**
                         * Properties of a PlayerDanmakuBlockrepeat.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IPlayerDanmakuBlockrepeat
                         * @property {boolean|null} [value] PlayerDanmakuBlockrepeat value
                         */

                        /**
                         * Constructs a new PlayerDanmakuBlockrepeat.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a PlayerDanmakuBlockrepeat.
                         * @implements IPlayerDanmakuBlockrepeat
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuBlockrepeat=} [properties] Properties to set
                         */
                        function PlayerDanmakuBlockrepeat(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * PlayerDanmakuBlockrepeat value.
                         * @member {boolean} value
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat
                         * @instance
                         */
                        PlayerDanmakuBlockrepeat.prototype.value = false;

                        /**
                         * Creates a new PlayerDanmakuBlockrepeat instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuBlockrepeat=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat} PlayerDanmakuBlockrepeat instance
                         */
                        PlayerDanmakuBlockrepeat.create = function create(properties) {
                            return new PlayerDanmakuBlockrepeat(properties);
                        };

                        /**
                         * Encodes the specified PlayerDanmakuBlockrepeat message. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuBlockrepeat} message PlayerDanmakuBlockrepeat message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuBlockrepeat.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.value);
                            return writer;
                        };

                        /**
                         * Encodes the specified PlayerDanmakuBlockrepeat message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuBlockrepeat} message PlayerDanmakuBlockrepeat message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuBlockrepeat.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a PlayerDanmakuBlockrepeat message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat} PlayerDanmakuBlockrepeat
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuBlockrepeat.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.value = reader.bool();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a PlayerDanmakuBlockrepeat message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat} PlayerDanmakuBlockrepeat
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuBlockrepeat.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a PlayerDanmakuBlockrepeat message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PlayerDanmakuBlockrepeat.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (typeof message.value !== "boolean")
                                    return "value: boolean expected";
                            return null;
                        };

                        /**
                         * Creates a PlayerDanmakuBlockrepeat message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat} PlayerDanmakuBlockrepeat
                         */
                        PlayerDanmakuBlockrepeat.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat();
                            if (object.value != null)
                                message.value = Boolean(object.value);
                            return message;
                        };

                        /**
                         * Creates a plain object from a PlayerDanmakuBlockrepeat message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat
                         * @static
                         * @param {bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat} message PlayerDanmakuBlockrepeat
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PlayerDanmakuBlockrepeat.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults)
                                object.value = false;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = message.value;
                            return object;
                        };

                        /**
                         * Converts this PlayerDanmakuBlockrepeat to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PlayerDanmakuBlockrepeat.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for PlayerDanmakuBlockrepeat
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        PlayerDanmakuBlockrepeat.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.PlayerDanmakuBlockrepeat";
                        };

                        return PlayerDanmakuBlockrepeat;
                    })();

                    v1.PlayerDanmakuBlockscroll = (function() {

                        /**
                         * Properties of a PlayerDanmakuBlockscroll.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IPlayerDanmakuBlockscroll
                         * @property {boolean|null} [value] PlayerDanmakuBlockscroll value
                         */

                        /**
                         * Constructs a new PlayerDanmakuBlockscroll.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a PlayerDanmakuBlockscroll.
                         * @implements IPlayerDanmakuBlockscroll
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuBlockscroll=} [properties] Properties to set
                         */
                        function PlayerDanmakuBlockscroll(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * PlayerDanmakuBlockscroll value.
                         * @member {boolean} value
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll
                         * @instance
                         */
                        PlayerDanmakuBlockscroll.prototype.value = false;

                        /**
                         * Creates a new PlayerDanmakuBlockscroll instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuBlockscroll=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll} PlayerDanmakuBlockscroll instance
                         */
                        PlayerDanmakuBlockscroll.create = function create(properties) {
                            return new PlayerDanmakuBlockscroll(properties);
                        };

                        /**
                         * Encodes the specified PlayerDanmakuBlockscroll message. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuBlockscroll} message PlayerDanmakuBlockscroll message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuBlockscroll.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.value);
                            return writer;
                        };

                        /**
                         * Encodes the specified PlayerDanmakuBlockscroll message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuBlockscroll} message PlayerDanmakuBlockscroll message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuBlockscroll.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a PlayerDanmakuBlockscroll message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll} PlayerDanmakuBlockscroll
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuBlockscroll.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.value = reader.bool();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a PlayerDanmakuBlockscroll message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll} PlayerDanmakuBlockscroll
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuBlockscroll.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a PlayerDanmakuBlockscroll message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PlayerDanmakuBlockscroll.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (typeof message.value !== "boolean")
                                    return "value: boolean expected";
                            return null;
                        };

                        /**
                         * Creates a PlayerDanmakuBlockscroll message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll} PlayerDanmakuBlockscroll
                         */
                        PlayerDanmakuBlockscroll.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll();
                            if (object.value != null)
                                message.value = Boolean(object.value);
                            return message;
                        };

                        /**
                         * Creates a plain object from a PlayerDanmakuBlockscroll message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll
                         * @static
                         * @param {bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll} message PlayerDanmakuBlockscroll
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PlayerDanmakuBlockscroll.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults)
                                object.value = false;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = message.value;
                            return object;
                        };

                        /**
                         * Converts this PlayerDanmakuBlockscroll to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PlayerDanmakuBlockscroll.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for PlayerDanmakuBlockscroll
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        PlayerDanmakuBlockscroll.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.PlayerDanmakuBlockscroll";
                        };

                        return PlayerDanmakuBlockscroll;
                    })();

                    v1.PlayerDanmakuBlockspecial = (function() {

                        /**
                         * Properties of a PlayerDanmakuBlockspecial.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IPlayerDanmakuBlockspecial
                         * @property {boolean|null} [value] PlayerDanmakuBlockspecial value
                         */

                        /**
                         * Constructs a new PlayerDanmakuBlockspecial.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a PlayerDanmakuBlockspecial.
                         * @implements IPlayerDanmakuBlockspecial
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuBlockspecial=} [properties] Properties to set
                         */
                        function PlayerDanmakuBlockspecial(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * PlayerDanmakuBlockspecial value.
                         * @member {boolean} value
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial
                         * @instance
                         */
                        PlayerDanmakuBlockspecial.prototype.value = false;

                        /**
                         * Creates a new PlayerDanmakuBlockspecial instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuBlockspecial=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial} PlayerDanmakuBlockspecial instance
                         */
                        PlayerDanmakuBlockspecial.create = function create(properties) {
                            return new PlayerDanmakuBlockspecial(properties);
                        };

                        /**
                         * Encodes the specified PlayerDanmakuBlockspecial message. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuBlockspecial} message PlayerDanmakuBlockspecial message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuBlockspecial.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.value);
                            return writer;
                        };

                        /**
                         * Encodes the specified PlayerDanmakuBlockspecial message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuBlockspecial} message PlayerDanmakuBlockspecial message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuBlockspecial.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a PlayerDanmakuBlockspecial message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial} PlayerDanmakuBlockspecial
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuBlockspecial.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.value = reader.bool();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a PlayerDanmakuBlockspecial message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial} PlayerDanmakuBlockspecial
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuBlockspecial.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a PlayerDanmakuBlockspecial message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PlayerDanmakuBlockspecial.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (typeof message.value !== "boolean")
                                    return "value: boolean expected";
                            return null;
                        };

                        /**
                         * Creates a PlayerDanmakuBlockspecial message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial} PlayerDanmakuBlockspecial
                         */
                        PlayerDanmakuBlockspecial.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial();
                            if (object.value != null)
                                message.value = Boolean(object.value);
                            return message;
                        };

                        /**
                         * Creates a plain object from a PlayerDanmakuBlockspecial message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial
                         * @static
                         * @param {bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial} message PlayerDanmakuBlockspecial
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PlayerDanmakuBlockspecial.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults)
                                object.value = false;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = message.value;
                            return object;
                        };

                        /**
                         * Converts this PlayerDanmakuBlockspecial to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PlayerDanmakuBlockspecial.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for PlayerDanmakuBlockspecial
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        PlayerDanmakuBlockspecial.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.PlayerDanmakuBlockspecial";
                        };

                        return PlayerDanmakuBlockspecial;
                    })();

                    v1.PlayerDanmakuBlocktop = (function() {

                        /**
                         * Properties of a PlayerDanmakuBlocktop.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IPlayerDanmakuBlocktop
                         * @property {boolean|null} [value] PlayerDanmakuBlocktop value
                         */

                        /**
                         * Constructs a new PlayerDanmakuBlocktop.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a PlayerDanmakuBlocktop.
                         * @implements IPlayerDanmakuBlocktop
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuBlocktop=} [properties] Properties to set
                         */
                        function PlayerDanmakuBlocktop(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * PlayerDanmakuBlocktop value.
                         * @member {boolean} value
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlocktop
                         * @instance
                         */
                        PlayerDanmakuBlocktop.prototype.value = false;

                        /**
                         * Creates a new PlayerDanmakuBlocktop instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlocktop
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuBlocktop=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuBlocktop} PlayerDanmakuBlocktop instance
                         */
                        PlayerDanmakuBlocktop.create = function create(properties) {
                            return new PlayerDanmakuBlocktop(properties);
                        };

                        /**
                         * Encodes the specified PlayerDanmakuBlocktop message. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuBlocktop.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlocktop
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuBlocktop} message PlayerDanmakuBlocktop message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuBlocktop.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.value);
                            return writer;
                        };

                        /**
                         * Encodes the specified PlayerDanmakuBlocktop message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuBlocktop.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlocktop
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuBlocktop} message PlayerDanmakuBlocktop message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuBlocktop.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a PlayerDanmakuBlocktop message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlocktop
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuBlocktop} PlayerDanmakuBlocktop
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuBlocktop.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuBlocktop();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.value = reader.bool();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a PlayerDanmakuBlocktop message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlocktop
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuBlocktop} PlayerDanmakuBlocktop
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuBlocktop.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a PlayerDanmakuBlocktop message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlocktop
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PlayerDanmakuBlocktop.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (typeof message.value !== "boolean")
                                    return "value: boolean expected";
                            return null;
                        };

                        /**
                         * Creates a PlayerDanmakuBlocktop message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlocktop
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuBlocktop} PlayerDanmakuBlocktop
                         */
                        PlayerDanmakuBlocktop.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.PlayerDanmakuBlocktop)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuBlocktop();
                            if (object.value != null)
                                message.value = Boolean(object.value);
                            return message;
                        };

                        /**
                         * Creates a plain object from a PlayerDanmakuBlocktop message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlocktop
                         * @static
                         * @param {bilibili.community.service.dm.v1.PlayerDanmakuBlocktop} message PlayerDanmakuBlocktop
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PlayerDanmakuBlocktop.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults)
                                object.value = false;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = message.value;
                            return object;
                        };

                        /**
                         * Converts this PlayerDanmakuBlocktop to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlocktop
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PlayerDanmakuBlocktop.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for PlayerDanmakuBlocktop
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuBlocktop
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        PlayerDanmakuBlocktop.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.PlayerDanmakuBlocktop";
                        };

                        return PlayerDanmakuBlocktop;
                    })();

                    v1.PlayerDanmakuDomain = (function() {

                        /**
                         * Properties of a PlayerDanmakuDomain.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IPlayerDanmakuDomain
                         * @property {number|null} [value] PlayerDanmakuDomain value
                         */

                        /**
                         * Constructs a new PlayerDanmakuDomain.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a PlayerDanmakuDomain.
                         * @implements IPlayerDanmakuDomain
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuDomain=} [properties] Properties to set
                         */
                        function PlayerDanmakuDomain(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * PlayerDanmakuDomain value.
                         * @member {number} value
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuDomain
                         * @instance
                         */
                        PlayerDanmakuDomain.prototype.value = 0;

                        /**
                         * Creates a new PlayerDanmakuDomain instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuDomain
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuDomain=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuDomain} PlayerDanmakuDomain instance
                         */
                        PlayerDanmakuDomain.create = function create(properties) {
                            return new PlayerDanmakuDomain(properties);
                        };

                        /**
                         * Encodes the specified PlayerDanmakuDomain message. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuDomain.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuDomain
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuDomain} message PlayerDanmakuDomain message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuDomain.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                writer.uint32(/* id 1, wireType 5 =*/13).float(message.value);
                            return writer;
                        };

                        /**
                         * Encodes the specified PlayerDanmakuDomain message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuDomain.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuDomain
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuDomain} message PlayerDanmakuDomain message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuDomain.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a PlayerDanmakuDomain message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuDomain
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuDomain} PlayerDanmakuDomain
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuDomain.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuDomain();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.value = reader.float();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a PlayerDanmakuDomain message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuDomain
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuDomain} PlayerDanmakuDomain
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuDomain.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a PlayerDanmakuDomain message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuDomain
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PlayerDanmakuDomain.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (typeof message.value !== "number")
                                    return "value: number expected";
                            return null;
                        };

                        /**
                         * Creates a PlayerDanmakuDomain message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuDomain
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuDomain} PlayerDanmakuDomain
                         */
                        PlayerDanmakuDomain.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.PlayerDanmakuDomain)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuDomain();
                            if (object.value != null)
                                message.value = Number(object.value);
                            return message;
                        };

                        /**
                         * Creates a plain object from a PlayerDanmakuDomain message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuDomain
                         * @static
                         * @param {bilibili.community.service.dm.v1.PlayerDanmakuDomain} message PlayerDanmakuDomain
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PlayerDanmakuDomain.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults)
                                object.value = 0;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;
                            return object;
                        };

                        /**
                         * Converts this PlayerDanmakuDomain to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuDomain
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PlayerDanmakuDomain.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for PlayerDanmakuDomain
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuDomain
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        PlayerDanmakuDomain.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.PlayerDanmakuDomain";
                        };

                        return PlayerDanmakuDomain;
                    })();

                    v1.PlayerDanmakuEnableblocklist = (function() {

                        /**
                         * Properties of a PlayerDanmakuEnableblocklist.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IPlayerDanmakuEnableblocklist
                         * @property {boolean|null} [value] PlayerDanmakuEnableblocklist value
                         */

                        /**
                         * Constructs a new PlayerDanmakuEnableblocklist.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a PlayerDanmakuEnableblocklist.
                         * @implements IPlayerDanmakuEnableblocklist
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuEnableblocklist=} [properties] Properties to set
                         */
                        function PlayerDanmakuEnableblocklist(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * PlayerDanmakuEnableblocklist value.
                         * @member {boolean} value
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist
                         * @instance
                         */
                        PlayerDanmakuEnableblocklist.prototype.value = false;

                        /**
                         * Creates a new PlayerDanmakuEnableblocklist instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuEnableblocklist=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist} PlayerDanmakuEnableblocklist instance
                         */
                        PlayerDanmakuEnableblocklist.create = function create(properties) {
                            return new PlayerDanmakuEnableblocklist(properties);
                        };

                        /**
                         * Encodes the specified PlayerDanmakuEnableblocklist message. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuEnableblocklist} message PlayerDanmakuEnableblocklist message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuEnableblocklist.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.value);
                            return writer;
                        };

                        /**
                         * Encodes the specified PlayerDanmakuEnableblocklist message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuEnableblocklist} message PlayerDanmakuEnableblocklist message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuEnableblocklist.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a PlayerDanmakuEnableblocklist message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist} PlayerDanmakuEnableblocklist
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuEnableblocklist.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.value = reader.bool();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a PlayerDanmakuEnableblocklist message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist} PlayerDanmakuEnableblocklist
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuEnableblocklist.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a PlayerDanmakuEnableblocklist message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PlayerDanmakuEnableblocklist.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (typeof message.value !== "boolean")
                                    return "value: boolean expected";
                            return null;
                        };

                        /**
                         * Creates a PlayerDanmakuEnableblocklist message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist} PlayerDanmakuEnableblocklist
                         */
                        PlayerDanmakuEnableblocklist.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist();
                            if (object.value != null)
                                message.value = Boolean(object.value);
                            return message;
                        };

                        /**
                         * Creates a plain object from a PlayerDanmakuEnableblocklist message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist
                         * @static
                         * @param {bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist} message PlayerDanmakuEnableblocklist
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PlayerDanmakuEnableblocklist.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults)
                                object.value = false;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = message.value;
                            return object;
                        };

                        /**
                         * Converts this PlayerDanmakuEnableblocklist to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PlayerDanmakuEnableblocklist.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for PlayerDanmakuEnableblocklist
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        PlayerDanmakuEnableblocklist.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.PlayerDanmakuEnableblocklist";
                        };

                        return PlayerDanmakuEnableblocklist;
                    })();

                    v1.PlayerDanmakuOpacity = (function() {

                        /**
                         * Properties of a PlayerDanmakuOpacity.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IPlayerDanmakuOpacity
                         * @property {number|null} [value] PlayerDanmakuOpacity value
                         */

                        /**
                         * Constructs a new PlayerDanmakuOpacity.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a PlayerDanmakuOpacity.
                         * @implements IPlayerDanmakuOpacity
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuOpacity=} [properties] Properties to set
                         */
                        function PlayerDanmakuOpacity(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * PlayerDanmakuOpacity value.
                         * @member {number} value
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuOpacity
                         * @instance
                         */
                        PlayerDanmakuOpacity.prototype.value = 0;

                        /**
                         * Creates a new PlayerDanmakuOpacity instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuOpacity
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuOpacity=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuOpacity} PlayerDanmakuOpacity instance
                         */
                        PlayerDanmakuOpacity.create = function create(properties) {
                            return new PlayerDanmakuOpacity(properties);
                        };

                        /**
                         * Encodes the specified PlayerDanmakuOpacity message. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuOpacity.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuOpacity
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuOpacity} message PlayerDanmakuOpacity message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuOpacity.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                writer.uint32(/* id 1, wireType 5 =*/13).float(message.value);
                            return writer;
                        };

                        /**
                         * Encodes the specified PlayerDanmakuOpacity message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuOpacity.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuOpacity
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuOpacity} message PlayerDanmakuOpacity message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuOpacity.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a PlayerDanmakuOpacity message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuOpacity
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuOpacity} PlayerDanmakuOpacity
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuOpacity.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuOpacity();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.value = reader.float();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a PlayerDanmakuOpacity message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuOpacity
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuOpacity} PlayerDanmakuOpacity
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuOpacity.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a PlayerDanmakuOpacity message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuOpacity
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PlayerDanmakuOpacity.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (typeof message.value !== "number")
                                    return "value: number expected";
                            return null;
                        };

                        /**
                         * Creates a PlayerDanmakuOpacity message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuOpacity
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuOpacity} PlayerDanmakuOpacity
                         */
                        PlayerDanmakuOpacity.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.PlayerDanmakuOpacity)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuOpacity();
                            if (object.value != null)
                                message.value = Number(object.value);
                            return message;
                        };

                        /**
                         * Creates a plain object from a PlayerDanmakuOpacity message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuOpacity
                         * @static
                         * @param {bilibili.community.service.dm.v1.PlayerDanmakuOpacity} message PlayerDanmakuOpacity
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PlayerDanmakuOpacity.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults)
                                object.value = 0;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;
                            return object;
                        };

                        /**
                         * Converts this PlayerDanmakuOpacity to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuOpacity
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PlayerDanmakuOpacity.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for PlayerDanmakuOpacity
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuOpacity
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        PlayerDanmakuOpacity.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.PlayerDanmakuOpacity";
                        };

                        return PlayerDanmakuOpacity;
                    })();

                    v1.PlayerDanmakuScalingfactor = (function() {

                        /**
                         * Properties of a PlayerDanmakuScalingfactor.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IPlayerDanmakuScalingfactor
                         * @property {number|null} [value] PlayerDanmakuScalingfactor value
                         */

                        /**
                         * Constructs a new PlayerDanmakuScalingfactor.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a PlayerDanmakuScalingfactor.
                         * @implements IPlayerDanmakuScalingfactor
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuScalingfactor=} [properties] Properties to set
                         */
                        function PlayerDanmakuScalingfactor(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * PlayerDanmakuScalingfactor value.
                         * @member {number} value
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor
                         * @instance
                         */
                        PlayerDanmakuScalingfactor.prototype.value = 0;

                        /**
                         * Creates a new PlayerDanmakuScalingfactor instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuScalingfactor=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor} PlayerDanmakuScalingfactor instance
                         */
                        PlayerDanmakuScalingfactor.create = function create(properties) {
                            return new PlayerDanmakuScalingfactor(properties);
                        };

                        /**
                         * Encodes the specified PlayerDanmakuScalingfactor message. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuScalingfactor} message PlayerDanmakuScalingfactor message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuScalingfactor.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                writer.uint32(/* id 1, wireType 5 =*/13).float(message.value);
                            return writer;
                        };

                        /**
                         * Encodes the specified PlayerDanmakuScalingfactor message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuScalingfactor} message PlayerDanmakuScalingfactor message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuScalingfactor.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a PlayerDanmakuScalingfactor message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor} PlayerDanmakuScalingfactor
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuScalingfactor.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.value = reader.float();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a PlayerDanmakuScalingfactor message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor} PlayerDanmakuScalingfactor
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuScalingfactor.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a PlayerDanmakuScalingfactor message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PlayerDanmakuScalingfactor.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (typeof message.value !== "number")
                                    return "value: number expected";
                            return null;
                        };

                        /**
                         * Creates a PlayerDanmakuScalingfactor message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor} PlayerDanmakuScalingfactor
                         */
                        PlayerDanmakuScalingfactor.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor();
                            if (object.value != null)
                                message.value = Number(object.value);
                            return message;
                        };

                        /**
                         * Creates a plain object from a PlayerDanmakuScalingfactor message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor
                         * @static
                         * @param {bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor} message PlayerDanmakuScalingfactor
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PlayerDanmakuScalingfactor.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults)
                                object.value = 0;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;
                            return object;
                        };

                        /**
                         * Converts this PlayerDanmakuScalingfactor to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PlayerDanmakuScalingfactor.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for PlayerDanmakuScalingfactor
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        PlayerDanmakuScalingfactor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.PlayerDanmakuScalingfactor";
                        };

                        return PlayerDanmakuScalingfactor;
                    })();

                    v1.PlayerDanmakuSeniorModeSwitch = (function() {

                        /**
                         * Properties of a PlayerDanmakuSeniorModeSwitch.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IPlayerDanmakuSeniorModeSwitch
                         * @property {number|null} [value] PlayerDanmakuSeniorModeSwitch value
                         */

                        /**
                         * Constructs a new PlayerDanmakuSeniorModeSwitch.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a PlayerDanmakuSeniorModeSwitch.
                         * @implements IPlayerDanmakuSeniorModeSwitch
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuSeniorModeSwitch=} [properties] Properties to set
                         */
                        function PlayerDanmakuSeniorModeSwitch(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * PlayerDanmakuSeniorModeSwitch value.
                         * @member {number} value
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSeniorModeSwitch
                         * @instance
                         */
                        PlayerDanmakuSeniorModeSwitch.prototype.value = 0;

                        /**
                         * Creates a new PlayerDanmakuSeniorModeSwitch instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSeniorModeSwitch
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuSeniorModeSwitch=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuSeniorModeSwitch} PlayerDanmakuSeniorModeSwitch instance
                         */
                        PlayerDanmakuSeniorModeSwitch.create = function create(properties) {
                            return new PlayerDanmakuSeniorModeSwitch(properties);
                        };

                        /**
                         * Encodes the specified PlayerDanmakuSeniorModeSwitch message. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuSeniorModeSwitch.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSeniorModeSwitch
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuSeniorModeSwitch} message PlayerDanmakuSeniorModeSwitch message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuSeniorModeSwitch.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
                            return writer;
                        };

                        /**
                         * Encodes the specified PlayerDanmakuSeniorModeSwitch message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuSeniorModeSwitch.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSeniorModeSwitch
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuSeniorModeSwitch} message PlayerDanmakuSeniorModeSwitch message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuSeniorModeSwitch.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a PlayerDanmakuSeniorModeSwitch message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSeniorModeSwitch
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuSeniorModeSwitch} PlayerDanmakuSeniorModeSwitch
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuSeniorModeSwitch.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuSeniorModeSwitch();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.value = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a PlayerDanmakuSeniorModeSwitch message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSeniorModeSwitch
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuSeniorModeSwitch} PlayerDanmakuSeniorModeSwitch
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuSeniorModeSwitch.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a PlayerDanmakuSeniorModeSwitch message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSeniorModeSwitch
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PlayerDanmakuSeniorModeSwitch.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (!$util.isInteger(message.value))
                                    return "value: integer expected";
                            return null;
                        };

                        /**
                         * Creates a PlayerDanmakuSeniorModeSwitch message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSeniorModeSwitch
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuSeniorModeSwitch} PlayerDanmakuSeniorModeSwitch
                         */
                        PlayerDanmakuSeniorModeSwitch.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.PlayerDanmakuSeniorModeSwitch)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuSeniorModeSwitch();
                            if (object.value != null)
                                message.value = object.value | 0;
                            return message;
                        };

                        /**
                         * Creates a plain object from a PlayerDanmakuSeniorModeSwitch message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSeniorModeSwitch
                         * @static
                         * @param {bilibili.community.service.dm.v1.PlayerDanmakuSeniorModeSwitch} message PlayerDanmakuSeniorModeSwitch
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PlayerDanmakuSeniorModeSwitch.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults)
                                object.value = 0;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = message.value;
                            return object;
                        };

                        /**
                         * Converts this PlayerDanmakuSeniorModeSwitch to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSeniorModeSwitch
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PlayerDanmakuSeniorModeSwitch.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for PlayerDanmakuSeniorModeSwitch
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSeniorModeSwitch
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        PlayerDanmakuSeniorModeSwitch.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.PlayerDanmakuSeniorModeSwitch";
                        };

                        return PlayerDanmakuSeniorModeSwitch;
                    })();

                    v1.PlayerDanmakuSpeed = (function() {

                        /**
                         * Properties of a PlayerDanmakuSpeed.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IPlayerDanmakuSpeed
                         * @property {number|null} [value] PlayerDanmakuSpeed value
                         */

                        /**
                         * Constructs a new PlayerDanmakuSpeed.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a PlayerDanmakuSpeed.
                         * @implements IPlayerDanmakuSpeed
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuSpeed=} [properties] Properties to set
                         */
                        function PlayerDanmakuSpeed(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * PlayerDanmakuSpeed value.
                         * @member {number} value
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSpeed
                         * @instance
                         */
                        PlayerDanmakuSpeed.prototype.value = 0;

                        /**
                         * Creates a new PlayerDanmakuSpeed instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSpeed
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuSpeed=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuSpeed} PlayerDanmakuSpeed instance
                         */
                        PlayerDanmakuSpeed.create = function create(properties) {
                            return new PlayerDanmakuSpeed(properties);
                        };

                        /**
                         * Encodes the specified PlayerDanmakuSpeed message. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuSpeed.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSpeed
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuSpeed} message PlayerDanmakuSpeed message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuSpeed.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
                            return writer;
                        };

                        /**
                         * Encodes the specified PlayerDanmakuSpeed message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuSpeed.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSpeed
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuSpeed} message PlayerDanmakuSpeed message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuSpeed.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a PlayerDanmakuSpeed message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSpeed
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuSpeed} PlayerDanmakuSpeed
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuSpeed.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuSpeed();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.value = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a PlayerDanmakuSpeed message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSpeed
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuSpeed} PlayerDanmakuSpeed
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuSpeed.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a PlayerDanmakuSpeed message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSpeed
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PlayerDanmakuSpeed.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (!$util.isInteger(message.value))
                                    return "value: integer expected";
                            return null;
                        };

                        /**
                         * Creates a PlayerDanmakuSpeed message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSpeed
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuSpeed} PlayerDanmakuSpeed
                         */
                        PlayerDanmakuSpeed.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.PlayerDanmakuSpeed)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuSpeed();
                            if (object.value != null)
                                message.value = object.value | 0;
                            return message;
                        };

                        /**
                         * Creates a plain object from a PlayerDanmakuSpeed message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSpeed
                         * @static
                         * @param {bilibili.community.service.dm.v1.PlayerDanmakuSpeed} message PlayerDanmakuSpeed
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PlayerDanmakuSpeed.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults)
                                object.value = 0;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = message.value;
                            return object;
                        };

                        /**
                         * Converts this PlayerDanmakuSpeed to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSpeed
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PlayerDanmakuSpeed.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for PlayerDanmakuSpeed
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSpeed
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        PlayerDanmakuSpeed.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.PlayerDanmakuSpeed";
                        };

                        return PlayerDanmakuSpeed;
                    })();

                    v1.PlayerDanmakuSwitch = (function() {

                        /**
                         * Properties of a PlayerDanmakuSwitch.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IPlayerDanmakuSwitch
                         * @property {boolean|null} [value] PlayerDanmakuSwitch value
                         * @property {boolean|null} [canIgnore] PlayerDanmakuSwitch canIgnore
                         */

                        /**
                         * Constructs a new PlayerDanmakuSwitch.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a PlayerDanmakuSwitch.
                         * @implements IPlayerDanmakuSwitch
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuSwitch=} [properties] Properties to set
                         */
                        function PlayerDanmakuSwitch(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * PlayerDanmakuSwitch value.
                         * @member {boolean} value
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSwitch
                         * @instance
                         */
                        PlayerDanmakuSwitch.prototype.value = false;

                        /**
                         * PlayerDanmakuSwitch canIgnore.
                         * @member {boolean} canIgnore
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSwitch
                         * @instance
                         */
                        PlayerDanmakuSwitch.prototype.canIgnore = false;

                        /**
                         * Creates a new PlayerDanmakuSwitch instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSwitch
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuSwitch=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuSwitch} PlayerDanmakuSwitch instance
                         */
                        PlayerDanmakuSwitch.create = function create(properties) {
                            return new PlayerDanmakuSwitch(properties);
                        };

                        /**
                         * Encodes the specified PlayerDanmakuSwitch message. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuSwitch.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSwitch
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuSwitch} message PlayerDanmakuSwitch message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuSwitch.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.value);
                            if (message.canIgnore != null && Object.hasOwnProperty.call(message, "canIgnore"))
                                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.canIgnore);
                            return writer;
                        };

                        /**
                         * Encodes the specified PlayerDanmakuSwitch message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuSwitch.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSwitch
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuSwitch} message PlayerDanmakuSwitch message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuSwitch.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a PlayerDanmakuSwitch message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSwitch
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuSwitch} PlayerDanmakuSwitch
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuSwitch.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuSwitch();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.value = reader.bool();
                                        break;
                                    }
                                case 2: {
                                        message.canIgnore = reader.bool();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a PlayerDanmakuSwitch message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSwitch
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuSwitch} PlayerDanmakuSwitch
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuSwitch.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a PlayerDanmakuSwitch message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSwitch
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PlayerDanmakuSwitch.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (typeof message.value !== "boolean")
                                    return "value: boolean expected";
                            if (message.canIgnore != null && message.hasOwnProperty("canIgnore"))
                                if (typeof message.canIgnore !== "boolean")
                                    return "canIgnore: boolean expected";
                            return null;
                        };

                        /**
                         * Creates a PlayerDanmakuSwitch message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSwitch
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuSwitch} PlayerDanmakuSwitch
                         */
                        PlayerDanmakuSwitch.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.PlayerDanmakuSwitch)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuSwitch();
                            if (object.value != null)
                                message.value = Boolean(object.value);
                            if (object.canIgnore != null)
                                message.canIgnore = Boolean(object.canIgnore);
                            return message;
                        };

                        /**
                         * Creates a plain object from a PlayerDanmakuSwitch message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSwitch
                         * @static
                         * @param {bilibili.community.service.dm.v1.PlayerDanmakuSwitch} message PlayerDanmakuSwitch
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PlayerDanmakuSwitch.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.value = false;
                                object.canIgnore = false;
                            }
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = message.value;
                            if (message.canIgnore != null && message.hasOwnProperty("canIgnore"))
                                object.canIgnore = message.canIgnore;
                            return object;
                        };

                        /**
                         * Converts this PlayerDanmakuSwitch to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSwitch
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PlayerDanmakuSwitch.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for PlayerDanmakuSwitch
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSwitch
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        PlayerDanmakuSwitch.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.PlayerDanmakuSwitch";
                        };

                        return PlayerDanmakuSwitch;
                    })();

                    v1.PlayerDanmakuSwitchSave = (function() {

                        /**
                         * Properties of a PlayerDanmakuSwitchSave.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IPlayerDanmakuSwitchSave
                         * @property {boolean|null} [value] PlayerDanmakuSwitchSave value
                         */

                        /**
                         * Constructs a new PlayerDanmakuSwitchSave.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a PlayerDanmakuSwitchSave.
                         * @implements IPlayerDanmakuSwitchSave
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuSwitchSave=} [properties] Properties to set
                         */
                        function PlayerDanmakuSwitchSave(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * PlayerDanmakuSwitchSave value.
                         * @member {boolean} value
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave
                         * @instance
                         */
                        PlayerDanmakuSwitchSave.prototype.value = false;

                        /**
                         * Creates a new PlayerDanmakuSwitchSave instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuSwitchSave=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave} PlayerDanmakuSwitchSave instance
                         */
                        PlayerDanmakuSwitchSave.create = function create(properties) {
                            return new PlayerDanmakuSwitchSave(properties);
                        };

                        /**
                         * Encodes the specified PlayerDanmakuSwitchSave message. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuSwitchSave} message PlayerDanmakuSwitchSave message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuSwitchSave.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.value);
                            return writer;
                        };

                        /**
                         * Encodes the specified PlayerDanmakuSwitchSave message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuSwitchSave} message PlayerDanmakuSwitchSave message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuSwitchSave.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a PlayerDanmakuSwitchSave message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave} PlayerDanmakuSwitchSave
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuSwitchSave.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.value = reader.bool();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a PlayerDanmakuSwitchSave message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave} PlayerDanmakuSwitchSave
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuSwitchSave.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a PlayerDanmakuSwitchSave message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PlayerDanmakuSwitchSave.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (typeof message.value !== "boolean")
                                    return "value: boolean expected";
                            return null;
                        };

                        /**
                         * Creates a PlayerDanmakuSwitchSave message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave} PlayerDanmakuSwitchSave
                         */
                        PlayerDanmakuSwitchSave.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave();
                            if (object.value != null)
                                message.value = Boolean(object.value);
                            return message;
                        };

                        /**
                         * Creates a plain object from a PlayerDanmakuSwitchSave message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave
                         * @static
                         * @param {bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave} message PlayerDanmakuSwitchSave
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PlayerDanmakuSwitchSave.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults)
                                object.value = false;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = message.value;
                            return object;
                        };

                        /**
                         * Converts this PlayerDanmakuSwitchSave to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PlayerDanmakuSwitchSave.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for PlayerDanmakuSwitchSave
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        PlayerDanmakuSwitchSave.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.PlayerDanmakuSwitchSave";
                        };

                        return PlayerDanmakuSwitchSave;
                    })();

                    v1.PlayerDanmakuUseDefaultConfig = (function() {

                        /**
                         * Properties of a PlayerDanmakuUseDefaultConfig.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IPlayerDanmakuUseDefaultConfig
                         * @property {boolean|null} [value] PlayerDanmakuUseDefaultConfig value
                         */

                        /**
                         * Constructs a new PlayerDanmakuUseDefaultConfig.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a PlayerDanmakuUseDefaultConfig.
                         * @implements IPlayerDanmakuUseDefaultConfig
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuUseDefaultConfig=} [properties] Properties to set
                         */
                        function PlayerDanmakuUseDefaultConfig(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * PlayerDanmakuUseDefaultConfig value.
                         * @member {boolean} value
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig
                         * @instance
                         */
                        PlayerDanmakuUseDefaultConfig.prototype.value = false;

                        /**
                         * Creates a new PlayerDanmakuUseDefaultConfig instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuUseDefaultConfig=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig} PlayerDanmakuUseDefaultConfig instance
                         */
                        PlayerDanmakuUseDefaultConfig.create = function create(properties) {
                            return new PlayerDanmakuUseDefaultConfig(properties);
                        };

                        /**
                         * Encodes the specified PlayerDanmakuUseDefaultConfig message. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuUseDefaultConfig} message PlayerDanmakuUseDefaultConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuUseDefaultConfig.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.value);
                            return writer;
                        };

                        /**
                         * Encodes the specified PlayerDanmakuUseDefaultConfig message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPlayerDanmakuUseDefaultConfig} message PlayerDanmakuUseDefaultConfig message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PlayerDanmakuUseDefaultConfig.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a PlayerDanmakuUseDefaultConfig message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig} PlayerDanmakuUseDefaultConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuUseDefaultConfig.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.value = reader.bool();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a PlayerDanmakuUseDefaultConfig message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig} PlayerDanmakuUseDefaultConfig
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PlayerDanmakuUseDefaultConfig.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a PlayerDanmakuUseDefaultConfig message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PlayerDanmakuUseDefaultConfig.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.value != null && message.hasOwnProperty("value"))
                                if (typeof message.value !== "boolean")
                                    return "value: boolean expected";
                            return null;
                        };

                        /**
                         * Creates a PlayerDanmakuUseDefaultConfig message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig} PlayerDanmakuUseDefaultConfig
                         */
                        PlayerDanmakuUseDefaultConfig.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig();
                            if (object.value != null)
                                message.value = Boolean(object.value);
                            return message;
                        };

                        /**
                         * Creates a plain object from a PlayerDanmakuUseDefaultConfig message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig
                         * @static
                         * @param {bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig} message PlayerDanmakuUseDefaultConfig
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PlayerDanmakuUseDefaultConfig.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults)
                                object.value = false;
                            if (message.value != null && message.hasOwnProperty("value"))
                                object.value = message.value;
                            return object;
                        };

                        /**
                         * Converts this PlayerDanmakuUseDefaultConfig to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PlayerDanmakuUseDefaultConfig.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for PlayerDanmakuUseDefaultConfig
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        PlayerDanmakuUseDefaultConfig.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.PlayerDanmakuUseDefaultConfig";
                        };

                        return PlayerDanmakuUseDefaultConfig;
                    })();

                    v1.PostPanel = (function() {

                        /**
                         * Properties of a PostPanel.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IPostPanel
                         * @property {number|Long|null} [start] PostPanel start
                         * @property {number|Long|null} [end] PostPanel end
                         * @property {number|Long|null} [priority] PostPanel priority
                         * @property {number|Long|null} [bizId] PostPanel bizId
                         * @property {bilibili.community.service.dm.v1.PostPanelBizType|null} [bizType] PostPanel bizType
                         * @property {bilibili.community.service.dm.v1.IClickButton|null} [clickButton] PostPanel clickButton
                         * @property {bilibili.community.service.dm.v1.ITextInput|null} [textInput] PostPanel textInput
                         * @property {bilibili.community.service.dm.v1.ICheckBox|null} [checkBox] PostPanel checkBox
                         * @property {bilibili.community.service.dm.v1.IToast|null} [toast] PostPanel toast
                         */

                        /**
                         * Constructs a new PostPanel.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a PostPanel.
                         * @implements IPostPanel
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IPostPanel=} [properties] Properties to set
                         */
                        function PostPanel(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * PostPanel start.
                         * @member {number|Long} start
                         * @memberof bilibili.community.service.dm.v1.PostPanel
                         * @instance
                         */
                        PostPanel.prototype.start = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * PostPanel end.
                         * @member {number|Long} end
                         * @memberof bilibili.community.service.dm.v1.PostPanel
                         * @instance
                         */
                        PostPanel.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * PostPanel priority.
                         * @member {number|Long} priority
                         * @memberof bilibili.community.service.dm.v1.PostPanel
                         * @instance
                         */
                        PostPanel.prototype.priority = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * PostPanel bizId.
                         * @member {number|Long} bizId
                         * @memberof bilibili.community.service.dm.v1.PostPanel
                         * @instance
                         */
                        PostPanel.prototype.bizId = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * PostPanel bizType.
                         * @member {bilibili.community.service.dm.v1.PostPanelBizType} bizType
                         * @memberof bilibili.community.service.dm.v1.PostPanel
                         * @instance
                         */
                        PostPanel.prototype.bizType = 0;

                        /**
                         * PostPanel clickButton.
                         * @member {bilibili.community.service.dm.v1.IClickButton|null|undefined} clickButton
                         * @memberof bilibili.community.service.dm.v1.PostPanel
                         * @instance
                         */
                        PostPanel.prototype.clickButton = null;

                        /**
                         * PostPanel textInput.
                         * @member {bilibili.community.service.dm.v1.ITextInput|null|undefined} textInput
                         * @memberof bilibili.community.service.dm.v1.PostPanel
                         * @instance
                         */
                        PostPanel.prototype.textInput = null;

                        /**
                         * PostPanel checkBox.
                         * @member {bilibili.community.service.dm.v1.ICheckBox|null|undefined} checkBox
                         * @memberof bilibili.community.service.dm.v1.PostPanel
                         * @instance
                         */
                        PostPanel.prototype.checkBox = null;

                        /**
                         * PostPanel toast.
                         * @member {bilibili.community.service.dm.v1.IToast|null|undefined} toast
                         * @memberof bilibili.community.service.dm.v1.PostPanel
                         * @instance
                         */
                        PostPanel.prototype.toast = null;

                        /**
                         * Creates a new PostPanel instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.PostPanel
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPostPanel=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.PostPanel} PostPanel instance
                         */
                        PostPanel.create = function create(properties) {
                            return new PostPanel(properties);
                        };

                        /**
                         * Encodes the specified PostPanel message. Does not implicitly {@link bilibili.community.service.dm.v1.PostPanel.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.PostPanel
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPostPanel} message PostPanel message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PostPanel.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.start);
                            if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);
                            if (message.priority != null && Object.hasOwnProperty.call(message, "priority"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.priority);
                            if (message.bizId != null && Object.hasOwnProperty.call(message, "bizId"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.bizId);
                            if (message.bizType != null && Object.hasOwnProperty.call(message, "bizType"))
                                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.bizType);
                            if (message.clickButton != null && Object.hasOwnProperty.call(message, "clickButton"))
                                $root.bilibili.community.service.dm.v1.ClickButton.encode(message.clickButton, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.textInput != null && Object.hasOwnProperty.call(message, "textInput"))
                                $root.bilibili.community.service.dm.v1.TextInput.encode(message.textInput, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.checkBox != null && Object.hasOwnProperty.call(message, "checkBox"))
                                $root.bilibili.community.service.dm.v1.CheckBox.encode(message.checkBox, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                            if (message.toast != null && Object.hasOwnProperty.call(message, "toast"))
                                $root.bilibili.community.service.dm.v1.Toast.encode(message.toast, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified PostPanel message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.PostPanel.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PostPanel
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPostPanel} message PostPanel message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PostPanel.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a PostPanel message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.PostPanel
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.PostPanel} PostPanel
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PostPanel.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.PostPanel();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.start = reader.int64();
                                        break;
                                    }
                                case 2: {
                                        message.end = reader.int64();
                                        break;
                                    }
                                case 3: {
                                        message.priority = reader.int64();
                                        break;
                                    }
                                case 4: {
                                        message.bizId = reader.int64();
                                        break;
                                    }
                                case 5: {
                                        message.bizType = reader.int32();
                                        break;
                                    }
                                case 6: {
                                        message.clickButton = $root.bilibili.community.service.dm.v1.ClickButton.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 7: {
                                        message.textInput = $root.bilibili.community.service.dm.v1.TextInput.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 8: {
                                        message.checkBox = $root.bilibili.community.service.dm.v1.CheckBox.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 9: {
                                        message.toast = $root.bilibili.community.service.dm.v1.Toast.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a PostPanel message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PostPanel
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.PostPanel} PostPanel
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PostPanel.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a PostPanel message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.PostPanel
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PostPanel.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.start != null && message.hasOwnProperty("start"))
                                if (!$util.isInteger(message.start) && !(message.start && $util.isInteger(message.start.low) && $util.isInteger(message.start.high)))
                                    return "start: integer|Long expected";
                            if (message.end != null && message.hasOwnProperty("end"))
                                if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))
                                    return "end: integer|Long expected";
                            if (message.priority != null && message.hasOwnProperty("priority"))
                                if (!$util.isInteger(message.priority) && !(message.priority && $util.isInteger(message.priority.low) && $util.isInteger(message.priority.high)))
                                    return "priority: integer|Long expected";
                            if (message.bizId != null && message.hasOwnProperty("bizId"))
                                if (!$util.isInteger(message.bizId) && !(message.bizId && $util.isInteger(message.bizId.low) && $util.isInteger(message.bizId.high)))
                                    return "bizId: integer|Long expected";
                            if (message.bizType != null && message.hasOwnProperty("bizType"))
                                switch (message.bizType) {
                                default:
                                    return "bizType: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                case 5:
                                    break;
                                }
                            if (message.clickButton != null && message.hasOwnProperty("clickButton")) {
                                let error = $root.bilibili.community.service.dm.v1.ClickButton.verify(message.clickButton);
                                if (error)
                                    return "clickButton." + error;
                            }
                            if (message.textInput != null && message.hasOwnProperty("textInput")) {
                                let error = $root.bilibili.community.service.dm.v1.TextInput.verify(message.textInput);
                                if (error)
                                    return "textInput." + error;
                            }
                            if (message.checkBox != null && message.hasOwnProperty("checkBox")) {
                                let error = $root.bilibili.community.service.dm.v1.CheckBox.verify(message.checkBox);
                                if (error)
                                    return "checkBox." + error;
                            }
                            if (message.toast != null && message.hasOwnProperty("toast")) {
                                let error = $root.bilibili.community.service.dm.v1.Toast.verify(message.toast);
                                if (error)
                                    return "toast." + error;
                            }
                            return null;
                        };

                        /**
                         * Creates a PostPanel message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.PostPanel
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.PostPanel} PostPanel
                         */
                        PostPanel.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.PostPanel)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.PostPanel();
                            if (object.start != null)
                                if ($util.Long)
                                    (message.start = $util.Long.fromValue(object.start)).unsigned = false;
                                else if (typeof object.start === "string")
                                    message.start = parseInt(object.start, 10);
                                else if (typeof object.start === "number")
                                    message.start = object.start;
                                else if (typeof object.start === "object")
                                    message.start = new $util.LongBits(object.start.low >>> 0, object.start.high >>> 0).toNumber();
                            if (object.end != null)
                                if ($util.Long)
                                    (message.end = $util.Long.fromValue(object.end)).unsigned = false;
                                else if (typeof object.end === "string")
                                    message.end = parseInt(object.end, 10);
                                else if (typeof object.end === "number")
                                    message.end = object.end;
                                else if (typeof object.end === "object")
                                    message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();
                            if (object.priority != null)
                                if ($util.Long)
                                    (message.priority = $util.Long.fromValue(object.priority)).unsigned = false;
                                else if (typeof object.priority === "string")
                                    message.priority = parseInt(object.priority, 10);
                                else if (typeof object.priority === "number")
                                    message.priority = object.priority;
                                else if (typeof object.priority === "object")
                                    message.priority = new $util.LongBits(object.priority.low >>> 0, object.priority.high >>> 0).toNumber();
                            if (object.bizId != null)
                                if ($util.Long)
                                    (message.bizId = $util.Long.fromValue(object.bizId)).unsigned = false;
                                else if (typeof object.bizId === "string")
                                    message.bizId = parseInt(object.bizId, 10);
                                else if (typeof object.bizId === "number")
                                    message.bizId = object.bizId;
                                else if (typeof object.bizId === "object")
                                    message.bizId = new $util.LongBits(object.bizId.low >>> 0, object.bizId.high >>> 0).toNumber();
                            switch (object.bizType) {
                            default:
                                if (typeof object.bizType === "number") {
                                    message.bizType = object.bizType;
                                    break;
                                }
                                break;
                            case "PostPanelBizTypeNone":
                            case 0:
                                message.bizType = 0;
                                break;
                            case "PostPanelBizTypeEncourage":
                            case 1:
                                message.bizType = 1;
                                break;
                            case "PostPanelBizTypeColorDM":
                            case 2:
                                message.bizType = 2;
                                break;
                            case "PostPanelBizTypeNFTDM":
                            case 3:
                                message.bizType = 3;
                                break;
                            case "PostPanelBizTypeFragClose":
                            case 4:
                                message.bizType = 4;
                                break;
                            case "PostPanelBizTypeRecommend":
                            case 5:
                                message.bizType = 5;
                                break;
                            }
                            if (object.clickButton != null) {
                                if (typeof object.clickButton !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.PostPanel.clickButton: object expected");
                                message.clickButton = $root.bilibili.community.service.dm.v1.ClickButton.fromObject(object.clickButton);
                            }
                            if (object.textInput != null) {
                                if (typeof object.textInput !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.PostPanel.textInput: object expected");
                                message.textInput = $root.bilibili.community.service.dm.v1.TextInput.fromObject(object.textInput);
                            }
                            if (object.checkBox != null) {
                                if (typeof object.checkBox !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.PostPanel.checkBox: object expected");
                                message.checkBox = $root.bilibili.community.service.dm.v1.CheckBox.fromObject(object.checkBox);
                            }
                            if (object.toast != null) {
                                if (typeof object.toast !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.PostPanel.toast: object expected");
                                message.toast = $root.bilibili.community.service.dm.v1.Toast.fromObject(object.toast);
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a PostPanel message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.PostPanel
                         * @static
                         * @param {bilibili.community.service.dm.v1.PostPanel} message PostPanel
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PostPanel.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.start = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.start = options.longs === String ? "0" : 0;
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.end = options.longs === String ? "0" : 0;
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.priority = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.priority = options.longs === String ? "0" : 0;
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.bizId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.bizId = options.longs === String ? "0" : 0;
                                object.bizType = options.enums === String ? "PostPanelBizTypeNone" : 0;
                                object.clickButton = null;
                                object.textInput = null;
                                object.checkBox = null;
                                object.toast = null;
                            }
                            if (message.start != null && message.hasOwnProperty("start"))
                                if (typeof message.start === "number")
                                    object.start = options.longs === String ? String(message.start) : message.start;
                                else
                                    object.start = options.longs === String ? $util.Long.prototype.toString.call(message.start) : options.longs === Number ? new $util.LongBits(message.start.low >>> 0, message.start.high >>> 0).toNumber() : message.start;
                            if (message.end != null && message.hasOwnProperty("end"))
                                if (typeof message.end === "number")
                                    object.end = options.longs === String ? String(message.end) : message.end;
                                else
                                    object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;
                            if (message.priority != null && message.hasOwnProperty("priority"))
                                if (typeof message.priority === "number")
                                    object.priority = options.longs === String ? String(message.priority) : message.priority;
                                else
                                    object.priority = options.longs === String ? $util.Long.prototype.toString.call(message.priority) : options.longs === Number ? new $util.LongBits(message.priority.low >>> 0, message.priority.high >>> 0).toNumber() : message.priority;
                            if (message.bizId != null && message.hasOwnProperty("bizId"))
                                if (typeof message.bizId === "number")
                                    object.bizId = options.longs === String ? String(message.bizId) : message.bizId;
                                else
                                    object.bizId = options.longs === String ? $util.Long.prototype.toString.call(message.bizId) : options.longs === Number ? new $util.LongBits(message.bizId.low >>> 0, message.bizId.high >>> 0).toNumber() : message.bizId;
                            if (message.bizType != null && message.hasOwnProperty("bizType"))
                                object.bizType = options.enums === String ? $root.bilibili.community.service.dm.v1.PostPanelBizType[message.bizType] === undefined ? message.bizType : $root.bilibili.community.service.dm.v1.PostPanelBizType[message.bizType] : message.bizType;
                            if (message.clickButton != null && message.hasOwnProperty("clickButton"))
                                object.clickButton = $root.bilibili.community.service.dm.v1.ClickButton.toObject(message.clickButton, options);
                            if (message.textInput != null && message.hasOwnProperty("textInput"))
                                object.textInput = $root.bilibili.community.service.dm.v1.TextInput.toObject(message.textInput, options);
                            if (message.checkBox != null && message.hasOwnProperty("checkBox"))
                                object.checkBox = $root.bilibili.community.service.dm.v1.CheckBox.toObject(message.checkBox, options);
                            if (message.toast != null && message.hasOwnProperty("toast"))
                                object.toast = $root.bilibili.community.service.dm.v1.Toast.toObject(message.toast, options);
                            return object;
                        };

                        /**
                         * Converts this PostPanel to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.PostPanel
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PostPanel.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for PostPanel
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.PostPanel
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        PostPanel.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.PostPanel";
                        };

                        return PostPanel;
                    })();

                    /**
                     * PostPanelBizType enum.
                     * @name bilibili.community.service.dm.v1.PostPanelBizType
                     * @enum {number}
                     * @property {number} PostPanelBizTypeNone=0 PostPanelBizTypeNone value
                     * @property {number} PostPanelBizTypeEncourage=1 PostPanelBizTypeEncourage value
                     * @property {number} PostPanelBizTypeColorDM=2 PostPanelBizTypeColorDM value
                     * @property {number} PostPanelBizTypeNFTDM=3 PostPanelBizTypeNFTDM value
                     * @property {number} PostPanelBizTypeFragClose=4 PostPanelBizTypeFragClose value
                     * @property {number} PostPanelBizTypeRecommend=5 PostPanelBizTypeRecommend value
                     */
                    v1.PostPanelBizType = (function() {
                        const valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "PostPanelBizTypeNone"] = 0;
                        values[valuesById[1] = "PostPanelBizTypeEncourage"] = 1;
                        values[valuesById[2] = "PostPanelBizTypeColorDM"] = 2;
                        values[valuesById[3] = "PostPanelBizTypeNFTDM"] = 3;
                        values[valuesById[4] = "PostPanelBizTypeFragClose"] = 4;
                        values[valuesById[5] = "PostPanelBizTypeRecommend"] = 5;
                        return values;
                    })();

                    v1.PostPanelV2 = (function() {

                        /**
                         * Properties of a PostPanelV2.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IPostPanelV2
                         * @property {number|Long|null} [start] PostPanelV2 start
                         * @property {number|Long|null} [end] PostPanelV2 end
                         * @property {number|null} [bizType] PostPanelV2 bizType
                         * @property {bilibili.community.service.dm.v1.IClickButtonV2|null} [clickButton] PostPanelV2 clickButton
                         * @property {bilibili.community.service.dm.v1.ITextInputV2|null} [textInput] PostPanelV2 textInput
                         * @property {bilibili.community.service.dm.v1.ICheckBoxV2|null} [checkBox] PostPanelV2 checkBox
                         * @property {bilibili.community.service.dm.v1.IToastV2|null} [toast] PostPanelV2 toast
                         * @property {bilibili.community.service.dm.v1.IBubbleV2|null} [bubble] PostPanelV2 bubble
                         * @property {bilibili.community.service.dm.v1.ILabelV2|null} [label] PostPanelV2 label
                         * @property {number|null} [postStatus] PostPanelV2 postStatus
                         */

                        /**
                         * Constructs a new PostPanelV2.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a PostPanelV2.
                         * @implements IPostPanelV2
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IPostPanelV2=} [properties] Properties to set
                         */
                        function PostPanelV2(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * PostPanelV2 start.
                         * @member {number|Long} start
                         * @memberof bilibili.community.service.dm.v1.PostPanelV2
                         * @instance
                         */
                        PostPanelV2.prototype.start = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * PostPanelV2 end.
                         * @member {number|Long} end
                         * @memberof bilibili.community.service.dm.v1.PostPanelV2
                         * @instance
                         */
                        PostPanelV2.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * PostPanelV2 bizType.
                         * @member {number} bizType
                         * @memberof bilibili.community.service.dm.v1.PostPanelV2
                         * @instance
                         */
                        PostPanelV2.prototype.bizType = 0;

                        /**
                         * PostPanelV2 clickButton.
                         * @member {bilibili.community.service.dm.v1.IClickButtonV2|null|undefined} clickButton
                         * @memberof bilibili.community.service.dm.v1.PostPanelV2
                         * @instance
                         */
                        PostPanelV2.prototype.clickButton = null;

                        /**
                         * PostPanelV2 textInput.
                         * @member {bilibili.community.service.dm.v1.ITextInputV2|null|undefined} textInput
                         * @memberof bilibili.community.service.dm.v1.PostPanelV2
                         * @instance
                         */
                        PostPanelV2.prototype.textInput = null;

                        /**
                         * PostPanelV2 checkBox.
                         * @member {bilibili.community.service.dm.v1.ICheckBoxV2|null|undefined} checkBox
                         * @memberof bilibili.community.service.dm.v1.PostPanelV2
                         * @instance
                         */
                        PostPanelV2.prototype.checkBox = null;

                        /**
                         * PostPanelV2 toast.
                         * @member {bilibili.community.service.dm.v1.IToastV2|null|undefined} toast
                         * @memberof bilibili.community.service.dm.v1.PostPanelV2
                         * @instance
                         */
                        PostPanelV2.prototype.toast = null;

                        /**
                         * PostPanelV2 bubble.
                         * @member {bilibili.community.service.dm.v1.IBubbleV2|null|undefined} bubble
                         * @memberof bilibili.community.service.dm.v1.PostPanelV2
                         * @instance
                         */
                        PostPanelV2.prototype.bubble = null;

                        /**
                         * PostPanelV2 label.
                         * @member {bilibili.community.service.dm.v1.ILabelV2|null|undefined} label
                         * @memberof bilibili.community.service.dm.v1.PostPanelV2
                         * @instance
                         */
                        PostPanelV2.prototype.label = null;

                        /**
                         * PostPanelV2 postStatus.
                         * @member {number} postStatus
                         * @memberof bilibili.community.service.dm.v1.PostPanelV2
                         * @instance
                         */
                        PostPanelV2.prototype.postStatus = 0;

                        /**
                         * Creates a new PostPanelV2 instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.PostPanelV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPostPanelV2=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.PostPanelV2} PostPanelV2 instance
                         */
                        PostPanelV2.create = function create(properties) {
                            return new PostPanelV2(properties);
                        };

                        /**
                         * Encodes the specified PostPanelV2 message. Does not implicitly {@link bilibili.community.service.dm.v1.PostPanelV2.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.PostPanelV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPostPanelV2} message PostPanelV2 message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PostPanelV2.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.start);
                            if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);
                            if (message.bizType != null && Object.hasOwnProperty.call(message, "bizType"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.bizType);
                            if (message.clickButton != null && Object.hasOwnProperty.call(message, "clickButton"))
                                $root.bilibili.community.service.dm.v1.ClickButtonV2.encode(message.clickButton, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            if (message.textInput != null && Object.hasOwnProperty.call(message, "textInput"))
                                $root.bilibili.community.service.dm.v1.TextInputV2.encode(message.textInput, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.checkBox != null && Object.hasOwnProperty.call(message, "checkBox"))
                                $root.bilibili.community.service.dm.v1.CheckBoxV2.encode(message.checkBox, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.toast != null && Object.hasOwnProperty.call(message, "toast"))
                                $root.bilibili.community.service.dm.v1.ToastV2.encode(message.toast, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.bubble != null && Object.hasOwnProperty.call(message, "bubble"))
                                $root.bilibili.community.service.dm.v1.BubbleV2.encode(message.bubble, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                            if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                                $root.bilibili.community.service.dm.v1.LabelV2.encode(message.label, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                            if (message.postStatus != null && Object.hasOwnProperty.call(message, "postStatus"))
                                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.postStatus);
                            return writer;
                        };

                        /**
                         * Encodes the specified PostPanelV2 message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.PostPanelV2.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PostPanelV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.IPostPanelV2} message PostPanelV2 message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PostPanelV2.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a PostPanelV2 message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.PostPanelV2
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.PostPanelV2} PostPanelV2
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PostPanelV2.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.PostPanelV2();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.start = reader.int64();
                                        break;
                                    }
                                case 2: {
                                        message.end = reader.int64();
                                        break;
                                    }
                                case 3: {
                                        message.bizType = reader.int32();
                                        break;
                                    }
                                case 4: {
                                        message.clickButton = $root.bilibili.community.service.dm.v1.ClickButtonV2.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 5: {
                                        message.textInput = $root.bilibili.community.service.dm.v1.TextInputV2.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 6: {
                                        message.checkBox = $root.bilibili.community.service.dm.v1.CheckBoxV2.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 7: {
                                        message.toast = $root.bilibili.community.service.dm.v1.ToastV2.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 8: {
                                        message.bubble = $root.bilibili.community.service.dm.v1.BubbleV2.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 9: {
                                        message.label = $root.bilibili.community.service.dm.v1.LabelV2.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 10: {
                                        message.postStatus = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a PostPanelV2 message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.PostPanelV2
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.PostPanelV2} PostPanelV2
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PostPanelV2.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a PostPanelV2 message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.PostPanelV2
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PostPanelV2.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.start != null && message.hasOwnProperty("start"))
                                if (!$util.isInteger(message.start) && !(message.start && $util.isInteger(message.start.low) && $util.isInteger(message.start.high)))
                                    return "start: integer|Long expected";
                            if (message.end != null && message.hasOwnProperty("end"))
                                if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))
                                    return "end: integer|Long expected";
                            if (message.bizType != null && message.hasOwnProperty("bizType"))
                                if (!$util.isInteger(message.bizType))
                                    return "bizType: integer expected";
                            if (message.clickButton != null && message.hasOwnProperty("clickButton")) {
                                let error = $root.bilibili.community.service.dm.v1.ClickButtonV2.verify(message.clickButton);
                                if (error)
                                    return "clickButton." + error;
                            }
                            if (message.textInput != null && message.hasOwnProperty("textInput")) {
                                let error = $root.bilibili.community.service.dm.v1.TextInputV2.verify(message.textInput);
                                if (error)
                                    return "textInput." + error;
                            }
                            if (message.checkBox != null && message.hasOwnProperty("checkBox")) {
                                let error = $root.bilibili.community.service.dm.v1.CheckBoxV2.verify(message.checkBox);
                                if (error)
                                    return "checkBox." + error;
                            }
                            if (message.toast != null && message.hasOwnProperty("toast")) {
                                let error = $root.bilibili.community.service.dm.v1.ToastV2.verify(message.toast);
                                if (error)
                                    return "toast." + error;
                            }
                            if (message.bubble != null && message.hasOwnProperty("bubble")) {
                                let error = $root.bilibili.community.service.dm.v1.BubbleV2.verify(message.bubble);
                                if (error)
                                    return "bubble." + error;
                            }
                            if (message.label != null && message.hasOwnProperty("label")) {
                                let error = $root.bilibili.community.service.dm.v1.LabelV2.verify(message.label);
                                if (error)
                                    return "label." + error;
                            }
                            if (message.postStatus != null && message.hasOwnProperty("postStatus"))
                                if (!$util.isInteger(message.postStatus))
                                    return "postStatus: integer expected";
                            return null;
                        };

                        /**
                         * Creates a PostPanelV2 message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.PostPanelV2
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.PostPanelV2} PostPanelV2
                         */
                        PostPanelV2.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.PostPanelV2)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.PostPanelV2();
                            if (object.start != null)
                                if ($util.Long)
                                    (message.start = $util.Long.fromValue(object.start)).unsigned = false;
                                else if (typeof object.start === "string")
                                    message.start = parseInt(object.start, 10);
                                else if (typeof object.start === "number")
                                    message.start = object.start;
                                else if (typeof object.start === "object")
                                    message.start = new $util.LongBits(object.start.low >>> 0, object.start.high >>> 0).toNumber();
                            if (object.end != null)
                                if ($util.Long)
                                    (message.end = $util.Long.fromValue(object.end)).unsigned = false;
                                else if (typeof object.end === "string")
                                    message.end = parseInt(object.end, 10);
                                else if (typeof object.end === "number")
                                    message.end = object.end;
                                else if (typeof object.end === "object")
                                    message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();
                            if (object.bizType != null)
                                message.bizType = object.bizType | 0;
                            if (object.clickButton != null) {
                                if (typeof object.clickButton !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.PostPanelV2.clickButton: object expected");
                                message.clickButton = $root.bilibili.community.service.dm.v1.ClickButtonV2.fromObject(object.clickButton);
                            }
                            if (object.textInput != null) {
                                if (typeof object.textInput !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.PostPanelV2.textInput: object expected");
                                message.textInput = $root.bilibili.community.service.dm.v1.TextInputV2.fromObject(object.textInput);
                            }
                            if (object.checkBox != null) {
                                if (typeof object.checkBox !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.PostPanelV2.checkBox: object expected");
                                message.checkBox = $root.bilibili.community.service.dm.v1.CheckBoxV2.fromObject(object.checkBox);
                            }
                            if (object.toast != null) {
                                if (typeof object.toast !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.PostPanelV2.toast: object expected");
                                message.toast = $root.bilibili.community.service.dm.v1.ToastV2.fromObject(object.toast);
                            }
                            if (object.bubble != null) {
                                if (typeof object.bubble !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.PostPanelV2.bubble: object expected");
                                message.bubble = $root.bilibili.community.service.dm.v1.BubbleV2.fromObject(object.bubble);
                            }
                            if (object.label != null) {
                                if (typeof object.label !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.PostPanelV2.label: object expected");
                                message.label = $root.bilibili.community.service.dm.v1.LabelV2.fromObject(object.label);
                            }
                            if (object.postStatus != null)
                                message.postStatus = object.postStatus | 0;
                            return message;
                        };

                        /**
                         * Creates a plain object from a PostPanelV2 message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.PostPanelV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.PostPanelV2} message PostPanelV2
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PostPanelV2.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.start = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.start = options.longs === String ? "0" : 0;
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.end = options.longs === String ? "0" : 0;
                                object.bizType = 0;
                                object.clickButton = null;
                                object.textInput = null;
                                object.checkBox = null;
                                object.toast = null;
                                object.bubble = null;
                                object.label = null;
                                object.postStatus = 0;
                            }
                            if (message.start != null && message.hasOwnProperty("start"))
                                if (typeof message.start === "number")
                                    object.start = options.longs === String ? String(message.start) : message.start;
                                else
                                    object.start = options.longs === String ? $util.Long.prototype.toString.call(message.start) : options.longs === Number ? new $util.LongBits(message.start.low >>> 0, message.start.high >>> 0).toNumber() : message.start;
                            if (message.end != null && message.hasOwnProperty("end"))
                                if (typeof message.end === "number")
                                    object.end = options.longs === String ? String(message.end) : message.end;
                                else
                                    object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;
                            if (message.bizType != null && message.hasOwnProperty("bizType"))
                                object.bizType = message.bizType;
                            if (message.clickButton != null && message.hasOwnProperty("clickButton"))
                                object.clickButton = $root.bilibili.community.service.dm.v1.ClickButtonV2.toObject(message.clickButton, options);
                            if (message.textInput != null && message.hasOwnProperty("textInput"))
                                object.textInput = $root.bilibili.community.service.dm.v1.TextInputV2.toObject(message.textInput, options);
                            if (message.checkBox != null && message.hasOwnProperty("checkBox"))
                                object.checkBox = $root.bilibili.community.service.dm.v1.CheckBoxV2.toObject(message.checkBox, options);
                            if (message.toast != null && message.hasOwnProperty("toast"))
                                object.toast = $root.bilibili.community.service.dm.v1.ToastV2.toObject(message.toast, options);
                            if (message.bubble != null && message.hasOwnProperty("bubble"))
                                object.bubble = $root.bilibili.community.service.dm.v1.BubbleV2.toObject(message.bubble, options);
                            if (message.label != null && message.hasOwnProperty("label"))
                                object.label = $root.bilibili.community.service.dm.v1.LabelV2.toObject(message.label, options);
                            if (message.postStatus != null && message.hasOwnProperty("postStatus"))
                                object.postStatus = message.postStatus;
                            return object;
                        };

                        /**
                         * Converts this PostPanelV2 to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.PostPanelV2
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PostPanelV2.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for PostPanelV2
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.PostPanelV2
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        PostPanelV2.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.PostPanelV2";
                        };

                        return PostPanelV2;
                    })();

                    /**
                     * PostStatus enum.
                     * @name bilibili.community.service.dm.v1.PostStatus
                     * @enum {number}
                     * @property {number} PostStatusNormal=0 PostStatusNormal value
                     * @property {number} PostStatusClosed=1 PostStatusClosed value
                     */
                    v1.PostStatus = (function() {
                        const valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "PostStatusNormal"] = 0;
                        values[valuesById[1] = "PostStatusClosed"] = 1;
                        return values;
                    })();

                    /**
                     * RenderType enum.
                     * @name bilibili.community.service.dm.v1.RenderType
                     * @enum {number}
                     * @property {number} RenderTypeNone=0 RenderTypeNone value
                     * @property {number} RenderTypeSingle=1 RenderTypeSingle value
                     * @property {number} RenderTypeRotation=2 RenderTypeRotation value
                     */
                    v1.RenderType = (function() {
                        const valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "RenderTypeNone"] = 0;
                        values[valuesById[1] = "RenderTypeSingle"] = 1;
                        values[valuesById[2] = "RenderTypeRotation"] = 2;
                        return values;
                    })();

                    v1.Response = (function() {

                        /**
                         * Properties of a Response.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IResponse
                         * @property {number|null} [code] Response code
                         * @property {string|null} [message] Response message
                         */

                        /**
                         * Constructs a new Response.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a Response.
                         * @implements IResponse
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IResponse=} [properties] Properties to set
                         */
                        function Response(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Response code.
                         * @member {number} code
                         * @memberof bilibili.community.service.dm.v1.Response
                         * @instance
                         */
                        Response.prototype.code = 0;

                        /**
                         * Response message.
                         * @member {string} message
                         * @memberof bilibili.community.service.dm.v1.Response
                         * @instance
                         */
                        Response.prototype.message = "";

                        /**
                         * Creates a new Response instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.Response
                         * @static
                         * @param {bilibili.community.service.dm.v1.IResponse=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.Response} Response instance
                         */
                        Response.create = function create(properties) {
                            return new Response(properties);
                        };

                        /**
                         * Encodes the specified Response message. Does not implicitly {@link bilibili.community.service.dm.v1.Response.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.Response
                         * @static
                         * @param {bilibili.community.service.dm.v1.IResponse} message Response message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Response.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.code);
                            if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                            return writer;
                        };

                        /**
                         * Encodes the specified Response message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.Response.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.Response
                         * @static
                         * @param {bilibili.community.service.dm.v1.IResponse} message Response message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Response.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Response message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.Response
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.Response} Response
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Response.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.Response();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.code = reader.int32();
                                        break;
                                    }
                                case 2: {
                                        message.message = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Response message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.Response
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.Response} Response
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Response.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Response message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.Response
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Response.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.code != null && message.hasOwnProperty("code"))
                                if (!$util.isInteger(message.code))
                                    return "code: integer expected";
                            if (message.message != null && message.hasOwnProperty("message"))
                                if (!$util.isString(message.message))
                                    return "message: string expected";
                            return null;
                        };

                        /**
                         * Creates a Response message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.Response
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.Response} Response
                         */
                        Response.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.Response)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.Response();
                            if (object.code != null)
                                message.code = object.code | 0;
                            if (object.message != null)
                                message.message = String(object.message);
                            return message;
                        };

                        /**
                         * Creates a plain object from a Response message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.Response
                         * @static
                         * @param {bilibili.community.service.dm.v1.Response} message Response
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Response.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.code = 0;
                                object.message = "";
                            }
                            if (message.code != null && message.hasOwnProperty("code"))
                                object.code = message.code;
                            if (message.message != null && message.hasOwnProperty("message"))
                                object.message = message.message;
                            return object;
                        };

                        /**
                         * Converts this Response to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.Response
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Response.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for Response
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.Response
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Response.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.Response";
                        };

                        return Response;
                    })();

                    /**
                     * SubtitleAiStatus enum.
                     * @name bilibili.community.service.dm.v1.SubtitleAiStatus
                     * @enum {number}
                     * @property {number} None=0 None value
                     * @property {number} Exposure=1 Exposure value
                     * @property {number} Assist=2 Assist value
                     */
                    v1.SubtitleAiStatus = (function() {
                        const valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "None"] = 0;
                        values[valuesById[1] = "Exposure"] = 1;
                        values[valuesById[2] = "Assist"] = 2;
                        return values;
                    })();

                    /**
                     * SubtitleAiType enum.
                     * @name bilibili.community.service.dm.v1.SubtitleAiType
                     * @enum {number}
                     * @property {number} Normal=0 Normal value
                     * @property {number} Translate=1 Translate value
                     */
                    v1.SubtitleAiType = (function() {
                        const valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "Normal"] = 0;
                        values[valuesById[1] = "Translate"] = 1;
                        return values;
                    })();

                    v1.SubtitleItem = (function() {

                        /**
                         * Properties of a SubtitleItem.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface ISubtitleItem
                         * @property {number|Long|null} [id] SubtitleItem id
                         * @property {string|null} [idStr] SubtitleItem idStr
                         * @property {string|null} [lan] SubtitleItem lan
                         * @property {string|null} [lanDoc] SubtitleItem lanDoc
                         * @property {string|null} [subtitleUrl] SubtitleItem subtitleUrl
                         * @property {bilibili.community.service.dm.v1.IUserInfo|null} [author] SubtitleItem author
                         * @property {bilibili.community.service.dm.v1.SubtitleType|null} [type] SubtitleItem type
                         * @property {string|null} [lanDocBrief] SubtitleItem lanDocBrief
                         * @property {bilibili.community.service.dm.v1.SubtitleAiType|null} [aiType] SubtitleItem aiType
                         * @property {bilibili.community.service.dm.v1.SubtitleAiStatus|null} [aiStatus] SubtitleItem aiStatus
                         */

                        /**
                         * Constructs a new SubtitleItem.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a SubtitleItem.
                         * @implements ISubtitleItem
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.ISubtitleItem=} [properties] Properties to set
                         */
                        function SubtitleItem(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * SubtitleItem id.
                         * @member {number|Long} id
                         * @memberof bilibili.community.service.dm.v1.SubtitleItem
                         * @instance
                         */
                        SubtitleItem.prototype.id = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * SubtitleItem idStr.
                         * @member {string} idStr
                         * @memberof bilibili.community.service.dm.v1.SubtitleItem
                         * @instance
                         */
                        SubtitleItem.prototype.idStr = "";

                        /**
                         * SubtitleItem lan.
                         * @member {string} lan
                         * @memberof bilibili.community.service.dm.v1.SubtitleItem
                         * @instance
                         */
                        SubtitleItem.prototype.lan = "";

                        /**
                         * SubtitleItem lanDoc.
                         * @member {string} lanDoc
                         * @memberof bilibili.community.service.dm.v1.SubtitleItem
                         * @instance
                         */
                        SubtitleItem.prototype.lanDoc = "";

                        /**
                         * SubtitleItem subtitleUrl.
                         * @member {string} subtitleUrl
                         * @memberof bilibili.community.service.dm.v1.SubtitleItem
                         * @instance
                         */
                        SubtitleItem.prototype.subtitleUrl = "";

                        /**
                         * SubtitleItem author.
                         * @member {bilibili.community.service.dm.v1.IUserInfo|null|undefined} author
                         * @memberof bilibili.community.service.dm.v1.SubtitleItem
                         * @instance
                         */
                        SubtitleItem.prototype.author = null;

                        /**
                         * SubtitleItem type.
                         * @member {bilibili.community.service.dm.v1.SubtitleType} type
                         * @memberof bilibili.community.service.dm.v1.SubtitleItem
                         * @instance
                         */
                        SubtitleItem.prototype.type = 0;

                        /**
                         * SubtitleItem lanDocBrief.
                         * @member {string} lanDocBrief
                         * @memberof bilibili.community.service.dm.v1.SubtitleItem
                         * @instance
                         */
                        SubtitleItem.prototype.lanDocBrief = "";

                        /**
                         * SubtitleItem aiType.
                         * @member {bilibili.community.service.dm.v1.SubtitleAiType} aiType
                         * @memberof bilibili.community.service.dm.v1.SubtitleItem
                         * @instance
                         */
                        SubtitleItem.prototype.aiType = 0;

                        /**
                         * SubtitleItem aiStatus.
                         * @member {bilibili.community.service.dm.v1.SubtitleAiStatus} aiStatus
                         * @memberof bilibili.community.service.dm.v1.SubtitleItem
                         * @instance
                         */
                        SubtitleItem.prototype.aiStatus = 0;

                        /**
                         * Creates a new SubtitleItem instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.SubtitleItem
                         * @static
                         * @param {bilibili.community.service.dm.v1.ISubtitleItem=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.SubtitleItem} SubtitleItem instance
                         */
                        SubtitleItem.create = function create(properties) {
                            return new SubtitleItem(properties);
                        };

                        /**
                         * Encodes the specified SubtitleItem message. Does not implicitly {@link bilibili.community.service.dm.v1.SubtitleItem.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.SubtitleItem
                         * @static
                         * @param {bilibili.community.service.dm.v1.ISubtitleItem} message SubtitleItem message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SubtitleItem.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.id);
                            if (message.idStr != null && Object.hasOwnProperty.call(message, "idStr"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.idStr);
                            if (message.lan != null && Object.hasOwnProperty.call(message, "lan"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.lan);
                            if (message.lanDoc != null && Object.hasOwnProperty.call(message, "lanDoc"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.lanDoc);
                            if (message.subtitleUrl != null && Object.hasOwnProperty.call(message, "subtitleUrl"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.subtitleUrl);
                            if (message.author != null && Object.hasOwnProperty.call(message, "author"))
                                $root.bilibili.community.service.dm.v1.UserInfo.encode(message.author, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.type);
                            if (message.lanDocBrief != null && Object.hasOwnProperty.call(message, "lanDocBrief"))
                                writer.uint32(/* id 8, wireType 2 =*/66).string(message.lanDocBrief);
                            if (message.aiType != null && Object.hasOwnProperty.call(message, "aiType"))
                                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.aiType);
                            if (message.aiStatus != null && Object.hasOwnProperty.call(message, "aiStatus"))
                                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.aiStatus);
                            return writer;
                        };

                        /**
                         * Encodes the specified SubtitleItem message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.SubtitleItem.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.SubtitleItem
                         * @static
                         * @param {bilibili.community.service.dm.v1.ISubtitleItem} message SubtitleItem message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        SubtitleItem.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a SubtitleItem message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.SubtitleItem
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.SubtitleItem} SubtitleItem
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SubtitleItem.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.SubtitleItem();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.id = reader.int64();
                                        break;
                                    }
                                case 2: {
                                        message.idStr = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.lan = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.lanDoc = reader.string();
                                        break;
                                    }
                                case 5: {
                                        message.subtitleUrl = reader.string();
                                        break;
                                    }
                                case 6: {
                                        message.author = $root.bilibili.community.service.dm.v1.UserInfo.decode(reader, reader.uint32());
                                        break;
                                    }
                                case 7: {
                                        message.type = reader.int32();
                                        break;
                                    }
                                case 8: {
                                        message.lanDocBrief = reader.string();
                                        break;
                                    }
                                case 9: {
                                        message.aiType = reader.int32();
                                        break;
                                    }
                                case 10: {
                                        message.aiStatus = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a SubtitleItem message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.SubtitleItem
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.SubtitleItem} SubtitleItem
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        SubtitleItem.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a SubtitleItem message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.SubtitleItem
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        SubtitleItem.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                                    return "id: integer|Long expected";
                            if (message.idStr != null && message.hasOwnProperty("idStr"))
                                if (!$util.isString(message.idStr))
                                    return "idStr: string expected";
                            if (message.lan != null && message.hasOwnProperty("lan"))
                                if (!$util.isString(message.lan))
                                    return "lan: string expected";
                            if (message.lanDoc != null && message.hasOwnProperty("lanDoc"))
                                if (!$util.isString(message.lanDoc))
                                    return "lanDoc: string expected";
                            if (message.subtitleUrl != null && message.hasOwnProperty("subtitleUrl"))
                                if (!$util.isString(message.subtitleUrl))
                                    return "subtitleUrl: string expected";
                            if (message.author != null && message.hasOwnProperty("author")) {
                                let error = $root.bilibili.community.service.dm.v1.UserInfo.verify(message.author);
                                if (error)
                                    return "author." + error;
                            }
                            if (message.type != null && message.hasOwnProperty("type"))
                                switch (message.type) {
                                default:
                                    return "type: enum value expected";
                                case 0:
                                case 1:
                                    break;
                                }
                            if (message.lanDocBrief != null && message.hasOwnProperty("lanDocBrief"))
                                if (!$util.isString(message.lanDocBrief))
                                    return "lanDocBrief: string expected";
                            if (message.aiType != null && message.hasOwnProperty("aiType"))
                                switch (message.aiType) {
                                default:
                                    return "aiType: enum value expected";
                                case 0:
                                case 1:
                                    break;
                                }
                            if (message.aiStatus != null && message.hasOwnProperty("aiStatus"))
                                switch (message.aiStatus) {
                                default:
                                    return "aiStatus: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            return null;
                        };

                        /**
                         * Creates a SubtitleItem message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.SubtitleItem
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.SubtitleItem} SubtitleItem
                         */
                        SubtitleItem.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.SubtitleItem)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.SubtitleItem();
                            if (object.id != null)
                                if ($util.Long)
                                    (message.id = $util.Long.fromValue(object.id)).unsigned = false;
                                else if (typeof object.id === "string")
                                    message.id = parseInt(object.id, 10);
                                else if (typeof object.id === "number")
                                    message.id = object.id;
                                else if (typeof object.id === "object")
                                    message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber();
                            if (object.idStr != null)
                                message.idStr = String(object.idStr);
                            if (object.lan != null)
                                message.lan = String(object.lan);
                            if (object.lanDoc != null)
                                message.lanDoc = String(object.lanDoc);
                            if (object.subtitleUrl != null)
                                message.subtitleUrl = String(object.subtitleUrl);
                            if (object.author != null) {
                                if (typeof object.author !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.SubtitleItem.author: object expected");
                                message.author = $root.bilibili.community.service.dm.v1.UserInfo.fromObject(object.author);
                            }
                            switch (object.type) {
                            default:
                                if (typeof object.type === "number") {
                                    message.type = object.type;
                                    break;
                                }
                                break;
                            case "CC":
                            case 0:
                                message.type = 0;
                                break;
                            case "AI":
                            case 1:
                                message.type = 1;
                                break;
                            }
                            if (object.lanDocBrief != null)
                                message.lanDocBrief = String(object.lanDocBrief);
                            switch (object.aiType) {
                            default:
                                if (typeof object.aiType === "number") {
                                    message.aiType = object.aiType;
                                    break;
                                }
                                break;
                            case "Normal":
                            case 0:
                                message.aiType = 0;
                                break;
                            case "Translate":
                            case 1:
                                message.aiType = 1;
                                break;
                            }
                            switch (object.aiStatus) {
                            default:
                                if (typeof object.aiStatus === "number") {
                                    message.aiStatus = object.aiStatus;
                                    break;
                                }
                                break;
                            case "None":
                            case 0:
                                message.aiStatus = 0;
                                break;
                            case "Exposure":
                            case 1:
                                message.aiStatus = 1;
                                break;
                            case "Assist":
                            case 2:
                                message.aiStatus = 2;
                                break;
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a SubtitleItem message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.SubtitleItem
                         * @static
                         * @param {bilibili.community.service.dm.v1.SubtitleItem} message SubtitleItem
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        SubtitleItem.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.id = options.longs === String ? "0" : 0;
                                object.idStr = "";
                                object.lan = "";
                                object.lanDoc = "";
                                object.subtitleUrl = "";
                                object.author = null;
                                object.type = options.enums === String ? "CC" : 0;
                                object.lanDocBrief = "";
                                object.aiType = options.enums === String ? "Normal" : 0;
                                object.aiStatus = options.enums === String ? "None" : 0;
                            }
                            if (message.id != null && message.hasOwnProperty("id"))
                                if (typeof message.id === "number")
                                    object.id = options.longs === String ? String(message.id) : message.id;
                                else
                                    object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber() : message.id;
                            if (message.idStr != null && message.hasOwnProperty("idStr"))
                                object.idStr = message.idStr;
                            if (message.lan != null && message.hasOwnProperty("lan"))
                                object.lan = message.lan;
                            if (message.lanDoc != null && message.hasOwnProperty("lanDoc"))
                                object.lanDoc = message.lanDoc;
                            if (message.subtitleUrl != null && message.hasOwnProperty("subtitleUrl"))
                                object.subtitleUrl = message.subtitleUrl;
                            if (message.author != null && message.hasOwnProperty("author"))
                                object.author = $root.bilibili.community.service.dm.v1.UserInfo.toObject(message.author, options);
                            if (message.type != null && message.hasOwnProperty("type"))
                                object.type = options.enums === String ? $root.bilibili.community.service.dm.v1.SubtitleType[message.type] === undefined ? message.type : $root.bilibili.community.service.dm.v1.SubtitleType[message.type] : message.type;
                            if (message.lanDocBrief != null && message.hasOwnProperty("lanDocBrief"))
                                object.lanDocBrief = message.lanDocBrief;
                            if (message.aiType != null && message.hasOwnProperty("aiType"))
                                object.aiType = options.enums === String ? $root.bilibili.community.service.dm.v1.SubtitleAiType[message.aiType] === undefined ? message.aiType : $root.bilibili.community.service.dm.v1.SubtitleAiType[message.aiType] : message.aiType;
                            if (message.aiStatus != null && message.hasOwnProperty("aiStatus"))
                                object.aiStatus = options.enums === String ? $root.bilibili.community.service.dm.v1.SubtitleAiStatus[message.aiStatus] === undefined ? message.aiStatus : $root.bilibili.community.service.dm.v1.SubtitleAiStatus[message.aiStatus] : message.aiStatus;
                            return object;
                        };

                        /**
                         * Converts this SubtitleItem to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.SubtitleItem
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        SubtitleItem.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for SubtitleItem
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.SubtitleItem
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        SubtitleItem.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.SubtitleItem";
                        };

                        return SubtitleItem;
                    })();

                    /**
                     * SubtitleType enum.
                     * @name bilibili.community.service.dm.v1.SubtitleType
                     * @enum {number}
                     * @property {number} CC=0 CC value
                     * @property {number} AI=1 AI value
                     */
                    v1.SubtitleType = (function() {
                        const valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "CC"] = 0;
                        values[valuesById[1] = "AI"] = 1;
                        return values;
                    })();

                    v1.TextInput = (function() {

                        /**
                         * Properties of a TextInput.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface ITextInput
                         * @property {Array.<string>|null} [portraitPlaceholder] TextInput portraitPlaceholder
                         * @property {Array.<string>|null} [landscapePlaceholder] TextInput landscapePlaceholder
                         * @property {bilibili.community.service.dm.v1.RenderType|null} [renderType] TextInput renderType
                         * @property {boolean|null} [placeholderPost] TextInput placeholderPost
                         * @property {boolean|null} [show] TextInput show
                         * @property {Array.<bilibili.community.service.dm.v1.IAvatar>|null} [avatar] TextInput avatar
                         * @property {bilibili.community.service.dm.v1.PostStatus|null} [postStatus] TextInput postStatus
                         * @property {bilibili.community.service.dm.v1.ILabel|null} [label] TextInput label
                         */

                        /**
                         * Constructs a new TextInput.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a TextInput.
                         * @implements ITextInput
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.ITextInput=} [properties] Properties to set
                         */
                        function TextInput(properties) {
                            this.portraitPlaceholder = [];
                            this.landscapePlaceholder = [];
                            this.avatar = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * TextInput portraitPlaceholder.
                         * @member {Array.<string>} portraitPlaceholder
                         * @memberof bilibili.community.service.dm.v1.TextInput
                         * @instance
                         */
                        TextInput.prototype.portraitPlaceholder = $util.emptyArray;

                        /**
                         * TextInput landscapePlaceholder.
                         * @member {Array.<string>} landscapePlaceholder
                         * @memberof bilibili.community.service.dm.v1.TextInput
                         * @instance
                         */
                        TextInput.prototype.landscapePlaceholder = $util.emptyArray;

                        /**
                         * TextInput renderType.
                         * @member {bilibili.community.service.dm.v1.RenderType} renderType
                         * @memberof bilibili.community.service.dm.v1.TextInput
                         * @instance
                         */
                        TextInput.prototype.renderType = 0;

                        /**
                         * TextInput placeholderPost.
                         * @member {boolean} placeholderPost
                         * @memberof bilibili.community.service.dm.v1.TextInput
                         * @instance
                         */
                        TextInput.prototype.placeholderPost = false;

                        /**
                         * TextInput show.
                         * @member {boolean} show
                         * @memberof bilibili.community.service.dm.v1.TextInput
                         * @instance
                         */
                        TextInput.prototype.show = false;

                        /**
                         * TextInput avatar.
                         * @member {Array.<bilibili.community.service.dm.v1.IAvatar>} avatar
                         * @memberof bilibili.community.service.dm.v1.TextInput
                         * @instance
                         */
                        TextInput.prototype.avatar = $util.emptyArray;

                        /**
                         * TextInput postStatus.
                         * @member {bilibili.community.service.dm.v1.PostStatus} postStatus
                         * @memberof bilibili.community.service.dm.v1.TextInput
                         * @instance
                         */
                        TextInput.prototype.postStatus = 0;

                        /**
                         * TextInput label.
                         * @member {bilibili.community.service.dm.v1.ILabel|null|undefined} label
                         * @memberof bilibili.community.service.dm.v1.TextInput
                         * @instance
                         */
                        TextInput.prototype.label = null;

                        /**
                         * Creates a new TextInput instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.TextInput
                         * @static
                         * @param {bilibili.community.service.dm.v1.ITextInput=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.TextInput} TextInput instance
                         */
                        TextInput.create = function create(properties) {
                            return new TextInput(properties);
                        };

                        /**
                         * Encodes the specified TextInput message. Does not implicitly {@link bilibili.community.service.dm.v1.TextInput.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.TextInput
                         * @static
                         * @param {bilibili.community.service.dm.v1.ITextInput} message TextInput message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextInput.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.portraitPlaceholder != null && message.portraitPlaceholder.length)
                                for (let i = 0; i < message.portraitPlaceholder.length; ++i)
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.portraitPlaceholder[i]);
                            if (message.landscapePlaceholder != null && message.landscapePlaceholder.length)
                                for (let i = 0; i < message.landscapePlaceholder.length; ++i)
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.landscapePlaceholder[i]);
                            if (message.renderType != null && Object.hasOwnProperty.call(message, "renderType"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.renderType);
                            if (message.placeholderPost != null && Object.hasOwnProperty.call(message, "placeholderPost"))
                                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.placeholderPost);
                            if (message.show != null && Object.hasOwnProperty.call(message, "show"))
                                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.show);
                            if (message.avatar != null && message.avatar.length)
                                for (let i = 0; i < message.avatar.length; ++i)
                                    $root.bilibili.community.service.dm.v1.Avatar.encode(message.avatar[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                            if (message.postStatus != null && Object.hasOwnProperty.call(message, "postStatus"))
                                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.postStatus);
                            if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                                $root.bilibili.community.service.dm.v1.Label.encode(message.label, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified TextInput message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.TextInput.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.TextInput
                         * @static
                         * @param {bilibili.community.service.dm.v1.ITextInput} message TextInput message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextInput.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a TextInput message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.TextInput
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.TextInput} TextInput
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextInput.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.TextInput();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.portraitPlaceholder && message.portraitPlaceholder.length))
                                            message.portraitPlaceholder = [];
                                        message.portraitPlaceholder.push(reader.string());
                                        break;
                                    }
                                case 2: {
                                        if (!(message.landscapePlaceholder && message.landscapePlaceholder.length))
                                            message.landscapePlaceholder = [];
                                        message.landscapePlaceholder.push(reader.string());
                                        break;
                                    }
                                case 3: {
                                        message.renderType = reader.int32();
                                        break;
                                    }
                                case 4: {
                                        message.placeholderPost = reader.bool();
                                        break;
                                    }
                                case 5: {
                                        message.show = reader.bool();
                                        break;
                                    }
                                case 6: {
                                        if (!(message.avatar && message.avatar.length))
                                            message.avatar = [];
                                        message.avatar.push($root.bilibili.community.service.dm.v1.Avatar.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 7: {
                                        message.postStatus = reader.int32();
                                        break;
                                    }
                                case 8: {
                                        message.label = $root.bilibili.community.service.dm.v1.Label.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a TextInput message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.TextInput
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.TextInput} TextInput
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextInput.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a TextInput message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.TextInput
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TextInput.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.portraitPlaceholder != null && message.hasOwnProperty("portraitPlaceholder")) {
                                if (!Array.isArray(message.portraitPlaceholder))
                                    return "portraitPlaceholder: array expected";
                                for (let i = 0; i < message.portraitPlaceholder.length; ++i)
                                    if (!$util.isString(message.portraitPlaceholder[i]))
                                        return "portraitPlaceholder: string[] expected";
                            }
                            if (message.landscapePlaceholder != null && message.hasOwnProperty("landscapePlaceholder")) {
                                if (!Array.isArray(message.landscapePlaceholder))
                                    return "landscapePlaceholder: array expected";
                                for (let i = 0; i < message.landscapePlaceholder.length; ++i)
                                    if (!$util.isString(message.landscapePlaceholder[i]))
                                        return "landscapePlaceholder: string[] expected";
                            }
                            if (message.renderType != null && message.hasOwnProperty("renderType"))
                                switch (message.renderType) {
                                default:
                                    return "renderType: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.placeholderPost != null && message.hasOwnProperty("placeholderPost"))
                                if (typeof message.placeholderPost !== "boolean")
                                    return "placeholderPost: boolean expected";
                            if (message.show != null && message.hasOwnProperty("show"))
                                if (typeof message.show !== "boolean")
                                    return "show: boolean expected";
                            if (message.avatar != null && message.hasOwnProperty("avatar")) {
                                if (!Array.isArray(message.avatar))
                                    return "avatar: array expected";
                                for (let i = 0; i < message.avatar.length; ++i) {
                                    let error = $root.bilibili.community.service.dm.v1.Avatar.verify(message.avatar[i]);
                                    if (error)
                                        return "avatar." + error;
                                }
                            }
                            if (message.postStatus != null && message.hasOwnProperty("postStatus"))
                                switch (message.postStatus) {
                                default:
                                    return "postStatus: enum value expected";
                                case 0:
                                case 1:
                                    break;
                                }
                            if (message.label != null && message.hasOwnProperty("label")) {
                                let error = $root.bilibili.community.service.dm.v1.Label.verify(message.label);
                                if (error)
                                    return "label." + error;
                            }
                            return null;
                        };

                        /**
                         * Creates a TextInput message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.TextInput
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.TextInput} TextInput
                         */
                        TextInput.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.TextInput)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.TextInput();
                            if (object.portraitPlaceholder) {
                                if (!Array.isArray(object.portraitPlaceholder))
                                    throw TypeError(".bilibili.community.service.dm.v1.TextInput.portraitPlaceholder: array expected");
                                message.portraitPlaceholder = [];
                                for (let i = 0; i < object.portraitPlaceholder.length; ++i)
                                    message.portraitPlaceholder[i] = String(object.portraitPlaceholder[i]);
                            }
                            if (object.landscapePlaceholder) {
                                if (!Array.isArray(object.landscapePlaceholder))
                                    throw TypeError(".bilibili.community.service.dm.v1.TextInput.landscapePlaceholder: array expected");
                                message.landscapePlaceholder = [];
                                for (let i = 0; i < object.landscapePlaceholder.length; ++i)
                                    message.landscapePlaceholder[i] = String(object.landscapePlaceholder[i]);
                            }
                            switch (object.renderType) {
                            default:
                                if (typeof object.renderType === "number") {
                                    message.renderType = object.renderType;
                                    break;
                                }
                                break;
                            case "RenderTypeNone":
                            case 0:
                                message.renderType = 0;
                                break;
                            case "RenderTypeSingle":
                            case 1:
                                message.renderType = 1;
                                break;
                            case "RenderTypeRotation":
                            case 2:
                                message.renderType = 2;
                                break;
                            }
                            if (object.placeholderPost != null)
                                message.placeholderPost = Boolean(object.placeholderPost);
                            if (object.show != null)
                                message.show = Boolean(object.show);
                            if (object.avatar) {
                                if (!Array.isArray(object.avatar))
                                    throw TypeError(".bilibili.community.service.dm.v1.TextInput.avatar: array expected");
                                message.avatar = [];
                                for (let i = 0; i < object.avatar.length; ++i) {
                                    if (typeof object.avatar[i] !== "object")
                                        throw TypeError(".bilibili.community.service.dm.v1.TextInput.avatar: object expected");
                                    message.avatar[i] = $root.bilibili.community.service.dm.v1.Avatar.fromObject(object.avatar[i]);
                                }
                            }
                            switch (object.postStatus) {
                            default:
                                if (typeof object.postStatus === "number") {
                                    message.postStatus = object.postStatus;
                                    break;
                                }
                                break;
                            case "PostStatusNormal":
                            case 0:
                                message.postStatus = 0;
                                break;
                            case "PostStatusClosed":
                            case 1:
                                message.postStatus = 1;
                                break;
                            }
                            if (object.label != null) {
                                if (typeof object.label !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.TextInput.label: object expected");
                                message.label = $root.bilibili.community.service.dm.v1.Label.fromObject(object.label);
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a TextInput message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.TextInput
                         * @static
                         * @param {bilibili.community.service.dm.v1.TextInput} message TextInput
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TextInput.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults) {
                                object.portraitPlaceholder = [];
                                object.landscapePlaceholder = [];
                                object.avatar = [];
                            }
                            if (options.defaults) {
                                object.renderType = options.enums === String ? "RenderTypeNone" : 0;
                                object.placeholderPost = false;
                                object.show = false;
                                object.postStatus = options.enums === String ? "PostStatusNormal" : 0;
                                object.label = null;
                            }
                            if (message.portraitPlaceholder && message.portraitPlaceholder.length) {
                                object.portraitPlaceholder = [];
                                for (let j = 0; j < message.portraitPlaceholder.length; ++j)
                                    object.portraitPlaceholder[j] = message.portraitPlaceholder[j];
                            }
                            if (message.landscapePlaceholder && message.landscapePlaceholder.length) {
                                object.landscapePlaceholder = [];
                                for (let j = 0; j < message.landscapePlaceholder.length; ++j)
                                    object.landscapePlaceholder[j] = message.landscapePlaceholder[j];
                            }
                            if (message.renderType != null && message.hasOwnProperty("renderType"))
                                object.renderType = options.enums === String ? $root.bilibili.community.service.dm.v1.RenderType[message.renderType] === undefined ? message.renderType : $root.bilibili.community.service.dm.v1.RenderType[message.renderType] : message.renderType;
                            if (message.placeholderPost != null && message.hasOwnProperty("placeholderPost"))
                                object.placeholderPost = message.placeholderPost;
                            if (message.show != null && message.hasOwnProperty("show"))
                                object.show = message.show;
                            if (message.avatar && message.avatar.length) {
                                object.avatar = [];
                                for (let j = 0; j < message.avatar.length; ++j)
                                    object.avatar[j] = $root.bilibili.community.service.dm.v1.Avatar.toObject(message.avatar[j], options);
                            }
                            if (message.postStatus != null && message.hasOwnProperty("postStatus"))
                                object.postStatus = options.enums === String ? $root.bilibili.community.service.dm.v1.PostStatus[message.postStatus] === undefined ? message.postStatus : $root.bilibili.community.service.dm.v1.PostStatus[message.postStatus] : message.postStatus;
                            if (message.label != null && message.hasOwnProperty("label"))
                                object.label = $root.bilibili.community.service.dm.v1.Label.toObject(message.label, options);
                            return object;
                        };

                        /**
                         * Converts this TextInput to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.TextInput
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TextInput.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for TextInput
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.TextInput
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TextInput.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.TextInput";
                        };

                        return TextInput;
                    })();

                    v1.TextInputV2 = (function() {

                        /**
                         * Properties of a TextInputV2.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface ITextInputV2
                         * @property {Array.<string>|null} [portraitPlaceholder] TextInputV2 portraitPlaceholder
                         * @property {Array.<string>|null} [landscapePlaceholder] TextInputV2 landscapePlaceholder
                         * @property {bilibili.community.service.dm.v1.RenderType|null} [renderType] TextInputV2 renderType
                         * @property {boolean|null} [placeholderPost] TextInputV2 placeholderPost
                         * @property {Array.<bilibili.community.service.dm.v1.IAvatar>|null} [avatar] TextInputV2 avatar
                         * @property {number|null} [textInputLimit] TextInputV2 textInputLimit
                         */

                        /**
                         * Constructs a new TextInputV2.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a TextInputV2.
                         * @implements ITextInputV2
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.ITextInputV2=} [properties] Properties to set
                         */
                        function TextInputV2(properties) {
                            this.portraitPlaceholder = [];
                            this.landscapePlaceholder = [];
                            this.avatar = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * TextInputV2 portraitPlaceholder.
                         * @member {Array.<string>} portraitPlaceholder
                         * @memberof bilibili.community.service.dm.v1.TextInputV2
                         * @instance
                         */
                        TextInputV2.prototype.portraitPlaceholder = $util.emptyArray;

                        /**
                         * TextInputV2 landscapePlaceholder.
                         * @member {Array.<string>} landscapePlaceholder
                         * @memberof bilibili.community.service.dm.v1.TextInputV2
                         * @instance
                         */
                        TextInputV2.prototype.landscapePlaceholder = $util.emptyArray;

                        /**
                         * TextInputV2 renderType.
                         * @member {bilibili.community.service.dm.v1.RenderType} renderType
                         * @memberof bilibili.community.service.dm.v1.TextInputV2
                         * @instance
                         */
                        TextInputV2.prototype.renderType = 0;

                        /**
                         * TextInputV2 placeholderPost.
                         * @member {boolean} placeholderPost
                         * @memberof bilibili.community.service.dm.v1.TextInputV2
                         * @instance
                         */
                        TextInputV2.prototype.placeholderPost = false;

                        /**
                         * TextInputV2 avatar.
                         * @member {Array.<bilibili.community.service.dm.v1.IAvatar>} avatar
                         * @memberof bilibili.community.service.dm.v1.TextInputV2
                         * @instance
                         */
                        TextInputV2.prototype.avatar = $util.emptyArray;

                        /**
                         * TextInputV2 textInputLimit.
                         * @member {number} textInputLimit
                         * @memberof bilibili.community.service.dm.v1.TextInputV2
                         * @instance
                         */
                        TextInputV2.prototype.textInputLimit = 0;

                        /**
                         * Creates a new TextInputV2 instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.TextInputV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.ITextInputV2=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.TextInputV2} TextInputV2 instance
                         */
                        TextInputV2.create = function create(properties) {
                            return new TextInputV2(properties);
                        };

                        /**
                         * Encodes the specified TextInputV2 message. Does not implicitly {@link bilibili.community.service.dm.v1.TextInputV2.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.TextInputV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.ITextInputV2} message TextInputV2 message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextInputV2.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.portraitPlaceholder != null && message.portraitPlaceholder.length)
                                for (let i = 0; i < message.portraitPlaceholder.length; ++i)
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.portraitPlaceholder[i]);
                            if (message.landscapePlaceholder != null && message.landscapePlaceholder.length)
                                for (let i = 0; i < message.landscapePlaceholder.length; ++i)
                                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.landscapePlaceholder[i]);
                            if (message.renderType != null && Object.hasOwnProperty.call(message, "renderType"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.renderType);
                            if (message.placeholderPost != null && Object.hasOwnProperty.call(message, "placeholderPost"))
                                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.placeholderPost);
                            if (message.avatar != null && message.avatar.length)
                                for (let i = 0; i < message.avatar.length; ++i)
                                    $root.bilibili.community.service.dm.v1.Avatar.encode(message.avatar[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                            if (message.textInputLimit != null && Object.hasOwnProperty.call(message, "textInputLimit"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.textInputLimit);
                            return writer;
                        };

                        /**
                         * Encodes the specified TextInputV2 message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.TextInputV2.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.TextInputV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.ITextInputV2} message TextInputV2 message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        TextInputV2.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a TextInputV2 message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.TextInputV2
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.TextInputV2} TextInputV2
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextInputV2.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.TextInputV2();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        if (!(message.portraitPlaceholder && message.portraitPlaceholder.length))
                                            message.portraitPlaceholder = [];
                                        message.portraitPlaceholder.push(reader.string());
                                        break;
                                    }
                                case 2: {
                                        if (!(message.landscapePlaceholder && message.landscapePlaceholder.length))
                                            message.landscapePlaceholder = [];
                                        message.landscapePlaceholder.push(reader.string());
                                        break;
                                    }
                                case 3: {
                                        message.renderType = reader.int32();
                                        break;
                                    }
                                case 4: {
                                        message.placeholderPost = reader.bool();
                                        break;
                                    }
                                case 5: {
                                        if (!(message.avatar && message.avatar.length))
                                            message.avatar = [];
                                        message.avatar.push($root.bilibili.community.service.dm.v1.Avatar.decode(reader, reader.uint32()));
                                        break;
                                    }
                                case 6: {
                                        message.textInputLimit = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a TextInputV2 message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.TextInputV2
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.TextInputV2} TextInputV2
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        TextInputV2.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a TextInputV2 message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.TextInputV2
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        TextInputV2.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.portraitPlaceholder != null && message.hasOwnProperty("portraitPlaceholder")) {
                                if (!Array.isArray(message.portraitPlaceholder))
                                    return "portraitPlaceholder: array expected";
                                for (let i = 0; i < message.portraitPlaceholder.length; ++i)
                                    if (!$util.isString(message.portraitPlaceholder[i]))
                                        return "portraitPlaceholder: string[] expected";
                            }
                            if (message.landscapePlaceholder != null && message.hasOwnProperty("landscapePlaceholder")) {
                                if (!Array.isArray(message.landscapePlaceholder))
                                    return "landscapePlaceholder: array expected";
                                for (let i = 0; i < message.landscapePlaceholder.length; ++i)
                                    if (!$util.isString(message.landscapePlaceholder[i]))
                                        return "landscapePlaceholder: string[] expected";
                            }
                            if (message.renderType != null && message.hasOwnProperty("renderType"))
                                switch (message.renderType) {
                                default:
                                    return "renderType: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.placeholderPost != null && message.hasOwnProperty("placeholderPost"))
                                if (typeof message.placeholderPost !== "boolean")
                                    return "placeholderPost: boolean expected";
                            if (message.avatar != null && message.hasOwnProperty("avatar")) {
                                if (!Array.isArray(message.avatar))
                                    return "avatar: array expected";
                                for (let i = 0; i < message.avatar.length; ++i) {
                                    let error = $root.bilibili.community.service.dm.v1.Avatar.verify(message.avatar[i]);
                                    if (error)
                                        return "avatar." + error;
                                }
                            }
                            if (message.textInputLimit != null && message.hasOwnProperty("textInputLimit"))
                                if (!$util.isInteger(message.textInputLimit))
                                    return "textInputLimit: integer expected";
                            return null;
                        };

                        /**
                         * Creates a TextInputV2 message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.TextInputV2
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.TextInputV2} TextInputV2
                         */
                        TextInputV2.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.TextInputV2)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.TextInputV2();
                            if (object.portraitPlaceholder) {
                                if (!Array.isArray(object.portraitPlaceholder))
                                    throw TypeError(".bilibili.community.service.dm.v1.TextInputV2.portraitPlaceholder: array expected");
                                message.portraitPlaceholder = [];
                                for (let i = 0; i < object.portraitPlaceholder.length; ++i)
                                    message.portraitPlaceholder[i] = String(object.portraitPlaceholder[i]);
                            }
                            if (object.landscapePlaceholder) {
                                if (!Array.isArray(object.landscapePlaceholder))
                                    throw TypeError(".bilibili.community.service.dm.v1.TextInputV2.landscapePlaceholder: array expected");
                                message.landscapePlaceholder = [];
                                for (let i = 0; i < object.landscapePlaceholder.length; ++i)
                                    message.landscapePlaceholder[i] = String(object.landscapePlaceholder[i]);
                            }
                            switch (object.renderType) {
                            default:
                                if (typeof object.renderType === "number") {
                                    message.renderType = object.renderType;
                                    break;
                                }
                                break;
                            case "RenderTypeNone":
                            case 0:
                                message.renderType = 0;
                                break;
                            case "RenderTypeSingle":
                            case 1:
                                message.renderType = 1;
                                break;
                            case "RenderTypeRotation":
                            case 2:
                                message.renderType = 2;
                                break;
                            }
                            if (object.placeholderPost != null)
                                message.placeholderPost = Boolean(object.placeholderPost);
                            if (object.avatar) {
                                if (!Array.isArray(object.avatar))
                                    throw TypeError(".bilibili.community.service.dm.v1.TextInputV2.avatar: array expected");
                                message.avatar = [];
                                for (let i = 0; i < object.avatar.length; ++i) {
                                    if (typeof object.avatar[i] !== "object")
                                        throw TypeError(".bilibili.community.service.dm.v1.TextInputV2.avatar: object expected");
                                    message.avatar[i] = $root.bilibili.community.service.dm.v1.Avatar.fromObject(object.avatar[i]);
                                }
                            }
                            if (object.textInputLimit != null)
                                message.textInputLimit = object.textInputLimit | 0;
                            return message;
                        };

                        /**
                         * Creates a plain object from a TextInputV2 message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.TextInputV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.TextInputV2} message TextInputV2
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        TextInputV2.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults) {
                                object.portraitPlaceholder = [];
                                object.landscapePlaceholder = [];
                                object.avatar = [];
                            }
                            if (options.defaults) {
                                object.renderType = options.enums === String ? "RenderTypeNone" : 0;
                                object.placeholderPost = false;
                                object.textInputLimit = 0;
                            }
                            if (message.portraitPlaceholder && message.portraitPlaceholder.length) {
                                object.portraitPlaceholder = [];
                                for (let j = 0; j < message.portraitPlaceholder.length; ++j)
                                    object.portraitPlaceholder[j] = message.portraitPlaceholder[j];
                            }
                            if (message.landscapePlaceholder && message.landscapePlaceholder.length) {
                                object.landscapePlaceholder = [];
                                for (let j = 0; j < message.landscapePlaceholder.length; ++j)
                                    object.landscapePlaceholder[j] = message.landscapePlaceholder[j];
                            }
                            if (message.renderType != null && message.hasOwnProperty("renderType"))
                                object.renderType = options.enums === String ? $root.bilibili.community.service.dm.v1.RenderType[message.renderType] === undefined ? message.renderType : $root.bilibili.community.service.dm.v1.RenderType[message.renderType] : message.renderType;
                            if (message.placeholderPost != null && message.hasOwnProperty("placeholderPost"))
                                object.placeholderPost = message.placeholderPost;
                            if (message.avatar && message.avatar.length) {
                                object.avatar = [];
                                for (let j = 0; j < message.avatar.length; ++j)
                                    object.avatar[j] = $root.bilibili.community.service.dm.v1.Avatar.toObject(message.avatar[j], options);
                            }
                            if (message.textInputLimit != null && message.hasOwnProperty("textInputLimit"))
                                object.textInputLimit = message.textInputLimit;
                            return object;
                        };

                        /**
                         * Converts this TextInputV2 to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.TextInputV2
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        TextInputV2.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for TextInputV2
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.TextInputV2
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        TextInputV2.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.TextInputV2";
                        };

                        return TextInputV2;
                    })();

                    v1.Toast = (function() {

                        /**
                         * Properties of a Toast.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IToast
                         * @property {string|null} [text] Toast text
                         * @property {number|null} [duration] Toast duration
                         * @property {boolean|null} [show] Toast show
                         * @property {bilibili.community.service.dm.v1.IButton|null} [button] Toast button
                         */

                        /**
                         * Constructs a new Toast.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a Toast.
                         * @implements IToast
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IToast=} [properties] Properties to set
                         */
                        function Toast(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Toast text.
                         * @member {string} text
                         * @memberof bilibili.community.service.dm.v1.Toast
                         * @instance
                         */
                        Toast.prototype.text = "";

                        /**
                         * Toast duration.
                         * @member {number} duration
                         * @memberof bilibili.community.service.dm.v1.Toast
                         * @instance
                         */
                        Toast.prototype.duration = 0;

                        /**
                         * Toast show.
                         * @member {boolean} show
                         * @memberof bilibili.community.service.dm.v1.Toast
                         * @instance
                         */
                        Toast.prototype.show = false;

                        /**
                         * Toast button.
                         * @member {bilibili.community.service.dm.v1.IButton|null|undefined} button
                         * @memberof bilibili.community.service.dm.v1.Toast
                         * @instance
                         */
                        Toast.prototype.button = null;

                        /**
                         * Creates a new Toast instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.Toast
                         * @static
                         * @param {bilibili.community.service.dm.v1.IToast=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.Toast} Toast instance
                         */
                        Toast.create = function create(properties) {
                            return new Toast(properties);
                        };

                        /**
                         * Encodes the specified Toast message. Does not implicitly {@link bilibili.community.service.dm.v1.Toast.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.Toast
                         * @static
                         * @param {bilibili.community.service.dm.v1.IToast} message Toast message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Toast.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);
                            if (message.duration != null && Object.hasOwnProperty.call(message, "duration"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.duration);
                            if (message.show != null && Object.hasOwnProperty.call(message, "show"))
                                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.show);
                            if (message.button != null && Object.hasOwnProperty.call(message, "button"))
                                $root.bilibili.community.service.dm.v1.Button.encode(message.button, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified Toast message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.Toast.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.Toast
                         * @static
                         * @param {bilibili.community.service.dm.v1.IToast} message Toast message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Toast.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Toast message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.Toast
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.Toast} Toast
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Toast.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.Toast();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.text = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.duration = reader.int32();
                                        break;
                                    }
                                case 3: {
                                        message.show = reader.bool();
                                        break;
                                    }
                                case 4: {
                                        message.button = $root.bilibili.community.service.dm.v1.Button.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Toast message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.Toast
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.Toast} Toast
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Toast.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Toast message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.Toast
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Toast.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.text != null && message.hasOwnProperty("text"))
                                if (!$util.isString(message.text))
                                    return "text: string expected";
                            if (message.duration != null && message.hasOwnProperty("duration"))
                                if (!$util.isInteger(message.duration))
                                    return "duration: integer expected";
                            if (message.show != null && message.hasOwnProperty("show"))
                                if (typeof message.show !== "boolean")
                                    return "show: boolean expected";
                            if (message.button != null && message.hasOwnProperty("button")) {
                                let error = $root.bilibili.community.service.dm.v1.Button.verify(message.button);
                                if (error)
                                    return "button." + error;
                            }
                            return null;
                        };

                        /**
                         * Creates a Toast message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.Toast
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.Toast} Toast
                         */
                        Toast.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.Toast)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.Toast();
                            if (object.text != null)
                                message.text = String(object.text);
                            if (object.duration != null)
                                message.duration = object.duration | 0;
                            if (object.show != null)
                                message.show = Boolean(object.show);
                            if (object.button != null) {
                                if (typeof object.button !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.Toast.button: object expected");
                                message.button = $root.bilibili.community.service.dm.v1.Button.fromObject(object.button);
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a Toast message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.Toast
                         * @static
                         * @param {bilibili.community.service.dm.v1.Toast} message Toast
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Toast.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.text = "";
                                object.duration = 0;
                                object.show = false;
                                object.button = null;
                            }
                            if (message.text != null && message.hasOwnProperty("text"))
                                object.text = message.text;
                            if (message.duration != null && message.hasOwnProperty("duration"))
                                object.duration = message.duration;
                            if (message.show != null && message.hasOwnProperty("show"))
                                object.show = message.show;
                            if (message.button != null && message.hasOwnProperty("button"))
                                object.button = $root.bilibili.community.service.dm.v1.Button.toObject(message.button, options);
                            return object;
                        };

                        /**
                         * Converts this Toast to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.Toast
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Toast.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for Toast
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.Toast
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Toast.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.Toast";
                        };

                        return Toast;
                    })();

                    v1.ToastButtonV2 = (function() {

                        /**
                         * Properties of a ToastButtonV2.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IToastButtonV2
                         * @property {string|null} [text] ToastButtonV2 text
                         * @property {number|null} [action] ToastButtonV2 action
                         */

                        /**
                         * Constructs a new ToastButtonV2.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a ToastButtonV2.
                         * @implements IToastButtonV2
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IToastButtonV2=} [properties] Properties to set
                         */
                        function ToastButtonV2(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * ToastButtonV2 text.
                         * @member {string} text
                         * @memberof bilibili.community.service.dm.v1.ToastButtonV2
                         * @instance
                         */
                        ToastButtonV2.prototype.text = "";

                        /**
                         * ToastButtonV2 action.
                         * @member {number} action
                         * @memberof bilibili.community.service.dm.v1.ToastButtonV2
                         * @instance
                         */
                        ToastButtonV2.prototype.action = 0;

                        /**
                         * Creates a new ToastButtonV2 instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.ToastButtonV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.IToastButtonV2=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.ToastButtonV2} ToastButtonV2 instance
                         */
                        ToastButtonV2.create = function create(properties) {
                            return new ToastButtonV2(properties);
                        };

                        /**
                         * Encodes the specified ToastButtonV2 message. Does not implicitly {@link bilibili.community.service.dm.v1.ToastButtonV2.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.ToastButtonV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.IToastButtonV2} message ToastButtonV2 message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ToastButtonV2.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);
                            if (message.action != null && Object.hasOwnProperty.call(message, "action"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.action);
                            return writer;
                        };

                        /**
                         * Encodes the specified ToastButtonV2 message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.ToastButtonV2.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.ToastButtonV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.IToastButtonV2} message ToastButtonV2 message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ToastButtonV2.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a ToastButtonV2 message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.ToastButtonV2
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.ToastButtonV2} ToastButtonV2
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ToastButtonV2.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.ToastButtonV2();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.text = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.action = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a ToastButtonV2 message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.ToastButtonV2
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.ToastButtonV2} ToastButtonV2
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ToastButtonV2.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a ToastButtonV2 message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.ToastButtonV2
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ToastButtonV2.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.text != null && message.hasOwnProperty("text"))
                                if (!$util.isString(message.text))
                                    return "text: string expected";
                            if (message.action != null && message.hasOwnProperty("action"))
                                if (!$util.isInteger(message.action))
                                    return "action: integer expected";
                            return null;
                        };

                        /**
                         * Creates a ToastButtonV2 message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.ToastButtonV2
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.ToastButtonV2} ToastButtonV2
                         */
                        ToastButtonV2.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.ToastButtonV2)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.ToastButtonV2();
                            if (object.text != null)
                                message.text = String(object.text);
                            if (object.action != null)
                                message.action = object.action | 0;
                            return message;
                        };

                        /**
                         * Creates a plain object from a ToastButtonV2 message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.ToastButtonV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.ToastButtonV2} message ToastButtonV2
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ToastButtonV2.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.text = "";
                                object.action = 0;
                            }
                            if (message.text != null && message.hasOwnProperty("text"))
                                object.text = message.text;
                            if (message.action != null && message.hasOwnProperty("action"))
                                object.action = message.action;
                            return object;
                        };

                        /**
                         * Converts this ToastButtonV2 to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.ToastButtonV2
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ToastButtonV2.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for ToastButtonV2
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.ToastButtonV2
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ToastButtonV2.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.ToastButtonV2";
                        };

                        return ToastButtonV2;
                    })();

                    /**
                     * ToastFunctionType enum.
                     * @name bilibili.community.service.dm.v1.ToastFunctionType
                     * @enum {number}
                     * @property {number} ToastFunctionTypeNone=0 ToastFunctionTypeNone value
                     * @property {number} ToastFunctionTypePostPanel=1 ToastFunctionTypePostPanel value
                     */
                    v1.ToastFunctionType = (function() {
                        const valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "ToastFunctionTypeNone"] = 0;
                        values[valuesById[1] = "ToastFunctionTypePostPanel"] = 1;
                        return values;
                    })();

                    v1.ToastV2 = (function() {

                        /**
                         * Properties of a ToastV2.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IToastV2
                         * @property {string|null} [text] ToastV2 text
                         * @property {number|null} [duration] ToastV2 duration
                         * @property {bilibili.community.service.dm.v1.IToastButtonV2|null} [toastButtonV2] ToastV2 toastButtonV2
                         */

                        /**
                         * Constructs a new ToastV2.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a ToastV2.
                         * @implements IToastV2
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IToastV2=} [properties] Properties to set
                         */
                        function ToastV2(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * ToastV2 text.
                         * @member {string} text
                         * @memberof bilibili.community.service.dm.v1.ToastV2
                         * @instance
                         */
                        ToastV2.prototype.text = "";

                        /**
                         * ToastV2 duration.
                         * @member {number} duration
                         * @memberof bilibili.community.service.dm.v1.ToastV2
                         * @instance
                         */
                        ToastV2.prototype.duration = 0;

                        /**
                         * ToastV2 toastButtonV2.
                         * @member {bilibili.community.service.dm.v1.IToastButtonV2|null|undefined} toastButtonV2
                         * @memberof bilibili.community.service.dm.v1.ToastV2
                         * @instance
                         */
                        ToastV2.prototype.toastButtonV2 = null;

                        /**
                         * Creates a new ToastV2 instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.ToastV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.IToastV2=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.ToastV2} ToastV2 instance
                         */
                        ToastV2.create = function create(properties) {
                            return new ToastV2(properties);
                        };

                        /**
                         * Encodes the specified ToastV2 message. Does not implicitly {@link bilibili.community.service.dm.v1.ToastV2.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.ToastV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.IToastV2} message ToastV2 message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ToastV2.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.text != null && Object.hasOwnProperty.call(message, "text"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.text);
                            if (message.duration != null && Object.hasOwnProperty.call(message, "duration"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.duration);
                            if (message.toastButtonV2 != null && Object.hasOwnProperty.call(message, "toastButtonV2"))
                                $root.bilibili.community.service.dm.v1.ToastButtonV2.encode(message.toastButtonV2, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified ToastV2 message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.ToastV2.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.ToastV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.IToastV2} message ToastV2 message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ToastV2.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a ToastV2 message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.ToastV2
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.ToastV2} ToastV2
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ToastV2.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.ToastV2();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.text = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.duration = reader.int32();
                                        break;
                                    }
                                case 3: {
                                        message.toastButtonV2 = $root.bilibili.community.service.dm.v1.ToastButtonV2.decode(reader, reader.uint32());
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a ToastV2 message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.ToastV2
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.ToastV2} ToastV2
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ToastV2.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a ToastV2 message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.ToastV2
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ToastV2.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.text != null && message.hasOwnProperty("text"))
                                if (!$util.isString(message.text))
                                    return "text: string expected";
                            if (message.duration != null && message.hasOwnProperty("duration"))
                                if (!$util.isInteger(message.duration))
                                    return "duration: integer expected";
                            if (message.toastButtonV2 != null && message.hasOwnProperty("toastButtonV2")) {
                                let error = $root.bilibili.community.service.dm.v1.ToastButtonV2.verify(message.toastButtonV2);
                                if (error)
                                    return "toastButtonV2." + error;
                            }
                            return null;
                        };

                        /**
                         * Creates a ToastV2 message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.ToastV2
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.ToastV2} ToastV2
                         */
                        ToastV2.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.ToastV2)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.ToastV2();
                            if (object.text != null)
                                message.text = String(object.text);
                            if (object.duration != null)
                                message.duration = object.duration | 0;
                            if (object.toastButtonV2 != null) {
                                if (typeof object.toastButtonV2 !== "object")
                                    throw TypeError(".bilibili.community.service.dm.v1.ToastV2.toastButtonV2: object expected");
                                message.toastButtonV2 = $root.bilibili.community.service.dm.v1.ToastButtonV2.fromObject(object.toastButtonV2);
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a ToastV2 message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.ToastV2
                         * @static
                         * @param {bilibili.community.service.dm.v1.ToastV2} message ToastV2
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ToastV2.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.text = "";
                                object.duration = 0;
                                object.toastButtonV2 = null;
                            }
                            if (message.text != null && message.hasOwnProperty("text"))
                                object.text = message.text;
                            if (message.duration != null && message.hasOwnProperty("duration"))
                                object.duration = message.duration;
                            if (message.toastButtonV2 != null && message.hasOwnProperty("toastButtonV2"))
                                object.toastButtonV2 = $root.bilibili.community.service.dm.v1.ToastButtonV2.toObject(message.toastButtonV2, options);
                            return object;
                        };

                        /**
                         * Converts this ToastV2 to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.ToastV2
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ToastV2.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for ToastV2
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.ToastV2
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        ToastV2.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.ToastV2";
                        };

                        return ToastV2;
                    })();

                    v1.UserInfo = (function() {

                        /**
                         * Properties of a UserInfo.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IUserInfo
                         * @property {number|Long|null} [mid] UserInfo mid
                         * @property {string|null} [name] UserInfo name
                         * @property {string|null} [sex] UserInfo sex
                         * @property {string|null} [face] UserInfo face
                         * @property {string|null} [sign] UserInfo sign
                         * @property {number|null} [rank] UserInfo rank
                         */

                        /**
                         * Constructs a new UserInfo.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a UserInfo.
                         * @implements IUserInfo
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IUserInfo=} [properties] Properties to set
                         */
                        function UserInfo(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * UserInfo mid.
                         * @member {number|Long} mid
                         * @memberof bilibili.community.service.dm.v1.UserInfo
                         * @instance
                         */
                        UserInfo.prototype.mid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * UserInfo name.
                         * @member {string} name
                         * @memberof bilibili.community.service.dm.v1.UserInfo
                         * @instance
                         */
                        UserInfo.prototype.name = "";

                        /**
                         * UserInfo sex.
                         * @member {string} sex
                         * @memberof bilibili.community.service.dm.v1.UserInfo
                         * @instance
                         */
                        UserInfo.prototype.sex = "";

                        /**
                         * UserInfo face.
                         * @member {string} face
                         * @memberof bilibili.community.service.dm.v1.UserInfo
                         * @instance
                         */
                        UserInfo.prototype.face = "";

                        /**
                         * UserInfo sign.
                         * @member {string} sign
                         * @memberof bilibili.community.service.dm.v1.UserInfo
                         * @instance
                         */
                        UserInfo.prototype.sign = "";

                        /**
                         * UserInfo rank.
                         * @member {number} rank
                         * @memberof bilibili.community.service.dm.v1.UserInfo
                         * @instance
                         */
                        UserInfo.prototype.rank = 0;

                        /**
                         * Creates a new UserInfo instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.UserInfo
                         * @static
                         * @param {bilibili.community.service.dm.v1.IUserInfo=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.UserInfo} UserInfo instance
                         */
                        UserInfo.create = function create(properties) {
                            return new UserInfo(properties);
                        };

                        /**
                         * Encodes the specified UserInfo message. Does not implicitly {@link bilibili.community.service.dm.v1.UserInfo.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.UserInfo
                         * @static
                         * @param {bilibili.community.service.dm.v1.IUserInfo} message UserInfo message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        UserInfo.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.mid != null && Object.hasOwnProperty.call(message, "mid"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.mid);
                            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                            if (message.sex != null && Object.hasOwnProperty.call(message, "sex"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.sex);
                            if (message.face != null && Object.hasOwnProperty.call(message, "face"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.face);
                            if (message.sign != null && Object.hasOwnProperty.call(message, "sign"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.sign);
                            if (message.rank != null && Object.hasOwnProperty.call(message, "rank"))
                                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.rank);
                            return writer;
                        };

                        /**
                         * Encodes the specified UserInfo message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.UserInfo.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.UserInfo
                         * @static
                         * @param {bilibili.community.service.dm.v1.IUserInfo} message UserInfo message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        UserInfo.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a UserInfo message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.UserInfo
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.UserInfo} UserInfo
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        UserInfo.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.UserInfo();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.mid = reader.int64();
                                        break;
                                    }
                                case 2: {
                                        message.name = reader.string();
                                        break;
                                    }
                                case 3: {
                                        message.sex = reader.string();
                                        break;
                                    }
                                case 4: {
                                        message.face = reader.string();
                                        break;
                                    }
                                case 5: {
                                        message.sign = reader.string();
                                        break;
                                    }
                                case 6: {
                                        message.rank = reader.int32();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a UserInfo message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.UserInfo
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.UserInfo} UserInfo
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        UserInfo.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a UserInfo message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.UserInfo
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        UserInfo.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.mid != null && message.hasOwnProperty("mid"))
                                if (!$util.isInteger(message.mid) && !(message.mid && $util.isInteger(message.mid.low) && $util.isInteger(message.mid.high)))
                                    return "mid: integer|Long expected";
                            if (message.name != null && message.hasOwnProperty("name"))
                                if (!$util.isString(message.name))
                                    return "name: string expected";
                            if (message.sex != null && message.hasOwnProperty("sex"))
                                if (!$util.isString(message.sex))
                                    return "sex: string expected";
                            if (message.face != null && message.hasOwnProperty("face"))
                                if (!$util.isString(message.face))
                                    return "face: string expected";
                            if (message.sign != null && message.hasOwnProperty("sign"))
                                if (!$util.isString(message.sign))
                                    return "sign: string expected";
                            if (message.rank != null && message.hasOwnProperty("rank"))
                                if (!$util.isInteger(message.rank))
                                    return "rank: integer expected";
                            return null;
                        };

                        /**
                         * Creates a UserInfo message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.UserInfo
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.UserInfo} UserInfo
                         */
                        UserInfo.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.UserInfo)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.UserInfo();
                            if (object.mid != null)
                                if ($util.Long)
                                    (message.mid = $util.Long.fromValue(object.mid)).unsigned = false;
                                else if (typeof object.mid === "string")
                                    message.mid = parseInt(object.mid, 10);
                                else if (typeof object.mid === "number")
                                    message.mid = object.mid;
                                else if (typeof object.mid === "object")
                                    message.mid = new $util.LongBits(object.mid.low >>> 0, object.mid.high >>> 0).toNumber();
                            if (object.name != null)
                                message.name = String(object.name);
                            if (object.sex != null)
                                message.sex = String(object.sex);
                            if (object.face != null)
                                message.face = String(object.face);
                            if (object.sign != null)
                                message.sign = String(object.sign);
                            if (object.rank != null)
                                message.rank = object.rank | 0;
                            return message;
                        };

                        /**
                         * Creates a plain object from a UserInfo message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.UserInfo
                         * @static
                         * @param {bilibili.community.service.dm.v1.UserInfo} message UserInfo
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        UserInfo.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.mid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.mid = options.longs === String ? "0" : 0;
                                object.name = "";
                                object.sex = "";
                                object.face = "";
                                object.sign = "";
                                object.rank = 0;
                            }
                            if (message.mid != null && message.hasOwnProperty("mid"))
                                if (typeof message.mid === "number")
                                    object.mid = options.longs === String ? String(message.mid) : message.mid;
                                else
                                    object.mid = options.longs === String ? $util.Long.prototype.toString.call(message.mid) : options.longs === Number ? new $util.LongBits(message.mid.low >>> 0, message.mid.high >>> 0).toNumber() : message.mid;
                            if (message.name != null && message.hasOwnProperty("name"))
                                object.name = message.name;
                            if (message.sex != null && message.hasOwnProperty("sex"))
                                object.sex = message.sex;
                            if (message.face != null && message.hasOwnProperty("face"))
                                object.face = message.face;
                            if (message.sign != null && message.hasOwnProperty("sign"))
                                object.sign = message.sign;
                            if (message.rank != null && message.hasOwnProperty("rank"))
                                object.rank = message.rank;
                            return object;
                        };

                        /**
                         * Converts this UserInfo to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.UserInfo
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        UserInfo.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for UserInfo
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.UserInfo
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        UserInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.UserInfo";
                        };

                        return UserInfo;
                    })();

                    v1.VideoMask = (function() {

                        /**
                         * Properties of a VideoMask.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IVideoMask
                         * @property {number|Long|null} [cid] VideoMask cid
                         * @property {number|null} [plat] VideoMask plat
                         * @property {number|null} [fps] VideoMask fps
                         * @property {number|Long|null} [time] VideoMask time
                         * @property {string|null} [maskUrl] VideoMask maskUrl
                         */

                        /**
                         * Constructs a new VideoMask.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a VideoMask.
                         * @implements IVideoMask
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IVideoMask=} [properties] Properties to set
                         */
                        function VideoMask(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * VideoMask cid.
                         * @member {number|Long} cid
                         * @memberof bilibili.community.service.dm.v1.VideoMask
                         * @instance
                         */
                        VideoMask.prototype.cid = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * VideoMask plat.
                         * @member {number} plat
                         * @memberof bilibili.community.service.dm.v1.VideoMask
                         * @instance
                         */
                        VideoMask.prototype.plat = 0;

                        /**
                         * VideoMask fps.
                         * @member {number} fps
                         * @memberof bilibili.community.service.dm.v1.VideoMask
                         * @instance
                         */
                        VideoMask.prototype.fps = 0;

                        /**
                         * VideoMask time.
                         * @member {number|Long} time
                         * @memberof bilibili.community.service.dm.v1.VideoMask
                         * @instance
                         */
                        VideoMask.prototype.time = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

                        /**
                         * VideoMask maskUrl.
                         * @member {string} maskUrl
                         * @memberof bilibili.community.service.dm.v1.VideoMask
                         * @instance
                         */
                        VideoMask.prototype.maskUrl = "";

                        /**
                         * Creates a new VideoMask instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.VideoMask
                         * @static
                         * @param {bilibili.community.service.dm.v1.IVideoMask=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.VideoMask} VideoMask instance
                         */
                        VideoMask.create = function create(properties) {
                            return new VideoMask(properties);
                        };

                        /**
                         * Encodes the specified VideoMask message. Does not implicitly {@link bilibili.community.service.dm.v1.VideoMask.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.VideoMask
                         * @static
                         * @param {bilibili.community.service.dm.v1.IVideoMask} message VideoMask message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoMask.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.cid != null && Object.hasOwnProperty.call(message, "cid"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.cid);
                            if (message.plat != null && Object.hasOwnProperty.call(message, "plat"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.plat);
                            if (message.fps != null && Object.hasOwnProperty.call(message, "fps"))
                                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.fps);
                            if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.time);
                            if (message.maskUrl != null && Object.hasOwnProperty.call(message, "maskUrl"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.maskUrl);
                            return writer;
                        };

                        /**
                         * Encodes the specified VideoMask message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.VideoMask.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.VideoMask
                         * @static
                         * @param {bilibili.community.service.dm.v1.IVideoMask} message VideoMask message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoMask.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a VideoMask message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.VideoMask
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.VideoMask} VideoMask
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoMask.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.VideoMask();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.cid = reader.int64();
                                        break;
                                    }
                                case 2: {
                                        message.plat = reader.int32();
                                        break;
                                    }
                                case 3: {
                                        message.fps = reader.int32();
                                        break;
                                    }
                                case 4: {
                                        message.time = reader.int64();
                                        break;
                                    }
                                case 5: {
                                        message.maskUrl = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a VideoMask message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.VideoMask
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.VideoMask} VideoMask
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoMask.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a VideoMask message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.VideoMask
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        VideoMask.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.cid != null && message.hasOwnProperty("cid"))
                                if (!$util.isInteger(message.cid) && !(message.cid && $util.isInteger(message.cid.low) && $util.isInteger(message.cid.high)))
                                    return "cid: integer|Long expected";
                            if (message.plat != null && message.hasOwnProperty("plat"))
                                if (!$util.isInteger(message.plat))
                                    return "plat: integer expected";
                            if (message.fps != null && message.hasOwnProperty("fps"))
                                if (!$util.isInteger(message.fps))
                                    return "fps: integer expected";
                            if (message.time != null && message.hasOwnProperty("time"))
                                if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                                    return "time: integer|Long expected";
                            if (message.maskUrl != null && message.hasOwnProperty("maskUrl"))
                                if (!$util.isString(message.maskUrl))
                                    return "maskUrl: string expected";
                            return null;
                        };

                        /**
                         * Creates a VideoMask message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.VideoMask
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.VideoMask} VideoMask
                         */
                        VideoMask.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.VideoMask)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.VideoMask();
                            if (object.cid != null)
                                if ($util.Long)
                                    (message.cid = $util.Long.fromValue(object.cid)).unsigned = false;
                                else if (typeof object.cid === "string")
                                    message.cid = parseInt(object.cid, 10);
                                else if (typeof object.cid === "number")
                                    message.cid = object.cid;
                                else if (typeof object.cid === "object")
                                    message.cid = new $util.LongBits(object.cid.low >>> 0, object.cid.high >>> 0).toNumber();
                            if (object.plat != null)
                                message.plat = object.plat | 0;
                            if (object.fps != null)
                                message.fps = object.fps | 0;
                            if (object.time != null)
                                if ($util.Long)
                                    (message.time = $util.Long.fromValue(object.time)).unsigned = false;
                                else if (typeof object.time === "string")
                                    message.time = parseInt(object.time, 10);
                                else if (typeof object.time === "number")
                                    message.time = object.time;
                                else if (typeof object.time === "object")
                                    message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
                            if (object.maskUrl != null)
                                message.maskUrl = String(object.maskUrl);
                            return message;
                        };

                        /**
                         * Creates a plain object from a VideoMask message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.VideoMask
                         * @static
                         * @param {bilibili.community.service.dm.v1.VideoMask} message VideoMask
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        VideoMask.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.cid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.cid = options.longs === String ? "0" : 0;
                                object.plat = 0;
                                object.fps = 0;
                                if ($util.Long) {
                                    let long = new $util.Long(0, 0, false);
                                    object.time = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.time = options.longs === String ? "0" : 0;
                                object.maskUrl = "";
                            }
                            if (message.cid != null && message.hasOwnProperty("cid"))
                                if (typeof message.cid === "number")
                                    object.cid = options.longs === String ? String(message.cid) : message.cid;
                                else
                                    object.cid = options.longs === String ? $util.Long.prototype.toString.call(message.cid) : options.longs === Number ? new $util.LongBits(message.cid.low >>> 0, message.cid.high >>> 0).toNumber() : message.cid;
                            if (message.plat != null && message.hasOwnProperty("plat"))
                                object.plat = message.plat;
                            if (message.fps != null && message.hasOwnProperty("fps"))
                                object.fps = message.fps;
                            if (message.time != null && message.hasOwnProperty("time"))
                                if (typeof message.time === "number")
                                    object.time = options.longs === String ? String(message.time) : message.time;
                                else
                                    object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
                            if (message.maskUrl != null && message.hasOwnProperty("maskUrl"))
                                object.maskUrl = message.maskUrl;
                            return object;
                        };

                        /**
                         * Converts this VideoMask to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.VideoMask
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        VideoMask.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for VideoMask
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.VideoMask
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        VideoMask.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.VideoMask";
                        };

                        return VideoMask;
                    })();

                    v1.VideoSubtitle = (function() {

                        /**
                         * Properties of a VideoSubtitle.
                         * @memberof bilibili.community.service.dm.v1
                         * @interface IVideoSubtitle
                         * @property {string|null} [lan] VideoSubtitle lan
                         * @property {string|null} [lanDoc] VideoSubtitle lanDoc
                         * @property {Array.<bilibili.community.service.dm.v1.ISubtitleItem>|null} [subtitles] VideoSubtitle subtitles
                         */

                        /**
                         * Constructs a new VideoSubtitle.
                         * @memberof bilibili.community.service.dm.v1
                         * @classdesc Represents a VideoSubtitle.
                         * @implements IVideoSubtitle
                         * @constructor
                         * @param {bilibili.community.service.dm.v1.IVideoSubtitle=} [properties] Properties to set
                         */
                        function VideoSubtitle(properties) {
                            this.subtitles = [];
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * VideoSubtitle lan.
                         * @member {string} lan
                         * @memberof bilibili.community.service.dm.v1.VideoSubtitle
                         * @instance
                         */
                        VideoSubtitle.prototype.lan = "";

                        /**
                         * VideoSubtitle lanDoc.
                         * @member {string} lanDoc
                         * @memberof bilibili.community.service.dm.v1.VideoSubtitle
                         * @instance
                         */
                        VideoSubtitle.prototype.lanDoc = "";

                        /**
                         * VideoSubtitle subtitles.
                         * @member {Array.<bilibili.community.service.dm.v1.ISubtitleItem>} subtitles
                         * @memberof bilibili.community.service.dm.v1.VideoSubtitle
                         * @instance
                         */
                        VideoSubtitle.prototype.subtitles = $util.emptyArray;

                        /**
                         * Creates a new VideoSubtitle instance using the specified properties.
                         * @function create
                         * @memberof bilibili.community.service.dm.v1.VideoSubtitle
                         * @static
                         * @param {bilibili.community.service.dm.v1.IVideoSubtitle=} [properties] Properties to set
                         * @returns {bilibili.community.service.dm.v1.VideoSubtitle} VideoSubtitle instance
                         */
                        VideoSubtitle.create = function create(properties) {
                            return new VideoSubtitle(properties);
                        };

                        /**
                         * Encodes the specified VideoSubtitle message. Does not implicitly {@link bilibili.community.service.dm.v1.VideoSubtitle.verify|verify} messages.
                         * @function encode
                         * @memberof bilibili.community.service.dm.v1.VideoSubtitle
                         * @static
                         * @param {bilibili.community.service.dm.v1.IVideoSubtitle} message VideoSubtitle message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoSubtitle.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.lan != null && Object.hasOwnProperty.call(message, "lan"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.lan);
                            if (message.lanDoc != null && Object.hasOwnProperty.call(message, "lanDoc"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.lanDoc);
                            if (message.subtitles != null && message.subtitles.length)
                                for (let i = 0; i < message.subtitles.length; ++i)
                                    $root.bilibili.community.service.dm.v1.SubtitleItem.encode(message.subtitles[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            return writer;
                        };

                        /**
                         * Encodes the specified VideoSubtitle message, length delimited. Does not implicitly {@link bilibili.community.service.dm.v1.VideoSubtitle.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof bilibili.community.service.dm.v1.VideoSubtitle
                         * @static
                         * @param {bilibili.community.service.dm.v1.IVideoSubtitle} message VideoSubtitle message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        VideoSubtitle.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a VideoSubtitle message from the specified reader or buffer.
                         * @function decode
                         * @memberof bilibili.community.service.dm.v1.VideoSubtitle
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {bilibili.community.service.dm.v1.VideoSubtitle} VideoSubtitle
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoSubtitle.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.bilibili.community.service.dm.v1.VideoSubtitle();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.lan = reader.string();
                                        break;
                                    }
                                case 2: {
                                        message.lanDoc = reader.string();
                                        break;
                                    }
                                case 3: {
                                        if (!(message.subtitles && message.subtitles.length))
                                            message.subtitles = [];
                                        message.subtitles.push($root.bilibili.community.service.dm.v1.SubtitleItem.decode(reader, reader.uint32()));
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a VideoSubtitle message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof bilibili.community.service.dm.v1.VideoSubtitle
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {bilibili.community.service.dm.v1.VideoSubtitle} VideoSubtitle
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        VideoSubtitle.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a VideoSubtitle message.
                         * @function verify
                         * @memberof bilibili.community.service.dm.v1.VideoSubtitle
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        VideoSubtitle.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.lan != null && message.hasOwnProperty("lan"))
                                if (!$util.isString(message.lan))
                                    return "lan: string expected";
                            if (message.lanDoc != null && message.hasOwnProperty("lanDoc"))
                                if (!$util.isString(message.lanDoc))
                                    return "lanDoc: string expected";
                            if (message.subtitles != null && message.hasOwnProperty("subtitles")) {
                                if (!Array.isArray(message.subtitles))
                                    return "subtitles: array expected";
                                for (let i = 0; i < message.subtitles.length; ++i) {
                                    let error = $root.bilibili.community.service.dm.v1.SubtitleItem.verify(message.subtitles[i]);
                                    if (error)
                                        return "subtitles." + error;
                                }
                            }
                            return null;
                        };

                        /**
                         * Creates a VideoSubtitle message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof bilibili.community.service.dm.v1.VideoSubtitle
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {bilibili.community.service.dm.v1.VideoSubtitle} VideoSubtitle
                         */
                        VideoSubtitle.fromObject = function fromObject(object) {
                            if (object instanceof $root.bilibili.community.service.dm.v1.VideoSubtitle)
                                return object;
                            let message = new $root.bilibili.community.service.dm.v1.VideoSubtitle();
                            if (object.lan != null)
                                message.lan = String(object.lan);
                            if (object.lanDoc != null)
                                message.lanDoc = String(object.lanDoc);
                            if (object.subtitles) {
                                if (!Array.isArray(object.subtitles))
                                    throw TypeError(".bilibili.community.service.dm.v1.VideoSubtitle.subtitles: array expected");
                                message.subtitles = [];
                                for (let i = 0; i < object.subtitles.length; ++i) {
                                    if (typeof object.subtitles[i] !== "object")
                                        throw TypeError(".bilibili.community.service.dm.v1.VideoSubtitle.subtitles: object expected");
                                    message.subtitles[i] = $root.bilibili.community.service.dm.v1.SubtitleItem.fromObject(object.subtitles[i]);
                                }
                            }
                            return message;
                        };

                        /**
                         * Creates a plain object from a VideoSubtitle message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof bilibili.community.service.dm.v1.VideoSubtitle
                         * @static
                         * @param {bilibili.community.service.dm.v1.VideoSubtitle} message VideoSubtitle
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        VideoSubtitle.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.arrays || options.defaults)
                                object.subtitles = [];
                            if (options.defaults) {
                                object.lan = "";
                                object.lanDoc = "";
                            }
                            if (message.lan != null && message.hasOwnProperty("lan"))
                                object.lan = message.lan;
                            if (message.lanDoc != null && message.hasOwnProperty("lanDoc"))
                                object.lanDoc = message.lanDoc;
                            if (message.subtitles && message.subtitles.length) {
                                object.subtitles = [];
                                for (let j = 0; j < message.subtitles.length; ++j)
                                    object.subtitles[j] = $root.bilibili.community.service.dm.v1.SubtitleItem.toObject(message.subtitles[j], options);
                            }
                            return object;
                        };

                        /**
                         * Converts this VideoSubtitle to JSON.
                         * @function toJSON
                         * @memberof bilibili.community.service.dm.v1.VideoSubtitle
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        VideoSubtitle.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for VideoSubtitle
                         * @function getTypeUrl
                         * @memberof bilibili.community.service.dm.v1.VideoSubtitle
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        VideoSubtitle.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/bilibili.community.service.dm.v1.VideoSubtitle";
                        };

                        return VideoSubtitle;
                    })();

                    return v1;
                })();

                return dm;
            })();

            return service;
        })();

        return community;
    })();

    return bilibili;
})();

export { $root as default };
